;
;
((() => {
    var O = {
            742: (M, S) => {
                'use strict';
                ;
                S['b$'] = function (Z) {
                    var v, V, T = g(Z), j = T[0], J = T[1], R = new E(function (I, y, P) {
                            return 3 * (y + P) / 4 - P;
                        }(0, j, J)), L = 0, A = J > 0 ? j - 4 : j;
                    for (V = 0; V < A; V += 4) {
                        v = C[Z.charCodeAt(V)] << 18 | C[Z.charCodeAt(V + 1)] << 12 | C[Z.charCodeAt(V + 2)] << 6 | C[Z.charCodeAt(V + 3)];
                        R[L++] = v >> 16 & 255;
                        R[L++] = v >> 8 & 255;
                        R[L++] = 255 & v;
                    }
                    return 2 === J && (v = C[Z.charCodeAt(V)] << 2 | C[Z.charCodeAt(V + 1)] >> 4, R[L++] = 255 & v), 1 === J && (v = C[Z.charCodeAt(V)] << 10 | C[Z.charCodeAt(V + 1)] << 4 | C[Z.charCodeAt(V + 2)] >> 2, R[L++] = v >> 8 & 255, R[L++] = 255 & v), R;
                };
                S.JQ = function (Z) {
                    ;
                    for (var v, V = Z.length, T = V % 3, j = [], R = 0, L = V - T; R < L; R += 16383) {
                        j.push(m(Z, R, R + 16383 > L ? L : R + 16383));
                    }
                    return 1 === T ? (v = Z[V - 1], j.push(K[v >> 2] + K[v << 4 & 63] + '==')) : 2 === T && (v = (Z[V - 2] << 8) + Z[V - 1], j.push(K[v >> 10] + K[v >> 4 & 63] + K[v << 2 & 63] + '=')), j.join('');
                };
                for (var K = [], C = [], E = 'undefined' != typeof Uint8Array ? Uint8Array : Array, h = 0, b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.length; h < b; ++h) {
                    K[h] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'[h];
                    C['ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.charCodeAt(h)] = h;
                }
                function g(Z) {
                    var v = Z.length;
                    if (v % 4 > 0) {
                        throw new Error('Invalid string. Length must be a multiple of 4');
                    }
                    var V = Z.indexOf('=');
                    return -1 === V && (V = v), [
                        V,
                        V === v ? 0 : 4 - V % 4
                    ];
                }
                function m(Z, v, V) {
                    ;
                    for (var T, j, J = [], R = v; R < V; R += 3) {
                        T = (Z[R] << 16 & 16711680) + (Z[R + 1] << 8 & 65280) + (255 & Z[R + 2]);
                        J.push(K[(j = T) >> 18 & 63] + K[j >> 12 & 63] + K[j >> 6 & 63] + K[63 & j]);
                    }
                    return J.join('');
                }
                C['-'.charCodeAt(0)] = 62;
                C['_'.charCodeAt(0)] = 63;
            },
            666: M => {
                var S = function (K) {
                    'use strict';
                    ;
                    var H, Z = Object.prototype, V = Z.hasOwnProperty, j = Object.defineProperty || function (Ot, OM, OS) {
                            ;
                            Ot[OM] = OS.value;
                        }, J = 'function' == typeof Symbol ? Symbol : {}, R = J.iterator || '@@iterator', A = J.asyncIterator || '@@asyncIterator', P = J.toStringTag || '@@toStringTag';
                    function N(Ot, OM, OS) {
                        return Object.defineProperty(Ot, OM, {
                            'value': OS,
                            'enumerable': true,
                            'configurable': true,
                            'writable': true
                        }), Ot[OM];
                    }
                    try {
                        N({}, '');
                    } catch (Ot) {
                        N = function (OM, OS, OK) {
                            return OM[OS] = OK;
                        };
                    }
                    function W(OM, OS, OK, OC) {
                        var OE = OS && OS.prototype instanceof q ? OS : q, Or = Object.create(OE.prototype), Oa = new OO(OC || []);
                        return j(Or, '_invoke', { 'value': O6(OM, OK, Oa) }), Or;
                    }
                    function D(OM, OS, OK) {
                        ;
                        try {
                            return {
                                'type': 'normal',
                                'arg': OM.call(OS, OK)
                            };
                        } catch (OC) {
                            return {
                                'type': 'throw',
                                'arg': OC
                            };
                        }
                    }
                    K.wrap = W;
                    var Q = 'suspendedStart', X = 'executing', G = 'completed', F = {};
                    function q() {
                    }
                    function U() {
                    }
                    function B() {
                    }
                    var O0 = {};
                    N(O0, R, function () {
                        return this;
                    });
                    var O1 = Object.getPrototypeOf, O2 = O1 && O1(O1(OY([])));
                    O2 && O2 !== Z && V.call(O2, R) && (O0 = O2);
                    var O3 = B.prototype = q.prototype = Object.create(O0);
                    function O4(OM) {
                        ;
                        [
                            'next',
                            'throw',
                            'return'
                        ].forEach(function (OS) {
                            N(OM, OS, function (OK) {
                                ;
                                return this['_invoke'](OS, OK);
                            });
                        });
                    }
                    function O5(OM, OS) {
                        function OK(OE, Or, Oa, OH) {
                            var Oh = D(OM[OE], OM, Or);
                            if ('throw' !== Oh.type) {
                                var Ob = Oh.arg, Og = Ob.value;
                                return Og && 'object' == typeof Og && V.call(Og, '__await') ? OS.resolve(Og['__await']).then(function (Om) {
                                    ;
                                    OK('next', Om, Oa, OH);
                                }, function (Om) {
                                    OK('throw', Om, Oa, OH);
                                }) : OS.resolve(Og).then(function (Om) {
                                    ;
                                    Ob.value = Om;
                                    Oa(Ob);
                                }, function (Om) {
                                    ;
                                    return OK('throw', Om, Oa, OH);
                                });
                            }
                            OH(Oh.arg);
                        }
                        var OC;
                        j(this, '_invoke', {
                            'value': function (OE, Or) {
                                ;
                                function Oa() {
                                    return new OS(function (OH, Oh) {
                                        OK(OE, Or, OH, Oh);
                                    });
                                }
                                return OC = OC ? OC.then(Oa, Oa) : Oa();
                            }
                        });
                    }
                    function O6(OM, OS, OK) {
                        var OC = Q;
                        return function (OE, Or) {
                            ;
                            if (OC === X) {
                                throw new Error('Generator is already running');
                            }
                            if (OC === G) {
                                if ('throw' === OE) {
                                    throw Or;
                                }
                                return Oc();
                            }
                            for (OK.method = OE, OK.arg = Or;;) {
                                var Oa = OK.delegate;
                                if (Oa) {
                                    var OH = O7(Oa, OK);
                                    if (OH) {
                                        if (OH === F) {
                                            continue;
                                        }
                                        return OH;
                                    }
                                }
                                if ('next' === OK.method) {
                                    ;
                                } else {
                                    if ('throw' === OK.method) {
                                        if (OC === Q) {
                                            throw OC = G, OK.arg;
                                        }
                                        OK.dispatchException(OK.arg);
                                    } else {
                                        'return' === OK.method && OK.abrupt('return', OK.arg);
                                    }
                                }
                                OC = X;
                                var Oh = D(OM, OS, OK);
                                if ('normal' === Oh.type) {
                                    if (OC = OK.done ? G : 'suspendedYield', Oh.arg === F) {
                                        continue;
                                    }
                                    return {
                                        'value': Oh.arg,
                                        'done': OK.done
                                    };
                                }
                                if ('throw' === Oh.type) {
                                    OC = G;
                                    ;
                                    ;
                                }
                            }
                        };
                    }
                    function O7(OM, OS) {
                        var OK = OS.method, OC = OM.iterator[OK];
                        if (OC === H) {
                            return OS.delegate = null, 'throw' === OK && OM.iterator.return && (OS.method = 'return', OS.arg = H, O7(OM, OS), 'throw' === OS.method) || 'return' !== OK && (OS.method = 'throw', OS.arg = new TypeError('The iterator does not provide a \'' + OK + '\' method')), F;
                        }
                        var OE = D(OC, OM.iterator, OS.arg);
                        if ('throw' === OE.type) {
                            return OS.method = 'throw', OS.arg = OE.arg, OS.delegate = null, F;
                        }
                        var Or = OE.arg;
                        return Or ? Or.done ? (OS[OM.resultName] = Or.value, OS.next = OM.nextLoc, 'return' !== OS.method && (OS.method = 'next', OS.arg = H), OS.delegate = null, F) : Or : (OS.method = 'throw', OS.arg = new TypeError('iterator result is not an object'), OS.delegate = null, F);
                    }
                    function O8(OM) {
                        var OS = { 'tryLoc': OM[0] };
                        1 in OM && (OS.catchLoc = OM[1]);
                        if (2 in OM) {
                            OS.finallyLoc = OM[2];
                            OS.afterLoc = OM[3];
                        }
                        this.tryEntries.push(OS);
                    }
                    function O9(OM) {
                        var OS = OM.completion || {};
                        OS.type = 'normal';
                        delete OS.arg;
                        OM.completion = OS;
                    }
                    function OO(OM) {
                        ;
                        this.tryEntries = [{ 'tryLoc': 'root' }];
                        OM.forEach(O8, this);
                        this.reset(true);
                    }
                    function OY(OM) {
                        ;
                        if (OM) {
                            var OS = OM[R];
                            if (OS) {
                                return OS.call(OM);
                            }
                            if ('function' == typeof OM.next) {
                                return OM;
                            }
                            if (!isNaN(OM.length)) {
                                var OK = -1, OC = function OE() {
                                        ;
                                        for (; ++OK < OM.length;) {
                                            if (V.call(OM, OK)) {
                                                return OE.value = OM[OK], OE.done = false, OE;
                                            }
                                        }
                                        return OE.value = H, OE.done = true, OE;
                                    };
                                return OC.next = OC;
                            }
                        }
                        return { 'next': Oc };
                    }
                    function Oc() {
                        return {
                            'value': H,
                            'done': true
                        };
                    }
                    return U.prototype = B, j(O3, 'constructor', {
                        'value': B,
                        'configurable': true
                    }), j(B, 'constructor', {
                        'value': U,
                        'configurable': true
                    }), U.displayName = N(B, P, 'GeneratorFunction'), K.isGeneratorFunction = function (OM) {
                        var OS = 'function' == typeof OM && OM.constructor;
                        return !!OS && (OS === U || 'GeneratorFunction' === (OS.displayName || OS.name));
                    }, K.mark = function (OM) {
                        ;
                        return Object.setPrototypeOf ? Object.setPrototypeOf(OM, B) : (OM['__proto__'] = B, N(OM, P, 'GeneratorFunction')), OM.prototype = Object.create(O3), OM;
                    }, K.awrap = function (OM) {
                        return { '__await': OM };
                    }, O4(O5.prototype), N(O5.prototype, A, function () {
                        return this;
                    }), K.AsyncIterator = O5, K.async = function (OM, OS, OK, OC, OE) {
                        ;
                        void 0 === OE && (OE = Promise);
                        var Or = new O5(W(OM, OS, OK, OC), OE);
                        return K.isGeneratorFunction(OS) ? Or : Or.next().then(function (Oa) {
                            ;
                            return Oa.done ? Oa.value : Or.next();
                        });
                    }, O4(O3), N(O3, P, 'Generator'), N(O3, R, function () {
                        return this;
                    }), N(O3, 'toString', function () {
                        ;
                        return '[object Generator]';
                    }), K.keys = function (OM) {
                        var OS = Object(OM), OK = [];
                        for (var OC in OS)
                            OK.push(OC);
                        return OK.reverse(), function OE() {
                            ;
                            for (; OK.length;) {
                                var Or = OK.pop();
                                if (Or in OS) {
                                    return OE.value = Or, OE.done = false, OE;
                                }
                            }
                            return OE.done = true, OE;
                        };
                    }, K.values = OY, OO.prototype = {
                        'constructor': OO,
                        'reset': function (OM) {
                            ;
                            if (this.prev = 0, this.next = 0, this.sent = this['_sent'] = H, this.done = false, this.delegate = null, this.method = 'next', this.arg = H, this.tryEntries.forEach(O9), !OM) {
                                for (var OS in this)
                                    't' === OS.charAt(0) && V.call(this, OS) && !isNaN(+OS.slice(1)) && (this[OS] = H);
                            }
                        },
                        'stop': function () {
                            ;
                            this.done = true;
                            var OM = this.tryEntries[0].completion;
                            if ('throw' === OM.type) {
                                throw OM.arg;
                            }
                            return this.rval;
                        },
                        'dispatchException': function (OM) {
                            ;
                            if (this.done) {
                                throw OM;
                            }
                            var OS = this;
                            function OK(Oh, Ob) {
                                ;
                                return Or.type = 'throw', Or.arg = OM, OS.next = Oh, Ob && (OS.method = 'next', OS.arg = H), !!Ob;
                            }
                            for (var OC = this.tryEntries.length - 1; OC >= 0; --OC) {
                                var OE = this.tryEntries[OC], Or = OE.completion;
                                if ('root' === OE.tryLoc) {
                                    return OK('end');
                                }
                                if (OE.tryLoc <= this.prev) {
                                    var Oa = V.call(OE, 'catchLoc'), OH = V.call(OE, 'finallyLoc');
                                    if (Oa && OH) {
                                        if (this.prev < OE.catchLoc) {
                                            return OK(OE.catchLoc, true);
                                        }
                                        if (this.prev < OE.finallyLoc) {
                                            return OK(OE.finallyLoc);
                                        }
                                    } else {
                                        if (Oa) {
                                            if (this.prev < OE.catchLoc) {
                                                return OK(OE.catchLoc, true);
                                            }
                                        } else {
                                            if (!OH) {
                                                throw new Error('try statement without catch or finally');
                                            }
                                            if (this.prev < OE.finallyLoc) {
                                                return OK(OE.finallyLoc);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        'abrupt': function (OM, OS) {
                            ;
                            for (var OK = this.tryEntries.length - 1; OK >= 0; --OK) {
                                var OC = this.tryEntries[OK];
                                if (OC.tryLoc <= this.prev && V.call(OC, 'finallyLoc') && this.prev < OC.finallyLoc) {
                                    var OE = OC;
                                    break;
                                }
                            }
                            OE && ('break' === OM || 'continue' === OM) && OE.tryLoc <= OS && OS <= OE.finallyLoc && (OE = null);
                            var Or = OE ? OE.completion : {};
                            return Or.type = OM, Or.arg = OS, OE ? (this.method = 'next', this.next = OE.finallyLoc, F) : this.complete(Or);
                        },
                        'complete': function (OM, OS) {
                            ;
                            if ('throw' === OM.type) {
                                throw OM.arg;
                            }
                            return 'break' === OM.type || 'continue' === OM.type ? this.next = OM.arg : 'return' === OM.type ? (this.rval = this.arg = OM.arg, this.method = 'return', this.next = 'end') : 'normal' === OM.type && OS && (this.next = OS), F;
                        },
                        'finish': function (OM) {
                            ;
                            for (var OS = this.tryEntries.length - 1; OS >= 0; --OS) {
                                var OK = this.tryEntries[OS];
                                if (OK.finallyLoc === OM) {
                                    return this.complete(OK.completion, OK.afterLoc), O9(OK), F;
                                }
                            }
                        },
                        'catch': function (OM) {
                            ;
                            for (var OS = this.tryEntries.length - 1; OS >= 0; --OS) {
                                var OK = this.tryEntries[OS];
                                if (OK.tryLoc === OM) {
                                    var OC = OK.completion;
                                    if ('throw' === OC.type) {
                                        var OE = OC.arg;
                                        O9(OK);
                                    }
                                    return OE;
                                }
                            }
                            throw new Error('illegal catch attempt');
                        },
                        'delegateYield': function (OM, OS, OK) {
                            ;
                            return this.delegate = {
                                'iterator': OY(OM),
                                'resultName': OS,
                                'nextLoc': OK
                            }, 'next' === this.method && (this.arg = H), F;
                        }
                    }, K;
                }(M.exports);
                try {
                    regeneratorRuntime = S;
                } catch (K) {
                    'object' == typeof globalThis ? globalThis.regeneratorRuntime = S : Function('r', 'regeneratorRuntime = r')(S);
                }
            },
            774: function (M, S) {
                !function (K) {
                    'use strict';
                    ;
                    function C(H, h, b, g) {
                        var m, Z = false, v = 0;
                        function V() {
                            m && clearTimeout(m);
                        }
                        function T() {
                            V();
                            Z = true;
                        }
                        function j() {
                            ;
                            for (var J = arguments.length, R = new Array(J), L = 0; L < J; L++) {
                                R[L] = arguments[L];
                            }
                            var A = this, I = Date.now() - v;
                            function y() {
                                ;
                                v = Date.now();
                                b.apply(A, R);
                            }
                            function P() {
                                m = void 0;
                            }
                            Z || (g && !m && y(), V(), void 0 === g && I > H ? y() : true !== h && (m = setTimeout(g ? P : y, void 0 === g ? H - I : H)));
                        }
                        return 'boolean' != typeof h && (g = b, b = h, h = void 0), j.cancel = T, j;
                    }
                    function E(r, H, h) {
                        return void 0 === h ? C(r, H, false) : C(r, h, false !== H);
                    }
                    K.debounce = E;
                    K.throttle = C;
                    Object.defineProperty(K, '__esModule', { 'value': true });
                }(S);
            },
            93: (i, O0, O1) => {
                'use strict';
                ;
                var O2, O3, O4;
                O1.d(O0, {
                    'sp': () => PB,
                    'kZ': () => P0,
                    'YI': () => P1,
                    'AG': () => lQ,
                    'jA': () => W3,
                    'VQ': () => WM,
                    'r': () => W1,
                    'Pe': () => lU,
                    'j3': () => lq,
                    'vE': () => NP,
                    'cF': () => WY,
                    'xf': () => NI,
                    'vX': () => P5,
                    'tq': () => lz,
                    'cy': () => Pz,
                    'wh': () => N6,
                    'x8': () => NZ,
                    '_H': () => NT,
                    '$B': () => NH,
                    'N1': () => NV,
                    'br': () => NS,
                    '$v': () => W6,
                    'ae': () => NC,
                    '_t': () => NK,
                    '$b': () => PY,
                    'pR': () => NE,
                    'lm': () => W4,
                    'FN': () => WS,
                    'P$': () => P3,
                    'cs': () => P4,
                    'mv': () => P2,
                    'cb': () => lF,
                    'b5': () => W9,
                    'Dk': () => W2,
                    'Rp': () => NL,
                    'gp': () => W5,
                    'PK': () => N7,
                    'PF': () => PM,
                    'TF': () => NR,
                    'Hc': () => P6,
                    'po': () => WO,
                    'aj': () => NM,
                    'Oq': () => W0,
                    'D5': () => W8,
                    'H8': () => NA
                });
                try {
                    O2 = new TextDecoder();
                } catch (WK) {
                }
                var O5 = 0;
                const O6 = [];
                var O7, O8, O9, OO, OY, OM = O6, OS = 0, OK = {
                        sent: OK['_sent'] = OK.arg,
                        method: 'throw',
                        arg: Oh.arg
                    }, OC = 0, OE = 0, OH = [];
                class OV {
                }
                const OT = new OV();
                OT.name = 'MessagePack 0xC1';
                var Oj, OJ, OR, OL = false, OA = 2;
                try {
                    new Function('');
                } catch (WC) {
                    OA = 1e+400;
                }
                class OI {
                    constructor(WE) {
                        ;
                        WE && (false === WE.useRecords && void 0 === WE.mapsAsObjects && (WE.mapsAsObjects = true), WE.sequential && false !== WE.trusted && (WE.trusted = true, WE.structures || 0 == WE.useRecords || (WE.structures = [], WE.maxSharedStructures || (WE.maxSharedStructures = 0))), WE.structures ? WE.structures.sharedLength = WE.structures.length : WE.getStructures && ((WE.structures = []).uninitialized = true, WE.structures.sharedLength = 0), WE.int64AsNumber && (WE.int64AsType = 'number'));
                        Object.assign(this, WE);
                    }
                    ['unpack'](WE, WH) {
                        ;
                        if (O3) {
                            return YS(() => (YK(), this ? this.unpack(WE, WH) : OI.prototype.unpack.call(OZ, WE, WH)));
                        }
                        'object' == typeof WH ? (O4 = WH.end || WE.length, O5 = WH.start || 0) : (O5 = 0, O4 = WH > -1 ? WH : WE.length);
                        OS = 0;
                        OE = 0;
                        O8 = null;
                        OM = O6;
                        O9 = null;
                        O3 = WE;
                        try {
                            OY = WE.dataView || (WE.dataView = new DataView(WE.buffer, WE.byteOffset, WE.byteLength));
                        } catch (WZ) {
                            if (O3 = null, WE instanceof Uint8Array) {
                                throw WZ;
                            }
                            throw new Error('Source must be a Uint8Array or Buffer but was a ' + (WE && 'object' == typeof WE ? WE.constructor.name : typeof WE));
                        }
                        if (this instanceof OI) {
                            if (OK = this, this.structures) {
                                return O7 = this.structures, OP(WH);
                            }
                            (!O7 || O7.length > 0) && (O7 = []);
                        } else {
                            OK = OZ;
                            (!O7 || O7.length > 0) && (O7 = []);
                        }
                        return OP(WH);
                    }
                    ['unpackMultiple'](WE, WH) {
                        ;
                        let WZ, WV = 0;
                        try {
                            OL = true;
                            let WT = WE.length, Wj = this ? this.unpack(WE, WT) : YE.unpack(WE, WT);
                            if (!WH) {
                                for (WZ = [Wj]; O5 < WT;) {
                                    WV = O5;
                                    WZ.push(OP());
                                }
                                return WZ;
                            }
                            for (WH(Wj); O5 < WT;) {
                                if (WV = O5, false === WH(OP())) {
                                    return;
                                }
                            }
                        } catch (WJ) {
                            throw WJ.lastPosition = WV, WJ.values = WZ, WJ;
                        } finally {
                            OL = false;
                            YK();
                        }
                    }
                    ['_mergeStructures'](WE, WH) {
                        ;
                        OJ && (WE = OJ.call(this, WE));
                        WE = WE || [];
                        Object.isFrozen(WE) && (WE = WE.map(WZ => WZ.slice(0)));
                        for (let WZ = 0, WV = WE.length; WZ < WV; WZ++) {
                            let WT = WE[WZ];
                            WT && (WT.isShared = true, WZ >= 32 && (WT.highByte = WZ - 32 >> 5));
                        }
                        WE.sharedLength = WE.length;
                        for (let Wj in WH || [])
                            if (Wj >= 0) {
                                let WJ = WE[Wj], WR = WH[Wj];
                                WR && (WJ && ((WE.restoreStructures || (WE.restoreStructures = []))[Wj] = WJ), WE[Wj] = WR);
                            }
                        return this.structures = WE;
                    }
                    ['decode'](WE, WH) {
                        ;
                        return this.unpack(WE, WH);
                    }
                }
                function OP(WE) {
                    ;
                    try {
                        if (!OK.trusted && !OL) {
                            let WZ = O7.sharedLength || 0;
                            WZ < O7.length && (O7.length = WZ);
                        }
                        let WH;
                        if (OK.randomAccessStructure && O3[O5] < 64 && O3[O5] >= 32 && Oj ? (WH = Oj(O3, O5, O4, OK), O3 = null, WE && WE.lazy || !WH || (WH = WH.toJSON()), O5 = O4) : WH = OW(), O9 && (O5 = O9.postBundlePosition, O9 = null), O5 == O4) {
                            O7 && O7.restoreStructures && ON();
                            O7 = null;
                            O3 = null;
                            OO && (OO = null);
                        } else {
                            if (O5 > O4) {
                                throw new Error('Unexpected end of MessagePack data');
                            }
                            if (!OL) {
                                throw new Error('Data read, but end of buffer not reached ' + JSON.stringify(WH).slice(0, 100));
                            }
                        }
                        return WH;
                    } catch (WV) {
                        throw O7 && O7.restoreStructures && ON(), YK(), (WV instanceof RangeError || WV.message.startsWith('Unexpected end of buffer') || O5 > O4) && (WV.incomplete = true), WV;
                    }
                }
                function ON() {
                    ;
                    for (let WE in O7.restoreStructures)
                        O7[WE] = O7.restoreStructures[WE];
                    O7.restoreStructures = null;
                }
                function OW() {
                    ;
                    let WE = O3[O5++];
                    if (WE < 160) {
                        if (WE < 128) {
                            if (WE < 64) {
                                return WE;
                            }
                            {
                                let WH = O7[63 & WE] || OK.getStructures && OG()[63 & WE];
                                return WH ? (WH.read || (WH.read = OQ(WH, 63 & WE)), WH.read()) : WE;
                            }
                        }
                        if (WE < 144) {
                            if (WE -= 128, OK.mapsAsObjects) {
                                let WZ = { WT: OW() };
                                for (let WV = 0; WV < WE; WV++) {
                                    let WT = Y9();
                                    '__proto__' === WT && (WT = '__proto_');
                                    ;
                                }
                                return WZ;
                            }
                            {
                                let Wj = new Map();
                                for (let WJ = 0; WJ < WE; WJ++) {
                                    Wj.set(OW(), OW());
                                }
                                return Wj;
                            }
                        }
                        {
                            WE -= 144;
                            let WR = new Array(WE);
                            for (let WL = 0; WL < WE; WL++) {
                                WR[WL] = OW();
                            }
                            return OK.freezeData ? Object.freeze(WR) : WR;
                        }
                    }
                    if (WE < 192) {
                        let WA = WE - 160;
                        if (OE >= O5) {
                            return O8.slice(O5 - OC, (O5 += WA) - OC);
                        }
                        if (0 == OE && O4 < 140) {
                            let WI = WA < 16 ? Y4(WA) : Y3(WA);
                            if (null != WI) {
                                return WI;
                            }
                        }
                        return Oz(WA);
                    }
                    {
                        let WP;
                        switch (WE) {
                        case 192:
                            return null;
                        case 193:
                            return O9 ? (WP = OW(), WP > 0 ? O9[1].slice(O9.position1, O9.position1 += WP) : O9[0].slice(O9.position0, O9.position0 -= WP)) : OT;
                        case 194:
                            return false;
                        case 195:
                            return true;
                        case 196:
                            if (WP = O3[O5++], void 0 === WP) {
                                throw new Error('Unexpected end of buffer');
                            }
                            return Y6(WP);
                        case 197:
                            return WP = OY.getUint16(O5), O5 += 2, Y6(WP);
                        case 198:
                            return WP = OY.getUint32(O5), O5 += 4, Y6(WP);
                        case 199:
                            return Y7(O3[O5++]);
                        case 200:
                            return WP = OY.getUint16(O5), O5 += 2, Y7(WP);
                        case 201:
                            return WP = OY.getUint32(O5), O5 += 4, Y7(WP);
                        case 202:
                            if (WP = OY.getFloat32(O5), OK.useFloat32 > 2) {
                                let WN = YC[(127 & O3[O5]) << 1 | O3[O5 + 1] >> 7];
                                return O5 += 4, (WN * WP + (WP > 0 ? 0.5 : -0.5) >> 0) / WN;
                            }
                            return O5 += 4, WP;
                        case 203:
                            return WP = OY.getFloat64(O5), O5 += 8, WP;
                        case 204:
                            return O3[O5++];
                        case 205:
                            return WP = OY.getUint16(O5), O5 += 2, WP;
                        case 206:
                            return WP = OY.getUint32(O5), O5 += 4, WP;
                        case 207:
                            return 'number' === OK.int64AsType ? (WP = 4294967296 * OY.getUint32(O5), WP += OY.getUint32(O5 + 4)) : WP = 'string' === OK.int64AsType ? OY.getBigUint64(O5).toString() : OY.getBigUint64(O5), O5 += 8, WP;
                        case 208:
                            return OY.getInt8(O5++);
                        case 209:
                            return WP = OY.getInt16(O5), O5 += 2, WP;
                        case 210:
                            return WP = OY.getInt32(O5), O5 += 4, WP;
                        case 211:
                            return 'number' === OK.int64AsType ? (WP = 4294967296 * OY.getInt32(O5), WP += OY.getUint32(O5 + 4)) : WP = 'string' === OK.int64AsType ? OY.getBigInt64(O5).toString() : OY.getBigInt64(O5), O5 += 8, WP;
                        case 212:
                            if (WP = O3[O5++], 114 == WP) {
                                return YO(63 & O3[O5++]);
                            }
                            {
                                let WW = OH[WP];
                                if (WW) {
                                    return WW.read ? (O5++, WW.read(OW())) : WW.noBuffer ? (O5++, WW()) : WW(O3.subarray(O5, ++O5));
                                }
                                throw new Error('Unknown extension ' + WP);
                            }
                        case 213:
                            return WP = O3[O5], 114 == WP ? (O5++, YO(63 & O3[O5++], O3[O5++])) : Y7(2);
                        case 214:
                            return Y7(4);
                        case 215:
                            return Y7(8);
                        case 216:
                            return Y7(16);
                        case 217:
                            return WP = O3[O5++], OE >= O5 ? O8.slice(O5 - OC, (O5 += WP) - OC) : OF(WP);
                        case 218:
                            return WP = OY.getUint16(O5), OE >= (O5 += 2) ? O8.slice(O5 - OC, (O5 += WP) - OC) : Oq(WP);
                        case 219:
                            return WP = OY.getUint32(O5), OE >= (O5 += 4) ? O8.slice(O5 - OC, (O5 += WP) - OC) : OU(WP);
                        case 220:
                            return WP = OY.getUint16(O5), O5 += 2, Y0(WP);
                        case 221:
                            return WP = OY.getUint32(O5), O5 += 4, Y0(WP);
                        case 222:
                            return WP = OY.getUint16(O5), O5 += 2, Y1(WP);
                        case 223:
                            return WP = OY.getUint32(O5), O5 += 4, Y1(WP);
                        default:
                            if (WE >= 224) {
                                return WE - 256;
                            }
                            if (void 0 === WE) {
                                let WD = new Error('Unexpected end of MessagePack data');
                                throw WD.incomplete = true, WD;
                            }
                            throw new Error('Unknown MessagePack token ' + WE);
                        }
                    }
                }
                ;
                function OQ(WE, WH) {
                    ;
                    function WZ() {
                        ;
                        if (WZ.count++ > OA) {
                            let WT = WE.read = new Function('r', 'return function(){return ' + (OK.freezeData ? 'Object.freeze' : '') + '({' + WE.map(Wj => '__proto__' === Wj ? '__proto_:r()' : /^[a-zA-Z_$][a-zA-Z\d_$]*$/.test(Wj) ? Wj + ':r()' : '[' + JSON.stringify(Wj) + ']:r()').join(',') + '})}')(OW);
                            return 0 === WE.highByte && (WE.read = OX(WH, WE.read)), WT();
                        }
                        let WV = { WR: OW() };
                        for (let Wj = 0, WJ = WE.length; Wj < WJ; Wj++) {
                            let WR = WE[Wj];
                            '__proto__' === WR && (WR = '__proto_');
                            ;
                        }
                        return OK.freezeData ? Object.freeze(WV) : WV;
                    }
                    return WZ.count = 0, 0 === WE.highByte ? OX(WH, WZ) : WZ;
                }
                const OX = (WE, WH) => function () {
                    ;
                    let WZ = O3[O5++];
                    if (0 === WZ) {
                        return WH();
                    }
                    let WV = WE < 32 ? -(WE + (WZ << 5)) : WE + (WZ << 5), WT = O7[WV] || OG()[WV];
                    if (!WT) {
                        throw new Error('Record id is not defined for ' + WV);
                    }
                    return WT.read || (WT.read = OQ(WT, WE)), WT.read();
                };
                function OG() {
                    ;
                    let WE = YS(() => (O3 = null, OK.getStructures()));
                    return O7 = OK['_mergeStructures'](WE, O7);
                }
                var Oz = OB, OF = OB, Oq = OB, OU = OB;
                function OB(WE) {
                    ;
                    let WH;
                    if (WE < 16 && (WH = Y4(WE))) {
                        return WH;
                    }
                    if (WE > 64 && O2) {
                        return O2.decode(O3.subarray(O5, O5 += WE));
                    }
                    const WZ = O5 + WE, WV = [];
                    for (WH = ''; O5 < WZ;) {
                        const WT = O3[O5++];
                        if (0 == (128 & WT)) {
                            WV.push(WT);
                        } else {
                            if (192 == (224 & WT)) {
                                const Wj = 63 & O3[O5++];
                                WV.push((31 & WT) << 6 | Wj);
                            } else {
                                if (224 == (240 & WT)) {
                                    const WJ = 63 & O3[O5++], WR = 63 & O3[O5++];
                                    WV.push((31 & WT) << 12 | WJ << 6 | WR);
                                } else {
                                    if (240 == (248 & WT)) {
                                        let WL = (7 & WT) << 18 | (63 & O3[O5++]) << 12 | (63 & O3[O5++]) << 6 | 63 & O3[O5++];
                                        if (WL > 65535) {
                                            WL -= 65536;
                                            WV.push(WL >>> 10 & 1023 | 55296);
                                            WL = 56320 | 1023 & WL;
                                        }
                                        WV.push(WL);
                                    } else {
                                        WV.push(WT);
                                    }
                                }
                            }
                        }
                        if (WV.length >= 4096) {
                            WH += Y2.apply(String, WV);
                            WV.length = 0;
                        }
                    }
                    return WV.length > 0 && (WH += Y2.apply(String, WV)), WH;
                }
                function Y0(WE) {
                    ;
                    let WH = new Array(WE);
                    for (let WZ = 0; WZ < WE; WZ++) {
                        WH[WZ] = OW();
                    }
                    return OK.freezeData ? Object.freeze(WH) : WH;
                }
                function Y1(WE) {
                    ;
                    if (OK.mapsAsObjects) {
                        let WH = { WV: OW() };
                        for (let WZ = 0; WZ < WE; WZ++) {
                            let WV = Y9();
                            '__proto__' === WV && (WV = '__proto_');
                            ;
                        }
                        return WH;
                    }
                    {
                        let WT = new Map();
                        for (let Wj = 0; Wj < WE; Wj++) {
                            WT.set(OW(), OW());
                        }
                        return WT;
                    }
                }
                var Y2 = String.fromCharCode;
                function Y3(WE) {
                    let WH = O5, WZ = new Array(WE);
                    for (let WV = 0; WV < WE; WV++) {
                        const WT = O3[O5++];
                        if ((128 & WT) > 0) {
                            return void (O5 = WH);
                        }
                        WZ[WV] = WT;
                    }
                    return Y2.apply(String, WZ);
                }
                function Y4(WE) {
                    if (WE < 4) {
                        if (WE < 2) {
                            if (0 === WE) {
                                return '';
                            }
                            {
                                let WH = O3[O5++];
                                return (128 & WH) > 1 ? void (O5 -= 1) : Y2(WH);
                            }
                        }
                        {
                            let WZ = O3[O5++], WV = O3[O5++];
                            if ((128 & WZ) > 0 || (128 & WV) > 0) {
                                return void (O5 -= 2);
                            }
                            if (WE < 3) {
                                return Y2(WZ, WV);
                            }
                            let WT = O3[O5++];
                            return (128 & WT) > 0 ? void (O5 -= 3) : Y2(WZ, WV, WT);
                        }
                    }
                    {
                        let Wj = O3[O5++], WJ = O3[O5++], WR = O3[O5++], WL = O3[O5++];
                        if ((128 & Wj) > 0 || (128 & WJ) > 0 || (128 & WR) > 0 || (128 & WL) > 0) {
                            return void (O5 -= 4);
                        }
                        if (WE < 6) {
                            if (4 === WE) {
                                return Y2(Wj, WJ, WR, WL);
                            }
                            {
                                let WA = O3[O5++];
                                return (128 & WA) > 0 ? void (O5 -= 5) : Y2(Wj, WJ, WR, WL, WA);
                            }
                        }
                        if (WE < 8) {
                            let WI = O3[O5++], WP = O3[O5++];
                            if ((128 & WI) > 0 || (128 & WP) > 0) {
                                return void (O5 -= 6);
                            }
                            if (WE < 7) {
                                return Y2(Wj, WJ, WR, WL, WI, WP);
                            }
                            let WN = O3[O5++];
                            return (128 & WN) > 0 ? void (O5 -= 7) : Y2(Wj, WJ, WR, WL, WI, WP, WN);
                        }
                        {
                            let WW = O3[O5++], WD = O3[O5++], WQ = O3[O5++], Wk = O3[O5++];
                            if ((128 & WW) > 0 || (128 & WD) > 0 || (128 & WQ) > 0 || (128 & Wk) > 0) {
                                return void (O5 -= 8);
                            }
                            if (WE < 10) {
                                if (8 === WE) {
                                    return Y2(Wj, WJ, WR, WL, WW, WD, WQ, Wk);
                                }
                                {
                                    let WX = O3[O5++];
                                    return (128 & WX) > 0 ? void (O5 -= 9) : Y2(Wj, WJ, WR, WL, WW, WD, WQ, Wk, WX);
                                }
                            }
                            if (WE < 12) {
                                let WG = O3[O5++], Wz = O3[O5++];
                                if ((128 & WG) > 0 || (128 & Wz) > 0) {
                                    return void (O5 -= 10);
                                }
                                if (WE < 11) {
                                    return Y2(Wj, WJ, WR, WL, WW, WD, WQ, Wk, WG, Wz);
                                }
                                let WF = O3[O5++];
                                return (128 & WF) > 0 ? void (O5 -= 11) : Y2(Wj, WJ, WR, WL, WW, WD, WQ, Wk, WG, Wz, WF);
                            }
                            {
                                let Wq = O3[O5++], WU = O3[O5++], WB = O3[O5++], d0 = O3[O5++];
                                if ((128 & Wq) > 0 || (128 & WU) > 0 || (128 & WB) > 0 || (128 & d0) > 0) {
                                    return void (O5 -= 12);
                                }
                                if (WE < 14) {
                                    if (12 === WE) {
                                        return Y2(Wj, WJ, WR, WL, WW, WD, WQ, Wk, Wq, WU, WB, d0);
                                    }
                                    {
                                        let d1 = O3[O5++];
                                        return (128 & d1) > 0 ? void (O5 -= 13) : Y2(Wj, WJ, WR, WL, WW, WD, WQ, Wk, Wq, WU, WB, d0, d1);
                                    }
                                }
                                {
                                    let d2 = O3[O5++], d3 = O3[O5++];
                                    if ((128 & d2) > 0 || (128 & d3) > 0) {
                                        return void (O5 -= 14);
                                    }
                                    if (WE < 15) {
                                        return Y2(Wj, WJ, WR, WL, WW, WD, WQ, Wk, Wq, WU, WB, d0, d2, d3);
                                    }
                                    let d4 = O3[O5++];
                                    return (128 & d4) > 0 ? void (O5 -= 15) : Y2(Wj, WJ, WR, WL, WW, WD, WQ, Wk, Wq, WU, WB, d0, d2, d3, d4);
                                }
                            }
                        }
                    }
                }
                function Y5() {
                    ;
                    let WE, WH = O3[O5++];
                    if (WH < 192) {
                        WE = WH - 160;
                    } else {
                        switch (WH) {
                        case 217:
                            WE = O3[O5++];
                            break;
                        case 218:
                            WE = OY.getUint16(O5), O5 += 2;
                            break;
                        case 219:
                            WE = OY.getUint32(O5), O5 += 4;
                            break;
                        default:
                            throw new Error('Expected string');
                        }
                    }
                    return OB(WE);
                }
                function Y6(WE) {
                    ;
                    return OK.copyBuffers ? Uint8Array.prototype.slice.call(O3, O5, O5 += WE) : O3.subarray(O5, O5 += WE);
                }
                function Y7(WE) {
                    ;
                    let WH = O3[O5++];
                    if (OH[WH]) {
                        let WZ;
                        return OH[WH](O3.subarray(O5, WZ = O5 += WE), WV => {
                            O5 = WV;
                            try {
                                return OW();
                            } finally {
                                O5 = WZ;
                            }
                        });
                    }
                    throw new Error('Unknown extension type ' + WH);
                }
                var Y8 = new Array(4096);
                function Y9() {
                    ;
                    let WE = O3[O5++];
                    if (!(WE >= 160 && WE < 192)) {
                        return O5--, OW().toString();
                    }
                    if (WE -= 160, OE >= O5) {
                        return O8.slice(O5 - OC, (O5 += WE) - OC);
                    }
                    if (!(0 == OE && O4 < 180)) {
                        return Oz(WE);
                    }
                    let WH, WZ = 4095 & (WE << 5 ^ (WE > 1 ? OY.getUint16(O5) : WE > 0 ? O3[O5] : 0)), WV = Y8[WZ], WT = O5, Wj = O5 + WE - 3, WJ = 0;
                    if (WV && WV.bytes == WE) {
                        for (; WT < Wj;) {
                            if (WH = OY.getUint32(WT), WH != WV[WJ++]) {
                                WT = 1879048192;
                                break;
                            }
                            WT += 4;
                        }
                        for (Wj += 3; WT < Wj;) {
                            if (WH = O3[WT++], WH != WV[WJ++]) {
                                WT = 1879048192;
                                break;
                            }
                        }
                        if (WT === Wj) {
                            return O5 = WT, WV.string;
                        }
                        Wj -= 3;
                        WT = O5;
                    }
                    for (WV = [], Y8[WZ] = WV, WV.bytes = WE; WT < Wj;) {
                        WH = OY.getUint32(WT);
                        WV.push(WH);
                        WT += 4;
                    }
                    for (Wj += 3; WT < Wj;) {
                        WH = O3[WT++];
                        WV.push(WH);
                    }
                    let WR = WE < 16 ? Y4(WE) : Y3(WE);
                    return WV.string = null != WR ? WR : Oz(WE);
                }
                const YO = (WE, WH) => {
                    ;
                    let WZ = OW().map(Wj => Wj.toString()), WV = WE;
                    if (void 0 !== WH) {
                        WE = WE < 32 ? -((WH << 5) + WE) : (WH << 5) + WE;
                        WZ.highByte = WH;
                    }
                    let WT = O7[WE];
                    return WT && WT.isShared && ((O7.restoreStructures || (O7.restoreStructures = []))[WE] = WT), O7[WE] = WZ, WZ.read = OQ(WZ, WV), WZ.read();
                };
                OH[0] = () => {
                };
                OH[0].noBuffer = true;
                OH[101] = () => {
                    let WE = OW();
                    return (globalThis[WE[0]] || Error)(WE[1]);
                };
                OH[105] = WE => {
                    ;
                    let WH = OY.getUint32(O5 - 4);
                    OO || (OO = new Map());
                    let WZ, WV = O3[O5];
                    WZ = WV >= 144 && WV < 160 || 220 == WV || 221 == WV ? [] : {};
                    let WT = { 'target': WZ };
                    OO.set(WH, WT);
                    let Wj = OW();
                    return WT.used ? Object.assign(WZ, Wj) : (WT.target = Wj, Wj);
                };
                OH[112] = WE => {
                    ;
                    let WH = OY.getUint32(O5 - 4), WZ = OO.get(WH);
                    return WZ.used = true, WZ.target;
                };
                OH[115] = () => new Set(OW());
                const YY = [
                    'Int8',
                    'Uint8',
                    'Uint8Clamped',
                    'Int16',
                    'Uint16',
                    'Int32',
                    'Uint32',
                    'Float32',
                    'Float64',
                    'BigInt64',
                    'BigUint64'
                ].map(WE => WE + 'Array');
                OH[116] = WE => {
                    ;
                    let WH = WE[0], WZ = YY[WH];
                    if (!WZ) {
                        throw new Error('Could not find typed array for code ' + WH);
                    }
                    return new globalThis[WZ](Uint8Array.prototype.slice.call(WE, 1).buffer);
                };
                OH[120] = () => {
                    let WE = OW();
                    return new RegExp(WE[0], WE[1]);
                };
                const YM = [];
                function YS(WE) {
                    ;
                    OR && OR();
                    let WH = O4, WZ = O5, WV = OS, WT = OC, Wj = OE, WJ = O8, WR = OM, WL = OO, WA = O9, WI = new Uint8Array(O3.slice(0, O4)), WP = O7, WN = O7.slice(0, O7.length), WW = OK, WD = OL, WQ = WE();
                    return O4 = WH, O5 = WZ, OS = WV, OC = WT, OE = Wj, O8 = WJ, OM = WR, OO = WL, O9 = WA, O3 = WI, OL = WD, (O7 = WP).splice(0, O7.length, ...WN), OK = WW, OY = new DataView(O3.buffer, O3.byteOffset, O3.byteLength), WQ;
                }
                function YK() {
                    O3 = null;
                    OO = null;
                    O7 = null;
                }
                OH[98] = WE => {
                    ;
                    let WH = (WE[0] << 24) + (WE[1] << 16) + (WE[2] << 8) + WE[3], WZ = O5;
                    return O5 += WH - WE.length, O9 = YM, (O9 = [
                        Y5(),
                        Y5()
                    ]).position0 = 0, O9.position1 = 0, O9.postBundlePosition = O5, O5 = WZ, OW();
                };
                OH[255] = WE => 4 == WE.length ? new Date(1000 * (16777216 * WE[0] + (WE[1] << 16) + (WE[2] << 8) + WE[3])) : 8 == WE.length ? new Date(((WE[0] << 22) + (WE[1] << 14) + (WE[2] << 6) + (WE[3] >> 2)) / 1000000 + 1000 * (4294967296 * (3 & WE[3]) + 16777216 * WE[4] + (WE[5] << 16) + (WE[6] << 8) + WE[7])) : 12 == WE.length ? new Date(((WE[0] << 24) + (WE[1] << 16) + (WE[2] << 8) + WE[3]) / 1000000 + 1000 * ((128 & WE[4] ? -281474976710656 : 0) + 1099511627776 * WE[6] + 4294967296 * WE[7] + 16777216 * WE[8] + (WE[9] << 16) + (WE[10] << 8) + WE[11])) : new Date('invalid');
                const YC = new Array(147);
                for (let WE = 0; WE < 256; WE++) {
                    YC[WE] = +('1e' + Math.floor(45.15 - 0.30103 * WE));
                }
                var YE = new OI({ 'useRecords': false });
                YE.unpack;
                YE.unpackMultiple;
                YE.unpack;
                let YH, YZ, YV, YT = new Float32Array(1);
                new Uint8Array(YT.buffer, 0, 4);
                try {
                    YH = new TextEncoder();
                } catch (WH) {
                }
                const Yj = 'undefined' != typeof Buffer, YJ = Yj ? function (WZ) {
                        ;
                        return Buffer.allocUnsafeSlow(WZ);
                    } : Uint8Array, YR = Yj ? Buffer : Uint8Array, YL = Yj ? 4294967296 : 2144337920;
                let YA, YI, YP, YN, YW, YD = 0, YQ = null;
                const YX = Symbol('record-id');
                class YG extends OI {
                    constructor(WZ) {
                        ;
                        let WV, WT, Wj, WJ;
                        super(WZ);
                        this.offset = 0;
                        let WR = YR.prototype.utf8Write ? function (d2, d3) {
                                ;
                                return YA.utf8Write(d2, d3, 4294967295);
                            } : !(!YH || !YH.encodeInto) && function (d2, d3) {
                                ;
                                return YH.encodeInto(d2, YA.subarray(d3)).written;
                            }, WL = this;
                        WZ || (WZ = {});
                        let WA = WZ && WZ.sequential, WI = WZ.structures || WZ.saveStructures, WP = WZ.maxSharedStructures;
                        if (null == WP && (WP = WI ? 32 : 0), WP > 8160) {
                            throw new Error('Maximum maxSharedStructure is 8160');
                        }
                        WZ.structuredClone && null == WZ.moreTypes && (WZ.moreTypes = true);
                        let WN = WZ.maxOwnStructures;
                        null == WN && (WN = WI ? 32 : 64);
                        this.structures || 0 == WZ.useRecords || (this.structures = []);
                        let WW = WP > 32 || WN + WP > 64, WD = WP + 64, WQ = WP + WN + 64;
                        if (WQ > 8256) {
                            throw new Error('Maximum maxSharedStructure + maxOwnStructure is 8192');
                        }
                        let Wk = [], WX = 0, WG = 0;
                        this.pack = this.encode = function (d2, d3) {
                            ;
                            if (YA || (YA = new YJ(8192), YP = YA.dataView || (YA.dataView = new DataView(YA.buffer, 0, 8192)), YD = 0), YN = YA.length - 10, YN - YD < 2048 ? (YA = new YJ(YA.length), YP = YA.dataView || (YA.dataView = new DataView(YA.buffer, 0, YA.length)), YN = YA.length - 10, YD = 0) : YD = YD + 7 & 2147483640, WV = YD, WJ = WL.structuredClone ? new Map() : null, WL.bundleStrings && 'string' != typeof d2 ? (YQ = [], YQ.size = 1e+400) : YQ = null, Wj = WL.structures, Wj) {
                                Wj.uninitialized && (Wj = WL['_mergeStructures'](WL.getStructures()));
                                let d4 = Wj.sharedLength || 0;
                                if (d4 > WP) {
                                    throw new Error('Shared structures is larger than maximum shared structures, try increasing maxSharedStructures to ' + Wj.sharedLength);
                                }
                                if (!Wj.transitions) {
                                    Wj.transitions = Object.create(null);
                                    for (let d5 = 0; d5 < d4; d5++) {
                                        let d6 = Wj[d5];
                                        if (!d6) {
                                            continue;
                                        }
                                        let d7, d8 = Wj.transitions;
                                        for (let d9 = 0, dO = d6.length; d9 < dO; d9++) {
                                            let dY = d6[d9];
                                            d7 = d8[dY];
                                            d7 || (d7 = d8[dY] = Object.create(null));
                                            d8 = d7;
                                        }
                                        d8[YX] = d5 + 64;
                                    }
                                    this.lastNamedStructuresLength = d4;
                                }
                                WA || (Wj.nextId = d4 + 64);
                            }
                            WT && (WT = false);
                            try {
                                WL.randomAccessStructure && d2.constructor && d2.constructor === Object ? d1(d2) : WF(d2);
                                let dM = YQ;
                                if (YQ && YU(WV, WF, 0), WJ && WJ.idsToInsert) {
                                    let dS = WJ.idsToInsert.sort((dH, dZ) => dH.offset > dZ.offset ? 1 : -1), dK = dS.length, dC = -1;
                                    for (; dM && dK > 0;) {
                                        let dH = dS[--dK].offset + WV;
                                        dH < dM.stringsPosition + WV && -1 === dC && (dC = 0);
                                        dH > dM.position + WV ? dC >= 0 && (dC += 6) : (dC >= 0 && (YP.setUint32(dM.position + WV, YP.getUint32(dM.position + WV) + dC), dC = -1), dM = dM.previous, dK++);
                                    }
                                    dC >= 0 && dM && YP.setUint32(dM.position + WV, YP.getUint32(dM.position + WV) + dC);
                                    YD += 6 * dS.length;
                                    YD > YN && WU(YD);
                                    WL.offset = YD;
                                    let dE = function (dZ, dV) {
                                        ;
                                        let dT, dj = 6 * dV.length, dJ = dZ.length - dj;
                                        for (; dT = dV.pop();) {
                                            let dR = dT.offset, dL = dT.id;
                                            dZ.copyWithin(dR + dj, dR, dJ);
                                            dj -= 6;
                                            let dA = dR + dj;
                                            dZ[dA++] = 214;
                                            dZ[dA++] = 105;
                                            dZ[dA++] = dL >> 24;
                                            dZ[dA++] = dL >> 16 & 255;
                                            dZ[dA++] = dL >> 8 & 255;
                                            dZ[dA++] = 255 & dL;
                                            dJ = dR;
                                        }
                                        return dZ;
                                    }(YA.subarray(WV, YD), dS);
                                    return WJ = null, dE;
                                }
                                return WL.offset = YD, d3 & 512 ? (YA.start = WV, YA.end = YD, YA) : YA.subarray(WV, YD);
                            } finally {
                                if (Wj) {
                                    WG < 10 && WG++;
                                    let dZ = Wj.sharedLength || 0;
                                    if (Wj.length > dZ && (Wj.length = dZ), WX > 10000) {
                                        Wj.transitions = null;
                                        WG = 0;
                                        WX = 0;
                                        Wk.length > 0 && (Wk = []);
                                    } else {
                                        if (Wk.length > 0 && !WA) {
                                            for (let dV = 0, dT = Wk.length; dV < dT; dV++) {
                                                Wk[dV][YX] = 0;
                                            }
                                            Wk = [];
                                        }
                                    }
                                    if (WT && WL.saveStructures) {
                                        let dj = YA.subarray(WV, YD), dJ = YB(Wj, WL);
                                        return false === WL.saveStructures(dJ, dJ.isCompatible) ? WL.pack(d2) : (WL.lastNamedStructuresLength = dZ, dj);
                                    }
                                }
                                d3 & 1024 && (YD = WV);
                            }
                        };
                        const Wz = d2 => {
                                var d3 = d2.length;
                                d3 < 16 ? YA[YD++] = 144 | d3 : d3 < 65536 ? (YA[YD++] = 220, YA[YD++] = d3 >> 8, YA[YD++] = 255 & d3) : (YA[YD++] = 221, YP.setUint32(YD, d3), YD += 4);
                                for (let d4 = 0; d4 < d3; d4++) {
                                    WF(d2[d4]);
                                }
                            }, WF = d2 => {
                                ;
                                YD > YN && (YA = WU(YD));
                                var d3, d4 = typeof d2;
                                if ('string' === d4) {
                                    let d5, d6 = d2.length;
                                    if (YQ && d6 >= 4 && d6 < 4096) {
                                        if ((YQ.size += d6) > 61440) {
                                            let d9, dO, dY = (YQ[0] ? 3 * YQ[0].length + YQ[1].length : 0) + 10;
                                            YD + dY > YN && (YA = WU(YD + dY));
                                            YQ.position ? (dO = YQ, YA[YD] = 200, YD += 3, YA[YD++] = 98, d9 = YD - WV, YD += 4, YU(WV, WF, 0), YP.setUint16(d9 + WV - 3, YD - WV - d9)) : (YA[YD++] = 214, YA[YD++] = 98, d9 = YD - WV, YD += 4);
                                            YQ = [
                                                '',
                                                ''
                                            ];
                                            YQ.previous = dO;
                                            YQ.size = 0;
                                            YQ.position = d9;
                                        }
                                        let d8 = /[\u0080-\uFFFF]/.test(d2);
                                        return YQ[d8 ? 0 : 1] += d2, YA[YD++] = 193, void WF(d8 ? -d6 : d6);
                                    }
                                    d5 = d6 < 32 ? 1 : d6 < 256 ? 2 : d6 < 65536 ? 3 : 5;
                                    let d7 = 3 * d6;
                                    if (YD + d7 > YN && (YA = WU(YD + d7)), d6 < 64 || !WR) {
                                        let dM, dS, dK, dC = YD + d5;
                                        for (dM = 0; dM < d6; dM++) {
                                            dS = d2.charCodeAt(dM);
                                            dS < 128 ? YA[dC++] = dS : dS < 2048 ? (YA[dC++] = dS >> 6 | 192, YA[dC++] = 63 & dS | 128) : 55296 == (64512 & dS) && 56320 == (64512 & (dK = d2.charCodeAt(dM + 1))) ? (dS = 65536 + ((1023 & dS) << 10) + (1023 & dK), dM++, YA[dC++] = dS >> 18 | 240, YA[dC++] = dS >> 12 & 63 | 128, YA[dC++] = dS >> 6 & 63 | 128, YA[dC++] = 63 & dS | 128) : (YA[dC++] = dS >> 12 | 224, YA[dC++] = dS >> 6 & 63 | 128, YA[dC++] = 63 & dS | 128);
                                        }
                                        d3 = dC - YD - d5;
                                    } else {
                                        d3 = WR(d2, YD + d5);
                                    }
                                    d3 < 32 ? YA[YD++] = 160 | d3 : d3 < 256 ? (d5 < 2 && YA.copyWithin(YD + 2, YD + 1, YD + 1 + d3), YA[YD++] = 217, YA[YD++] = d3) : d3 < 65536 ? (d5 < 3 && YA.copyWithin(YD + 3, YD + 2, YD + 2 + d3), YA[YD++] = 218, YA[YD++] = d3 >> 8, YA[YD++] = 255 & d3) : (d5 < 5 && YA.copyWithin(YD + 5, YD + 3, YD + 3 + d3), YA[YD++] = 219, YP.setUint32(YD, d3), YD += 4);
                                    YD += d3;
                                } else {
                                    if ('number' === d4) {
                                        if (d2 >>> 0 === d2) {
                                            d2 < 32 || d2 < 128 && false === this.useRecords || d2 < 64 && !this.randomAccessStructure ? YA[YD++] = d2 : d2 < 256 ? (YA[YD++] = 204, YA[YD++] = d2) : d2 < 65536 ? (YA[YD++] = 205, YA[YD++] = d2 >> 8, YA[YD++] = 255 & d2) : (YA[YD++] = 206, YP.setUint32(YD, d2), YD += 4);
                                        } else {
                                            if (d2 >> 0 === d2) {
                                                d2 >= -32 ? YA[YD++] = 256 + d2 : d2 >= -128 ? (YA[YD++] = 208, YA[YD++] = d2 + 256) : d2 >= -32768 ? (YA[YD++] = 209, YP.setInt16(YD, d2), YD += 2) : (YA[YD++] = 210, YP.setInt32(YD, d2), YD += 4);
                                            } else {
                                                let dE;
                                                if ((dE = this.useFloat32) > 0 && d2 < 4294967296 && d2 >= -2147483648) {
                                                    let dH;
                                                    if (YA[YD++] = 202, YP.setFloat32(YD, d2), dE < 4 || (dH = d2 * YC[(127 & YA[YD]) << 1 | YA[YD + 1] >> 7]) >> 0 === dH) {
                                                        return void (YD += 4);
                                                    }
                                                    YD--;
                                                }
                                                YA[YD++] = 203;
                                                YP.setFloat64(YD, d2);
                                                YD += 8;
                                            }
                                        }
                                    } else {
                                        if ('object' === d4) {
                                            if (d2) {
                                                if (WJ) {
                                                    let dV = WJ.get(d2);
                                                    if (dV) {
                                                        if (!dV.id) {
                                                            let dT = WJ.idsToInsert || (WJ.idsToInsert = []);
                                                            dV.id = dT.push(dV);
                                                        }
                                                        return YA[YD++] = 214, YA[YD++] = 112, YP.setUint32(YD, dV.id), void (YD += 4);
                                                    }
                                                    WJ.set(d2, { 'offset': YD - WV });
                                                }
                                                let dZ = d2.constructor;
                                                if (dZ === Object) {
                                                    Wq(d2, true);
                                                } else {
                                                    if (dZ === Array) {
                                                        Wz(d2);
                                                    } else {
                                                        if (dZ === Map) {
                                                            (d3 = d2.size) < 16 ? YA[YD++] = 128 | d3 : d3 < 65536 ? (YA[YD++] = 222, YA[YD++] = d3 >> 8, YA[YD++] = 255 & d3) : (YA[YD++] = 223, YP.setUint32(YD, d3), YD += 4);
                                                            for (let [dj, dJ] of d2)
                                                                WF(dj), WF(dJ);
                                                        } else {
                                                            for (let dR = 0, dL = YZ.length; dR < dL; dR++) {
                                                                if (d2 instanceof YV[dR]) {
                                                                    let dA = YZ[dR];
                                                                    if (dA.write) {
                                                                        dA.type && (YA[YD++] = 212, YA[YD++] = dA.type, YA[YD++] = 0);
                                                                        let dD = dA.write.call(this, d2);
                                                                        return void (dD === d2 ? Array.isArray(d2) ? Wz(d2) : Wq(d2) : WF(dD));
                                                                    }
                                                                    let dI, dP = YA, dN = YP, dW = YD;
                                                                    YA = null;
                                                                    try {
                                                                        dI = dA.pack.call(this, d2, dQ => (YA = dP, dP = null, YD += dQ, YD > YN && WU(YD), {
                                                                            'target': YA,
                                                                            'targetView': YP,
                                                                            'position': YD - dQ
                                                                        }), WF);
                                                                    } finally {
                                                                        dP && (YA = dP, YP = dN, YD = dW, YN = YA.length - 10);
                                                                    }
                                                                    return void (dI && (dI.length + YD > YN && WU(dI.length + YD), YD = Yq(dI, YA, YD, dA.type)));
                                                                }
                                                            }
                                                            Array.isArray(d2) ? Wz(d2) : Wq(d2, !d2.hasOwnProperty);
                                                        }
                                                    }
                                                }
                                            } else {
                                                YA[YD++] = 192;
                                            }
                                        } else {
                                            if ('boolean' === d4) {
                                                YA[YD++] = d2 ? 195 : 194;
                                            } else {
                                                if ('bigint' === d4) {
                                                    if (d2 < BigInt(1) << BigInt(63) && d2 >= -(BigInt(1) << BigInt(63))) {
                                                        YA[YD++] = 211;
                                                        YP.setBigInt64(YD, d2);
                                                    } else {
                                                        if (d2 < BigInt(1) << BigInt(64) && d2 > 0) {
                                                            YA[YD++] = 207;
                                                            YP.setBigUint64(YD, d2);
                                                        } else {
                                                            if (!this.largeBigIntToFloat) {
                                                                throw new RangeError(d2 + ' was too large to fit in MessagePack 64-bit integer format, set largeBigIntToFloat to convert to float-64');
                                                            }
                                                            YA[YD++] = 203;
                                                            YP.setFloat64(YD, Number(d2));
                                                        }
                                                    }
                                                    YD += 8;
                                                } else {
                                                    if ('undefined' === d4) {
                                                        this.encodeUndefinedAsNil ? YA[YD++] = 192 : (YA[YD++] = 212, YA[YD++] = 0, YA[YD++] = 0);
                                                    } else {
                                                        if ('function' !== d4) {
                                                            throw new Error('Unknown type: ' + d4);
                                                        }
                                                        WF(this.writeFunction && this.writeFunction());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }, Wq = false === this.useRecords ? this.variableMapSize ? d2 => {
                                ;
                                let d3, d4 = Object.keys(d2), d5 = d4.length;
                                d5 < 16 ? YA[YD++] = 128 | d5 : d5 < 65536 ? (YA[YD++] = 222, YA[YD++] = d5 >> 8, YA[YD++] = 255 & d5) : (YA[YD++] = 223, YP.setUint32(YD, d5), YD += 4);
                                for (let d6 = 0; d6 < d5; d6++) {
                                    WF(d3 = d4[d6]);
                                    WF(d2[d3]);
                                }
                            } : (d2, d3) => {
                                ;
                                YA[YD++] = 222;
                                let d4 = YD - WV;
                                YD += 2;
                                let d5 = 0;
                                for (let d6 in d2)
                                    (d3 || d2.hasOwnProperty(d6)) && (WF(d6), WF(d2[d6]), d5++);
                                YA[d4++ + WV] = d5 >> 8;
                                YA[d4 + WV] = 255 & d5;
                            } : WZ.progressiveRecords && !WW ? (d2, d3) => {
                                ;
                                let d4, d5, d6 = Wj.transitions || (Wj.transitions = Object.create(null)), d7 = YD++ - WV;
                                for (let d8 in d2)
                                    if (d3 || d2.hasOwnProperty(d8)) {
                                        if (d4 = d6[d8], d4) {
                                            d6 = d4;
                                        } else {
                                            let d9 = Object.keys(d2), dO = d6;
                                            d6 = Wj.transitions;
                                            let dY = 0;
                                            for (let dM = 0, dS = d9.length; dM < dS; dM++) {
                                                let dK = d9[dM];
                                                d4 = d6[dK];
                                                d4 || (d4 = d6[dK] = Object.create(null), dY++);
                                                d6 = d4;
                                            }
                                            d7 + WV + 1 == YD ? (YD--, WB(d6, d9, dY)) : d0(d6, d9, d7, dY);
                                            d5 = true;
                                            d6 = dO[d8];
                                        }
                                        WF(d2[d8]);
                                    }
                                if (!d5) {
                                    let dC = d6[YX];
                                    dC ? YA[d7 + WV] = dC : d0(d6, Object.keys(d2), d7, 0);
                                }
                            } : (d2, d3) => {
                                ;
                                let d4, d5 = Wj.transitions || (Wj.transitions = Object.create(null)), d6 = 0;
                                for (let d8 in d2)
                                    (d3 || d2.hasOwnProperty(d8)) && (d4 = d5[d8], d4 || (d4 = d5[d8] = Object.create(null), d6++), d5 = d4);
                                let d7 = d5[YX];
                                d7 ? d7 >= 96 && WW ? (YA[YD++] = 96 + (31 & (d7 -= 96)), YA[YD++] = d7 >> 5) : YA[YD++] = d7 : WB(d5, d5['__keys__'] || Object.keys(d2), d6);
                                for (let d9 in d2)
                                    (d3 || d2.hasOwnProperty(d9)) && WF(d2[d9]);
                            }, WU = d2 => {
                                ;
                                let d3;
                                if (d2 > 16777216) {
                                    if (d2 - WV > YL) {
                                        throw new Error('Packed buffer would be larger than maximum buffer size');
                                    }
                                    d3 = Math.min(YL, 4096 * Math.round(Math.max((d2 - WV) * (d2 > 67108864 ? 1.25 : 2), 4194304) / 4096));
                                } else {
                                    d3 = 1 + (Math.max(d2 - WV << 2, YA.length - 1) >> 12) << 12;
                                }
                                let d4 = new YJ(d3);
                                return YP = d4.dataView || (d4.dataView = new DataView(d4.buffer, 0, d3)), d2 = Math.min(d2, YA.length), YA.copy ? YA.copy(d4, 0, WV, d2) : d4.set(YA.slice(WV, d2)), YD -= WV, WV = 0, YN = d4.length - 10, YA = d4;
                            }, WB = (d2, d3, d4) => {
                                ;
                                let d5 = Wj.nextId;
                                d5 || (d5 = 64);
                                d5 < WD && this.shouldShareStructure && !this.shouldShareStructure(d3) ? (d5 = Wj.nextOwnId, d5 < WQ || (d5 = WD), Wj.nextOwnId = d5 + 1) : (d5 >= WQ && (d5 = WD), Wj.nextId = d5 + 1);
                                let d6 = d3.highByte = d5 >= 96 && WW ? d5 - 96 >> 5 : -1;
                                d2[YX] = d5;
                                d2['__keys__'] = d3;
                                Wj[d5 - 64] = d3;
                                d5 < WD ? (d3.isShared = true, Wj.sharedLength = d5 - 63, WT = true, d6 >= 0 ? (YA[YD++] = 96 + (31 & d5), YA[YD++] = d6) : YA[YD++] = d5) : (d6 >= 0 ? (YA[YD++] = 213, YA[YD++] = 114, YA[YD++] = 96 + (31 & d5), YA[YD++] = d6) : (YA[YD++] = 212, YA[YD++] = 114, YA[YD++] = d5), d4 && (WX += WG * d4), Wk.length >= WN && (Wk.shift()[YX] = 0), Wk.push(d2), WF(d3));
                            }, d0 = (d2, d3, d4, d5) => {
                                ;
                                let d6 = YA, d7 = YD, d8 = YN, d9 = WV;
                                YA = YI;
                                YD = 0;
                                WV = 0;
                                YA || (YI = YA = new YJ(8192));
                                YN = YA.length - 10;
                                WB(d2, d3, d5);
                                YI = YA;
                                let dO = YD;
                                if (YA = d6, YD = d7, YN = d8, WV = d9, dO > 1) {
                                    let dY = YD + dO - 1;
                                    dY > YN && WU(dY);
                                    let dM = d4 + WV;
                                    YA.copyWithin(dM + dO, dM + 1, YD);
                                    YA.set(YI.slice(0, dO), dM);
                                    YD = dY;
                                } else {
                                    YA[d4 + WV] = YI[0];
                                }
                            }, d1 = (d2, d3) => {
                                let d4 = YW(d2, YA, YD, Wj, WU, (d5, d6, d7) => {
                                    if (d7) {
                                        return WT = true;
                                    }
                                    if (YD = d6, WV > 0) {
                                        if (WF(d5), 0 == WV) {
                                            return {
                                                'position': YD,
                                                'targetView': YP,
                                                'target': YA
                                            };
                                        }
                                    } else {
                                        WF(d5);
                                    }
                                    return YD;
                                }, this);
                                if (0 === d4) {
                                    return Wq(d2, true);
                                }
                                YD = d4;
                            };
                    }
                    ['useBuffer'](WZ) {
                        ;
                        YA = WZ;
                        YP = new DataView(YA.buffer, YA.byteOffset, YA.byteLength);
                        YD = 0;
                    }
                    ['clearSharedData']() {
                        ;
                        this.structures && (this.structures = []);
                        this.typedStructs && (this.typedStructs = []);
                    }
                }
                function Yz(WZ, WV, WT, Wj) {
                    ;
                    let WJ = WZ.byteLength;
                    if (WJ + 1 < 256) {
                        var {
                            target: WR,
                            position: WL
                        } = WT(4 + WJ);
                        WR[WL++] = 199;
                        WR[WL++] = WJ + 1;
                    } else {
                        if (WJ + 1 < 65536) {
                            var {
                                target: WR,
                                position: WL
                            } = WT(5 + WJ);
                            WR[WL++] = 200;
                            WR[WL++] = WJ + 1 >> 8;
                            WR[WL++] = WJ + 1 & 255;
                        } else {
                            var {
                                target: WR,
                                position: WL,
                                targetView: WA
                            } = WT(7 + WJ);
                            WR[WL++] = 201;
                            WA.setUint32(WL, WJ + 1);
                            WL += 4;
                        }
                    }
                    WR[WL++] = 116;
                    WR[WL++] = WV;
                    WR.set(new Uint8Array(WZ.buffer, WZ.byteOffset, WZ.byteLength), WL);
                }
                function YF(WZ, WV) {
                    ;
                    let WT = WZ.byteLength;
                    var Wj, WJ;
                    if (WT < 256) {
                        var {
                            target: Wj,
                            position: WJ
                        } = WV(WT + 2);
                        Wj[WJ++] = 196;
                        Wj[WJ++] = WT;
                    } else {
                        if (WT < 65536) {
                            var {
                                target: Wj,
                                position: WJ
                            } = WV(WT + 3);
                            Wj[WJ++] = 197;
                            Wj[WJ++] = WT >> 8;
                            Wj[WJ++] = 255 & WT;
                        } else {
                            var {
                                target: Wj,
                                position: WJ,
                                targetView: WR
                            } = WV(WT + 5);
                            Wj[WJ++] = 198;
                            WR.setUint32(WJ, WT);
                            WJ += 4;
                        }
                    }
                    Wj.set(WZ, WJ);
                }
                function Yq(WZ, WV, WT, Wj) {
                    ;
                    let WJ = WZ.length;
                    switch (WJ) {
                    case 1:
                        WV[WT++] = 212;
                        break;
                    case 2:
                        WV[WT++] = 213;
                        break;
                    case 4:
                        WV[WT++] = 214;
                        break;
                    case 8:
                        WV[WT++] = 215;
                        break;
                    case 16:
                        WV[WT++] = 216;
                        break;
                    default:
                        WJ < 256 ? (WV[WT++] = 199, WV[WT++] = WJ) : WJ < 65536 ? (WV[WT++] = 200, WV[WT++] = WJ >> 8, WV[WT++] = 255 & WJ) : (WV[WT++] = 201, WV[WT++] = WJ >> 24, WV[WT++] = WJ >> 16 & 255, WV[WT++] = WJ >> 8 & 255, WV[WT++] = 255 & WJ);
                    }
                    return WV[WT++] = Wj, WV.set(WZ, WT), WT += WJ;
                }
                function YU(WZ, WV, WT) {
                    ;
                    if (YQ.length > 0) {
                        YP.setUint32(YQ.position + WZ, YD + WT - YQ.position - WZ);
                        YQ.stringsPosition = YD - WZ;
                        let Wj = YQ;
                        YQ = null;
                        WV(Wj[0]);
                        WV(Wj[1]);
                    }
                }
                function YB(WZ, WV) {
                    ;
                    return WZ.isCompatible = WT => {
                        ;
                        let Wj = !WT || (WV.lastNamedStructuresLength || 0) === WT.length;
                        return Wj || WV['_mergeStructures'](WT), Wj;
                    }, WZ;
                }
                YV = [
                    Date,
                    Set,
                    Error,
                    RegExp,
                    ArrayBuffer,
                    Object.getPrototypeOf(Uint8Array.prototype).constructor,
                    OV
                ];
                YZ = [
                    {
                        'pack'(WZ, WV, WT) {
                            ;
                            let Wj = WZ.getTime() / 1000;
                            if ((this.useTimestamp32 || 0 === WZ.getMilliseconds()) && Wj >= 0 && Wj < 4294967296) {
                                let {
                                    target: WJ,
                                    targetView: WR,
                                    position: WL
                                } = WV(6);
                                WJ[WL++] = 214;
                                WJ[WL++] = 255;
                                WR.setUint32(WL, Wj);
                            } else {
                                if (Wj > 0 && Wj < 4294967296) {
                                    let {
                                        target: WA,
                                        targetView: WI,
                                        position: WP
                                    } = WV(10);
                                    WA[WP++] = 215;
                                    WA[WP++] = 255;
                                    WI.setUint32(WP, 4000000 * WZ.getMilliseconds() + (Wj / 1000 / 4294967296 >> 0));
                                    WI.setUint32(WP + 4, Wj);
                                } else {
                                    if (isNaN(Wj)) {
                                        if (this.onInvalidDate) {
                                            return WV(0), WT(this.onInvalidDate());
                                        }
                                        let {
                                            target: WN,
                                            targetView: WW,
                                            position: WD
                                        } = WV(3);
                                        WN[WD++] = 212;
                                        WN[WD++] = 255;
                                        WN[WD++] = 255;
                                    } else {
                                        let {
                                            target: WQ,
                                            targetView: Wk,
                                            position: WX
                                        } = WV(15);
                                        WQ[WX++] = 199;
                                        WQ[WX++] = 12;
                                        WQ[WX++] = 255;
                                        Wk.setUint32(WX, 1000000 * WZ.getMilliseconds());
                                        Wk.setBigInt64(WX + 4, BigInt(Math.floor(Wj)));
                                    }
                                }
                            }
                        }
                    },
                    {
                        'pack'(WZ, WV, WT) {
                            ;
                            let Wj = Array.from(WZ), {
                                    target: WJ,
                                    position: WR
                                } = WV(this.moreTypes ? 3 : 0);
                            this.moreTypes && (WJ[WR++] = 212, WJ[WR++] = 115, WJ[WR++] = 0);
                            WT(Wj);
                        }
                    },
                    {
                        'pack'(WZ, WV, WT) {
                            ;
                            let {
                                target: Wj,
                                position: WJ
                            } = WV(this.moreTypes ? 3 : 0);
                            this.moreTypes && (Wj[WJ++] = 212, Wj[WJ++] = 101, Wj[WJ++] = 0);
                            WT([
                                WZ.name,
                                WZ.message
                            ]);
                        }
                    },
                    {
                        'pack'(WZ, WV, WT) {
                            ;
                            let {
                                target: Wj,
                                position: WJ
                            } = WV(this.moreTypes ? 3 : 0);
                            this.moreTypes && (Wj[WJ++] = 212, Wj[WJ++] = 120, Wj[WJ++] = 0);
                            WT([
                                WZ.source,
                                WZ.flags
                            ]);
                        }
                    },
                    {
                        'pack'(WZ, WV) {
                            ;
                            this.moreTypes ? Yz(WZ, 16, WV) : YF(Yj ? Buffer.from(WZ) : new Uint8Array(WZ), WV);
                        }
                    },
                    {
                        'pack'(WZ, WV) {
                            ;
                            let WT = WZ.constructor;
                            WT !== YR && this.moreTypes ? Yz(WZ, YY.indexOf(WT.name), WV) : YF(WZ, WV);
                        }
                    },
                    {
                        'pack'(WZ, WV) {
                            let {
                                target: WT,
                                position: Wj
                            } = WV(1);
                            WT[Wj] = 193;
                        }
                    }
                ];
                let c0 = new YG({ 'useRecords': false });
                c0.pack;
                c0.pack;
                const {
                    NEVER: c1,
                    ALWAYS: c2,
                    DECIMAL_ROUND: c3,
                    DECIMAL_FIT: c4
                } = {
                    'NEVER': 0,
                    'ALWAYS': 1,
                    'DECIMAL_ROUND': 3,
                    'DECIMAL_FIT': 4
                };
                var c7 = O1(774), c8 = {
                        'c': [
                            '#ffe46b',
                            '#fc7676',
                            '#768cfc',
                            '#fca644',
                            '#38b764',
                            '#4a66bd',
                            '#5d275d',
                            '#1a1c2c',
                            '#060011',
                            '#403645',
                            '#ededff',
                            '#000000'
                        ],
                        'd': [
                            '#F2DB78',
                            '#7E92F7',
                            '#7B097B',
                            '#C23F3F',
                            '#51D9E1'
                        ],
                        'i': {
                            1: {
                                'name': 'Welcome',
                                'description': 'Create an account.',
                                'stars': 10,
                                'rarity': 0
                            },
                            2: {
                                'name': 'Hunter',
                                'description': 'Kill another player.',
                                'stars': 15,
                                'rarity': 0
                            },
                            3: {
                                'name': 'Scavenger',
                                'description': 'Assist with the kill of a polygon while only gaining less than 10% of its score.',
                                'stars': 20,
                                'rarity': 0
                            },
                            4: {
                                'name': 'Self-Sufficient',
                                'description': 'Kill a decagon or above without another player dealing damage to it.',
                                'stars': 20,
                                'rarity': 0
                            },
                            5: {
                                'name': 'Ascended',
                                'description': 'Become a celestial and enter The Sanctuary.',
                                'stars': 30,
                                'rarity': 1
                            },
                            6: {
                                'name': 'Classic',
                                'description': 'Get from level 1 to level 45 without using a body upgrade, without killing anything that gives over 1 million score.',
                                'stars': 60,
                                'rarity': 2
                            },
                            7: {
                                'name': 'Dimensional Traveler',
                                'description': 'Enter The Crossroads.',
                                'stars': 40,
                                'rarity': 1
                            },
                            8: {
                                'name': 'Star Collector',
                                'description': 'Collect 350 stars.',
                                'stars': 45,
                                'rarity': 1,
                                'max': 350
                            },
                            9: {
                                'name': 'Monarch',
                                'description': 'Stay at the top of the leaderboard for 20 minutes in a single run. There must be at least 13 players in the server during that time. ',
                                'stars': 65,
                                'rarity': 2
                            },
                            10: {
                                'name': 'Shiny!',
                                'description': 'Find and kill a radiant polygon in a normal server.',
                                'stars': 45,
                                'rarity': 2
                            },
                            11: {
                                'name': 'Prime',
                                'description': 'Reach level 90 as a celestial and return to The Sanctuary.',
                                'stars': 45,
                                'rarity': 2
                            },
                            12: {
                                'name': 'Excursionist',
                                'description': 'Travel to every normal gamemode in a single run.',
                                'stars': 50,
                                'rarity': 2
                            },
                            13: {
                                'name': 'Defender',
                                'description': 'Kill 5 celestials.',
                                'stars': 50,
                                'rarity': 2,
                                'max': 5
                            },
                            14: {
                                'name': 'Demolitionist',
                                'description': 'Kill a tridecagon or above.',
                                'stars': 55,
                                'rarity': 2
                            },
                            15: {
                                'name': 'Star Hunter',
                                'description': 'Collect 750 stars.',
                                'stars': 65,
                                'rarity': 2,
                                'max': 750
                            },
                            16: {
                                'name': 'Titan',
                                'description': 'Reach level 75 as a normal tank.',
                                'stars': 65,
                                'rarity': 2
                            },
                            17: {
                                'name': 'Invasion',
                                'description': 'As a celestial, travel through a wormhole into a normal server with at least 5 other celestials with you.',
                                'stars': 70,
                                'rarity': 2
                            },
                            18: {
                                'name': 'Ethereal',
                                'description': 'Become a celestial 10 times.',
                                'stars': 75,
                                'rarity': 2,
                                'max': 10
                            },
                            19: {
                                'name': 'Billionaire',
                                'description': 'Gain 1 billion score in a single run.',
                                'stars': 80,
                                'rarity': 3
                            },
                            20: {
                                'name': 'Jackpot!',
                                'description': 'Find and kill a lustrous polygon.',
                                'stars': 85,
                                'rarity': 3
                            },
                            21: {
                                'name': 'Voyager',
                                'description': 'Enter The Crossroads in 20 separate runs.',
                                'stars': 90,
                                'rarity': 3,
                                'max': 20
                            },
                            22: {
                                'name': 'Galactic Guardian',
                                'description': 'Kill 20 celestials.',
                                'stars': 90,
                                'rarity': 3,
                                'max': 20
                            },
                            23: {
                                'name': 'Mine!',
                                'description': 'Kill 250 radiant polygons.',
                                'stars': 100,
                                'rarity': 3,
                                'max': 250
                            },
                            24: {
                                'name': 'Divine',
                                'description': 'Become a celestial 40 times.',
                                'stars': 110,
                                'rarity': 3,
                                'max': 40
                            },
                            25: {
                                'name': 'Star Master',
                                'description': 'Collect 1,500 stars.',
                                'stars': 135,
                                'rarity': 3,
                                'max': 1500
                            },
                            26: {
                                'name': 'Oh Node!',
                                'description': 'Get from level 1 to level 45 without using a weapon upgrade, without killing anything that gives over 1 million score.',
                                'stars': 70,
                                'rarity': 2
                            },
                            27: {
                                'name': 'Pristine',
                                'description': 'Get from level 1 to level 60 without taking any damage.',
                                'stars': 75,
                                'rarity': 2
                            },
                            28: {
                                'name': 'Trespasser',
                                'description': 'Enter The Abyss.',
                                'stars': 85,
                                'rarity': 3
                            },
                            29: {
                                'name': 'Lone Survivor',
                                'description': 'Survive alone as a celestial in 2 Teams or 4 Teams for 10 minutes. There must be at least 13 players in the server during that time.',
                                'stars': 120,
                                'rarity': 3
                            }
                        },
                        'b': [
                            'k',
                            'm',
                            'b',
                            't',
                            'qa',
                            'qi',
                            'sx',
                            'sp',
                            'oc',
                            'no',
                            'dc',
                            'ud',
                            'dd',
                            'td',
                            'qad',
                            'qid',
                            'sxd',
                            'spd',
                            'ocd',
                            'nod',
                            'vg',
                            'uvg',
                            'dvg',
                            'tvg',
                            'qavg',
                            'qivg',
                            'sxvg',
                            'spvg',
                            'ocvg',
                            'novg',
                            'tg',
                            'utg',
                            'dtg',
                            'ttg',
                            'qatg',
                            'qitg',
                            'sxtg',
                            'sptg',
                            'octg',
                            'notg',
                            'qd',
                            'uqd',
                            'dqd',
                            'tqd',
                            'qaqd',
                            'qiqd',
                            'sxqd',
                            'spqd',
                            'ocqd',
                            'noqd',
                            'qq',
                            'uqq',
                            'dqq',
                            'tqq',
                            'qaqq',
                            'qiqq',
                            'sxqq',
                            'spqq',
                            'ocqq',
                            'noqq',
                            'sg',
                            'usg',
                            'dsg',
                            'tsg',
                            'qasg',
                            'qisg',
                            'sxsg',
                            'spsg',
                            'ocsg',
                            'nosg',
                            'st',
                            'ust',
                            'dst',
                            'tst',
                            'qast',
                            'qist',
                            'sxst',
                            'spst',
                            'ocst',
                            'nost',
                            'og',
                            'uog',
                            'dog',
                            'tog',
                            'qaog',
                            'qiog',
                            'sxog',
                            'spog',
                            'ocog',
                            'noog',
                            'nm',
                            'unm',
                            'dnm',
                            'tnm',
                            'qanm',
                            'qinm',
                            'sxnm',
                            'spnm',
                            'ocnm',
                            'nonm',
                            'ct',
                            'udct'
                        ],
                        'g': {
                            0: 'Lone',
                            1: 'Polygon',
                            2: 'Celestial',
                            10: 'Blue',
                            11: 'Red',
                            12: 'Green',
                            13: 'Purple',
                            '-1': 'Fallen'
                        },
                        'l': {
                            0: '#f04f54',
                            1: '#00e06c',
                            2: '#00b0e1',
                            3: '#be7ff5',
                            4: '#fca644',
                            5: '#768cfc',
                            10: '#38b764',
                            '-4': '#ffffff',
                            '-2': '#ffffff',
                            '-1': '#ffffff'
                        },
                        'h': {
                            0: 'Free For All',
                            1: '4 Teams',
                            2: 'Tank Editor',
                            3: '2 Teams',
                            4: 'Spawn Capture',
                            5: 'Titans',
                            10: 'Private Test',
                            '-4': 'The Abyss',
                            '-2': 'The Crossroads',
                            '-1': 'The Sanctuary'
                        },
                        'a': [
                            '#00b0e1',
                            '#f04f54',
                            '#00e06c',
                            '#be7ff5'
                        ],
                        'e': [
                            [
                                'id',
                                'type',
                                'name',
                                'nameColor',
                                'team',
                                'radiant',
                                'score',
                                'sides',
                                'outerSides',
                                'outerSize',
                                'isCelestial',
                                'barrels',
                                'gadgets',
                                'layers'
                            ],
                            [
                                'id',
                                'type',
                                'name',
                                'nameColor',
                                'team',
                                'radiant',
                                'score',
                                'sides',
                                'outerSides',
                                'outerSize',
                                'color'
                            ]
                        ],
                        'f': [
                            [
                                'id',
                                'sType',
                                'x',
                                'y',
                                'd',
                                'size'
                            ],
                            [
                                'id',
                                'sType',
                                'x',
                                'y',
                                'd',
                                'size',
                                'sides',
                                'outerSides',
                                'outerSize',
                                'layers',
                                'radiant',
                                'team',
                                'name',
                                'showName',
                                'className',
                                'nameColor',
                                'maxHP',
                                'hp',
                                'score',
                                'totalScore',
                                'xpToNextLevel',
                                'level',
                                'isInvulnerable'
                            ],
                            [
                                'id',
                                'sType',
                                'x',
                                'y',
                                'd',
                                'size',
                                'sides',
                                'outerSides',
                                'outerSize',
                                'layers',
                                'radiant',
                                'team',
                                'name',
                                'showName',
                                'className',
                                'nameColor',
                                'maxHP',
                                'hp',
                                'score',
                                'totalScore',
                                'xpToNextLevel',
                                'level',
                                'isInvulnerable',
                                'barrels',
                                'barrelData',
                                'gadgets',
                                'gadgetData',
                                'isCelestial',
                                'weaponUpgrade',
                                'bodyUpgrade'
                            ],
                            [
                                'id',
                                'sType',
                                'x',
                                'y',
                                'd',
                                'size',
                                'sides',
                                'outerSides',
                                'outerSize',
                                'layers',
                                'radiant',
                                'team',
                                'name',
                                'showName',
                                'className',
                                'nameColor',
                                'maxHP',
                                'hp',
                                'score',
                                'totalScore',
                                'xpToNextLevel',
                                'level',
                                'isInvulnerable',
                                'color'
                            ],
                            [
                                'id',
                                'sType',
                                'x',
                                'y',
                                'd',
                                'size',
                                'sides',
                                'parentID',
                                'team',
                                'radiant',
                                'maxHP',
                                'hp',
                                'color'
                            ],
                            [
                                'id',
                                'sType',
                                'x',
                                'y',
                                'd',
                                'size',
                                'sides',
                                'parentID',
                                'team',
                                'radiant',
                                'maxHP',
                                'hp',
                                'color',
                                'barrels',
                                'barrelData',
                                'gadgets',
                                'gadgetData',
                                'outerSides',
                                'outerSize',
                                'layers'
                            ],
                            [
                                'id',
                                'sType',
                                'x',
                                'y',
                                'd',
                                'size',
                                'type',
                                'gridColor',
                                'backgroundColor',
                                'gridSize'
                            ],
                            [
                                'id',
                                'sType',
                                'x',
                                'y',
                                'd',
                                'size',
                                'type',
                                'sign',
                                'subtype',
                                'gamemode',
                                'lifetime'
                            ],
                            [
                                'id',
                                'sType',
                                'x',
                                'y',
                                'd',
                                'size',
                                'type',
                                'sign',
                                'lTeam',
                                'lID',
                                'lRadiant'
                            ]
                        ],
                        'k': [
                            '#768cfc',
                            '#fc7676',
                            '#38b764',
                            '#ffe46b'
                        ],
                        'j': [
                            'Max Health',
                            'Health Regeneration',
                            'Body Damage',
                            'Movement Speed'
                        ],
                        'n': [
                            'Reload',
                            'Bullet Damage',
                            'Bullet Speed',
                            'Bullet Penetration'
                        ],
                        'm': {
                            0: {
                                'open': {
                                    'color': '#000000',
                                    'screenShake': 3,
                                    'radiant': 0,
                                    'auras': [[
                                            0,
                                            1,
                                            4.5,
                                            '#ffffff'
                                        ]],
                                    'particles': [[
                                            0,
                                            1,
                                            1,
                                            1,
                                            '#ffffff',
                                            0.0025,
                                            50,
                                            0,
                                            0
                                        ]]
                                }
                            },
                            1: {
                                'open': {
                                    'color': '#000000',
                                    'screenShake': 0,
                                    'radiant': 0.3,
                                    'auras': [[
                                            0,
                                            -1,
                                            0.75,
                                            null
                                        ]],
                                    'particles': [[
                                            0,
                                            0.09999999999999999,
                                            0.19999999999999998,
                                            0.7,
                                            '#000000',
                                            0.002,
                                            50,
                                            0.7,
                                            0.3
                                        ]]
                                },
                                'closed': {
                                    'color': '#000000',
                                    'screenShake': 1.5,
                                    'radiant': 1,
                                    'auras': [[
                                            0,
                                            2.5,
                                            1.5,
                                            null
                                        ]],
                                    'particles': [[
                                            0,
                                            0.3333333333333333,
                                            0.6666666666666666,
                                            0.7,
                                            '#000000',
                                            0.002,
                                            50,
                                            10,
                                            0.3
                                        ]]
                                }
                            },
                            2: {
                                'open': {
                                    'color': '#000000',
                                    'screenShake': 0,
                                    'radiant': 0,
                                    'auras': [[
                                            0,
                                            1,
                                            4.5,
                                            '#ffffff',
                                            0.2,
                                            2
                                        ]],
                                    'arrows': [[
                                            45,
                                            30,
                                            12,
                                            6,
                                            '#ffffff',
                                            0.5,
                                            3
                                        ]],
                                    'particles': []
                                }
                            },
                            3: {
                                'open': {
                                    'color': '#000000',
                                    'screenShake': 0,
                                    'radiant': 0,
                                    'auras': [
                                        [
                                            -1,
                                            -0.3,
                                            2.5,
                                            '#000000'
                                        ],
                                        [
                                            1,
                                            -0.3,
                                            2.5,
                                            '#000000'
                                        ]
                                    ],
                                    'particles': [
                                        [
                                            -1,
                                            0.5,
                                            0.5,
                                            0.5,
                                            '#000000',
                                            0.00125,
                                            50,
                                            0,
                                            0
                                        ],
                                        [
                                            -1,
                                            -0.5,
                                            -0.5,
                                            0.5,
                                            '#000000',
                                            0.00125,
                                            50,
                                            0,
                                            0
                                        ]
                                    ],
                                    'spikes': [
                                        [
                                            60,
                                            -7,
                                            0.3,
                                            '#000000',
                                            0.2
                                        ],
                                        [
                                            40,
                                            -5,
                                            0.3,
                                            '#000000',
                                            0.2
                                        ]
                                    ]
                                },
                                'closed': {
                                    'color': '#000000',
                                    'screenShake': 3,
                                    'radiant': 0,
                                    'auras': [
                                        [
                                            -1,
                                            -0.5,
                                            2.5,
                                            '#000000'
                                        ],
                                        [
                                            1,
                                            1,
                                            4.5,
                                            '#ffffff'
                                        ]
                                    ],
                                    'particles': [
                                        [
                                            -1,
                                            1,
                                            1,
                                            1,
                                            '#ffffff',
                                            0.00125,
                                            50,
                                            0,
                                            0
                                        ],
                                        [
                                            1,
                                            0.5,
                                            0.5,
                                            0.5,
                                            '#000000',
                                            0.00125,
                                            50,
                                            0,
                                            0
                                        ]
                                    ],
                                    'spikes': [
                                        [
                                            60,
                                            -7,
                                            0.3,
                                            '#000000',
                                            -1
                                        ],
                                        [
                                            40,
                                            -5,
                                            0.3,
                                            '#000000',
                                            -1
                                        ]
                                    ]
                                }
                            }
                        }
                    }, c9 = O1(742);
                function cO(WZ) {
                    let WV = WZ.length;
                    for (; --WV >= 0;) {
                        WZ[WV] = 0;
                    }
                }
                const cC = new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        1,
                        1,
                        1,
                        2,
                        2,
                        2,
                        2,
                        3,
                        3,
                        3,
                        3,
                        4,
                        4,
                        4,
                        4,
                        5,
                        5,
                        5,
                        5,
                        0
                    ]), cE = new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5,
                        6,
                        6,
                        7,
                        7,
                        8,
                        8,
                        9,
                        9,
                        10,
                        10,
                        11,
                        11,
                        12,
                        12,
                        13,
                        13
                    ]), cH = new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        2,
                        3,
                        7
                    ]), cZ = new Uint8Array([
                        16,
                        17,
                        18,
                        0,
                        8,
                        7,
                        9,
                        6,
                        10,
                        5,
                        11,
                        4,
                        12,
                        3,
                        13,
                        2,
                        14,
                        1,
                        15
                    ]), cV = new Array(576);
                cO(cV);
                const cT = new Array(60);
                cO(cT);
                const cj = new Array(512);
                cO(cj);
                const cJ = new Array(256);
                cO(cJ);
                const cR = new Array(29);
                cO(cR);
                const cL = new Array(30);
                function cA(WZ, WV, WT, Wj, WJ) {
                    ;
                    this.static_tree = WZ;
                    this.extra_bits = WV;
                    this.extra_base = WT;
                    this.elems = Wj;
                    this.max_length = WJ;
                    this.has_stree = WZ && WZ.length;
                }
                let cI, cP, cN;
                function cW(WZ, WV) {
                    ;
                    this.dyn_tree = WZ;
                    this.max_code = 0;
                    this.stat_desc = WV;
                }
                cO(cL);
                const cD = WZ => WZ < 256 ? cj[WZ] : cj[256 + (WZ >>> 7)], cQ = (WZ, WV) => {
                        ;
                        WZ.pending_buf[WZ.pending++] = 255 & WV;
                        WZ.pending_buf[WZ.pending++] = WV >>> 8 & 255;
                    }, cX = (WZ, WV, WT) => {
                        ;
                        WZ.bi_valid > 16 - WT ? (WZ.bi_buf |= WV << WZ.bi_valid & 65535, cQ(WZ, WZ.bi_buf), WZ.bi_buf = WV >> 16 - WZ.bi_valid, WZ.bi_valid += WT - 16) : (WZ.bi_buf |= WV << WZ.bi_valid & 65535, WZ.bi_valid += WT);
                    }, cG = (WZ, WV, WT) => {
                        cX(WZ, WT[2 * WV], WT[2 * WV + 1]);
                    }, cz = (WZ, WV) => {
                        let WT = 0;
                        do {
                            WT |= 1 & WZ;
                            WZ >>>= 1;
                            WT <<= 1;
                        } while (--WV > 0);
                        return WT >>> 1;
                    }, cF = (WZ, WV, WT) => {
                        const Wj = new Array(16);
                        let WJ, WR, WL = 0;
                        for (WJ = 1; WJ <= 15; WJ++) {
                            WL = WL + WT[WJ - 1] << 1;
                            Wj[WJ] = WL;
                        }
                        for (WR = 0; WR <= WV; WR++) {
                            let WA = WZ[2 * WR + 1];
                            0 !== WA && (WZ[2 * WR] = cz(Wj[WA]++, WA));
                        }
                    }, cq = WZ => {
                        ;
                        let WV;
                        for (WV = 0; WV < 286; WV++) {
                            WZ.dyn_ltree[2 * WV] = 0;
                        }
                        for (WV = 0; WV < 30; WV++) {
                            WZ.dyn_dtree[2 * WV] = 0;
                        }
                        for (WV = 0; WV < 19; WV++) {
                            WZ.bl_tree[2 * WV] = 0;
                        }
                        WZ.dyn_ltree[512] = 1;
                        WZ.opt_len = WZ.static_len = 0;
                        WZ.sym_next = WZ.matches = 0;
                    }, cU = WZ => {
                        ;
                        WZ.bi_valid > 8 ? cQ(WZ, WZ.bi_buf) : WZ.bi_valid > 0 && (WZ.pending_buf[WZ.pending++] = WZ.bi_buf);
                        WZ.bi_buf = 0;
                        WZ.bi_valid = 0;
                    }, cB = (WZ, WV, WT, Wj) => {
                        const WJ = 2 * WV, WR = 2 * WT;
                        return WZ[WJ] < WZ[WR] || WZ[WJ] === WZ[WR] && Wj[WV] <= Wj[WT];
                    }, t0 = (WZ, WV, WT) => {
                        ;
                        const Wj = WZ.heap[WT];
                        let WJ = WT << 1;
                        for (; WJ <= WZ.heap_len && (WJ < WZ.heap_len && cB(WV, WZ.heap[WJ + 1], WZ.heap[WJ], WZ.depth) && WJ++, !cB(WV, Wj, WZ.heap[WJ], WZ.depth));) {
                            WZ.heap[WT] = WZ.heap[WJ];
                            WT = WJ;
                            WJ <<= 1;
                        }
                        WZ.heap[WT] = Wj;
                    }, t1 = (WZ, WV, WT) => {
                        ;
                        let Wj, WJ, WR, WL, WA = 0;
                        if (0 !== WZ.sym_next) {
                            do {
                                Wj = 255 & WZ.pending_buf[WZ.sym_buf + WA++];
                                Wj += (255 & WZ.pending_buf[WZ.sym_buf + WA++]) << 8;
                                WJ = WZ.pending_buf[WZ.sym_buf + WA++];
                                0 === Wj ? cG(WZ, WJ, WV) : (WR = cJ[WJ], cG(WZ, WR + 256 + 1, WV), WL = cC[WR], 0 !== WL && (WJ -= cR[WR], cX(WZ, WJ, WL)), Wj--, WR = cD(Wj), cG(WZ, WR, WT), WL = cE[WR], 0 !== WL && (Wj -= cL[WR], cX(WZ, Wj, WL)));
                            } while (WA < WZ.sym_next);
                        }
                        cG(WZ, 256, WV);
                    }, t2 = (WZ, WV) => {
                        ;
                        const WT = WV.dyn_tree, Wj = WV.stat_desc.static_tree, WJ = WV.stat_desc.has_stree, WR = WV.stat_desc.elems;
                        let WL, WA, WI, WP = -1;
                        for (WZ.heap_len = 0, WZ.heap_max = 573, WL = 0; WL < WR; WL++) {
                            0 !== WT[2 * WL] ? (WZ.heap[++WZ.heap_len] = WP = WL, WZ.depth[WL] = 0) : WT[2 * WL + 1] = 0;
                        }
                        for (; WZ.heap_len < 2;) {
                            WI = WZ.heap[++WZ.heap_len] = WP < 2 ? ++WP : 0;
                            WT[2 * WI] = 1;
                            WZ.depth[WI] = 0;
                            WZ.opt_len--;
                            WJ && (WZ.static_len -= Wj[2 * WI + 1]);
                        }
                        for (WV.max_code = WP, WL = WZ.heap_len >> 1; WL >= 1; WL--) {
                            t0(WZ, WT, WL);
                        }
                        WI = WR;
                        do {
                            WL = WZ.heap[1];
                            WZ.heap[1] = WZ.heap[WZ.heap_len--];
                            t0(WZ, WT, 1);
                            WA = WZ.heap[1];
                            WZ.heap[--WZ.heap_max] = WL;
                            WZ.heap[--WZ.heap_max] = WA;
                            WT[2 * WI] = WT[2 * WL] + WT[2 * WA];
                            WZ.depth[WI] = (WZ.depth[WL] >= WZ.depth[WA] ? WZ.depth[WL] : WZ.depth[WA]) + 1;
                            WT[2 * WL + 1] = WT[2 * WA + 1] = WI;
                            WZ.heap[1] = WI++;
                            t0(WZ, WT, 1);
                        } while (WZ.heap_len >= 2);
                        WZ.heap[--WZ.heap_max] = WZ.heap[1];
                        ((WN, WW) => {
                            ;
                            const WD = WW.dyn_tree, WQ = WW.max_code, Wk = WW.stat_desc.static_tree, WX = WW.stat_desc.has_stree, WG = WW.stat_desc.extra_bits, Wz = WW.stat_desc.extra_base, WF = WW.stat_desc.max_length;
                            let Wq, WU, WB, d0, d1, d2, d3 = 0;
                            for (d0 = 0; d0 <= 15; d0++) {
                                WN.bl_count[d0] = 0;
                            }
                            for (WD[2 * WN.heap[WN.heap_max] + 1] = 0, Wq = WN.heap_max + 1; Wq < 573; Wq++) {
                                WU = WN.heap[Wq];
                                d0 = WD[2 * WD[2 * WU + 1] + 1] + 1;
                                if (d0 > WF) {
                                    d0 = WF;
                                    d3++;
                                }
                                WD[2 * WU + 1] = d0;
                                if (WU > WQ) {
                                    WN.bl_count[d0]++;
                                    d1 = 0;
                                    WU >= Wz && (d1 = WG[WU - Wz]);
                                    d2 = WD[2 * WU];
                                    WN.opt_len += d2 * (d0 + d1);
                                    WX && (WN.static_len += d2 * (Wk[2 * WU + 1] + d1));
                                }
                            }
                            if (0 !== d3) {
                                do {
                                    for (d0 = WF - 1; 0 === WN.bl_count[d0];) {
                                        d0--;
                                    }
                                    WN.bl_count[d0]--;
                                    WN.bl_count[d0 + 1] += 2;
                                    WN.bl_count[WF]--;
                                    d3 -= 2;
                                } while (d3 > 0);
                                for (d0 = WF; 0 !== d0; d0--) {
                                    for (WU = WN.bl_count[d0]; 0 !== WU;) {
                                        WB = WN.heap[--Wq];
                                        if (WB > WQ) {
                                            if (WD[2 * WB + 1] !== d0) {
                                                WN.opt_len += (d0 - WD[2 * WB + 1]) * WD[2 * WB];
                                                WD[2 * WB + 1] = d0;
                                            }
                                            WU--;
                                        }
                                    }
                                }
                            }
                        })(WZ, WV);
                        cF(WT, WP, WZ.bl_count);
                    }, t3 = (WZ, WV, WT) => {
                        ;
                        let Wj, WJ, WR = -1, WL = WV[1], WA = 0, WI = 7, WP = 4;
                        for (0 === WL && (WI = 138, WP = 3), WV[2 * (WT + 1) + 1] = 65535, Wj = 0; Wj <= WT; Wj++) {
                            WJ = WL;
                            WL = WV[2 * (Wj + 1) + 1];
                            ++WA < WI && WJ === WL || (WA < WP ? WZ.bl_tree[2 * WJ] += WA : 0 !== WJ ? (WJ !== WR && WZ.bl_tree[2 * WJ]++, WZ.bl_tree[32]++) : WA <= 10 ? WZ.bl_tree[34]++ : WZ.bl_tree[36]++, WA = 0, WR = WJ, 0 === WL ? (WI = 138, WP = 3) : WJ === WL ? (WI = 6, WP = 3) : (WI = 7, WP = 4));
                        }
                    }, t4 = (WZ, WV, WT) => {
                        ;
                        let Wj, WJ, WR = -1, WL = WV[1], WA = 0, WI = 7, WP = 4;
                        for (0 === WL && (WI = 138, WP = 3), Wj = 0; Wj <= WT; Wj++) {
                            if (WJ = WL, WL = WV[2 * (Wj + 1) + 1], !(++WA < WI && WJ === WL)) {
                                if (WA < WP) {
                                    do {
                                        cG(WZ, WJ, WZ.bl_tree);
                                    } while (0 != --WA);
                                } else {
                                    0 !== WJ ? (WJ !== WR && (cG(WZ, WJ, WZ.bl_tree), WA--), cG(WZ, 16, WZ.bl_tree), cX(WZ, WA - 3, 2)) : WA <= 10 ? (cG(WZ, 17, WZ.bl_tree), cX(WZ, WA - 3, 3)) : (cG(WZ, 18, WZ.bl_tree), cX(WZ, WA - 11, 7));
                                }
                                WA = 0;
                                WR = WJ;
                                0 === WL ? (WI = 138, WP = 3) : WJ === WL ? (WI = 6, WP = 3) : (WI = 7, WP = 4);
                            }
                        }
                    };
                let t5 = false;
                const t6 = (WZ, WV, WT, Wj) => {
                    ;
                    cX(WZ, 0 + (Wj ? 1 : 0), 3);
                    cU(WZ);
                    cQ(WZ, WT);
                    cQ(WZ, ~WT);
                    WT && WZ.pending_buf.set(WZ.window.subarray(WV, WV + WT), WZ.pending);
                    WZ.pending += WT;
                };
                var t7 = (WZ, WV, WT, Wj) => {
                        ;
                        let WJ, WR, WL = 0;
                        WZ.level > 0 ? (2 === WZ.strm.data_type && (WZ.strm.data_type = (WA => {
                            ;
                            let WI, WP = 4093624447;
                            for (WI = 0; WI <= 31; WI++, WP >>>= 1) {
                                if (1 & WP && 0 !== WA.dyn_ltree[2 * WI]) {
                                    return 0;
                                }
                            }
                            if (0 !== WA.dyn_ltree[18] || 0 !== WA.dyn_ltree[20] || 0 !== WA.dyn_ltree[26]) {
                                return 1;
                            }
                            for (WI = 32; WI < 256; WI++) {
                                if (0 !== WA.dyn_ltree[2 * WI]) {
                                    return 1;
                                }
                            }
                            return 0;
                        })(WZ)), t2(WZ, WZ.l_desc), t2(WZ, WZ.d_desc), WL = (WA => {
                            ;
                            let WI;
                            for (t3(WA, WA.dyn_ltree, WA.l_desc.max_code), t3(WA, WA.dyn_dtree, WA.d_desc.max_code), t2(WA, WA.bl_desc), WI = 18; WI >= 3 && 0 === WA.bl_tree[2 * cZ[WI] + 1]; WI--) {
                                ;
                            }
                            return WA.opt_len += 3 * (WI + 1) + 5 + 5 + 4, WI;
                        })(WZ), WJ = WZ.opt_len + 3 + 7 >>> 3, WR = WZ.static_len + 3 + 7 >>> 3, WR <= WJ && (WJ = WR)) : WJ = WR = WT + 5;
                        WT + 4 <= WJ && -1 !== WV ? t6(WZ, WV, WT, Wj) : 4 === WZ.strategy || WR === WJ ? (cX(WZ, 2 + (Wj ? 1 : 0), 3), t1(WZ, cV, cT)) : (cX(WZ, 4 + (Wj ? 1 : 0), 3), ((WA, WI, WP, WN) => {
                            ;
                            let WW;
                            for (cX(WA, WI - 257, 5), cX(WA, WP - 1, 5), cX(WA, WN - 4, 4), WW = 0; WW < WN; WW++) {
                                cX(WA, WA.bl_tree[2 * cZ[WW] + 1], 3);
                            }
                            t4(WA, WA.dyn_ltree, WI - 1);
                            t4(WA, WA.dyn_dtree, WP - 1);
                        })(WZ, WZ.l_desc.max_code + 1, WZ.d_desc.max_code + 1, WL + 1), t1(WZ, WZ.dyn_ltree, WZ.dyn_dtree));
                        cq(WZ);
                        Wj && cU(WZ);
                    }, t8 = {
                        '_tr_init': WZ => {
                            ;
                            t5 || (((() => {
                                let WV, WT, Wj, WJ, WR;
                                const WL = new Array(16);
                                for (Wj = 0, WJ = 0; WJ < 28; WJ++) {
                                    for (cR[WJ] = Wj, WV = 0; WV < 1 << cC[WJ]; WV++) {
                                        cJ[Wj++] = WJ;
                                    }
                                }
                                for (cJ[Wj - 1] = WJ, WR = 0, WJ = 0; WJ < 16; WJ++) {
                                    for (cL[WJ] = WR, WV = 0; WV < 1 << cE[WJ]; WV++) {
                                        cj[WR++] = WJ;
                                    }
                                }
                                for (WR >>= 7; WJ < 30; WJ++) {
                                    for (cL[WJ] = WR << 7, WV = 0; WV < 1 << cE[WJ] - 7; WV++) {
                                        cj[256 + WR++] = WJ;
                                    }
                                }
                                for (WT = 0; WT <= 15; WT++) {
                                    WL[WT] = 0;
                                }
                                for (WV = 0; WV <= 143;) {
                                    cV[2 * WV + 1] = 8;
                                    WV++;
                                    WL[8]++;
                                }
                                for (; WV <= 255;) {
                                    cV[2 * WV + 1] = 9;
                                    WV++;
                                    WL[9]++;
                                }
                                for (; WV <= 279;) {
                                    cV[2 * WV + 1] = 7;
                                    WV++;
                                    WL[7]++;
                                }
                                for (; WV <= 287;) {
                                    cV[2 * WV + 1] = 8;
                                    WV++;
                                    WL[8]++;
                                }
                                for (cF(cV, 287, WL), WV = 0; WV < 30; WV++) {
                                    cT[2 * WV + 1] = 5;
                                    cT[2 * WV] = cz(WV, 5);
                                }
                                cI = new cA(cV, cC, 257, 286, 15);
                                cP = new cA(cT, cE, 0, 30, 15);
                                cN = new cA(new Array(0), cH, 0, 19, 7);
                            })()), t5 = true);
                            WZ.l_desc = new cW(WZ.dyn_ltree, cI);
                            WZ.d_desc = new cW(WZ.dyn_dtree, cP);
                            WZ.bl_desc = new cW(WZ.bl_tree, cN);
                            WZ.bi_buf = 0;
                            WZ.bi_valid = 0;
                            cq(WZ);
                        },
                        '_tr_stored_block': t6,
                        '_tr_flush_block': t7,
                        '_tr_tally': (WZ, WV, WT) => (WZ.pending_buf[WZ.sym_buf + WZ.sym_next++] = WV, WZ.pending_buf[WZ.sym_buf + WZ.sym_next++] = WV >> 8, WZ.pending_buf[WZ.sym_buf + WZ.sym_next++] = WT, 0 === WV ? WZ.dyn_ltree[2 * WT]++ : (WZ.matches++, WV--, WZ.dyn_ltree[2 * (cJ[WT] + 256 + 1)]++, WZ.dyn_dtree[2 * cD(WV)]++), WZ.sym_next === WZ.sym_end),
                        '_tr_align': WZ => {
                            cX(WZ, 2, 3);
                            cG(WZ, 256, cV);
                            (WV => {
                                ;
                                16 === WV.bi_valid ? (cQ(WV, WV.bi_buf), WV.bi_buf = 0, WV.bi_valid = 0) : WV.bi_valid >= 8 && (WV.pending_buf[WV.pending++] = 255 & WV.bi_buf, WV.bi_buf >>= 8, WV.bi_valid -= 8);
                            })(WZ);
                        }
                    }, t9 = (WZ, WV, WT, Wj) => {
                        let WJ = 65535 & WZ | 0, WR = WZ >>> 16 & 65535 | 0, WL = 0;
                        for (; 0 !== WT;) {
                            WL = WT > 2000 ? 2000 : WT;
                            WT -= WL;
                            do {
                                WJ = WJ + WV[Wj++] | 0;
                                WR = WR + WJ | 0;
                            } while (--WL);
                            WJ %= 65521;
                            WR %= 65521;
                        }
                        return WJ | WR << 16 | 0;
                    };
                const tO = new Uint32Array(((() => {
                    let WZ, WV = [];
                    for (var WT = 0; WT < 256; WT++) {
                        WZ = WT;
                        for (var Wj = 0; Wj < 8; Wj++) {
                            WZ = 1 & WZ ? 3988292384 ^ WZ >>> 1 : WZ >>> 1;
                        }
                        WV[WT] = WZ;
                    }
                    return WV;
                })()));
                var tY = (WZ, WV, WT, Wj) => {
                        const WJ = tO, WR = Wj + WT;
                        WZ ^= -1;
                        for (let WL = Wj; WL < WR; WL++) {
                            WZ = WZ >>> 8 ^ WJ[255 & (WZ ^ WV[WL])];
                        }
                        return -1 ^ WZ;
                    }, tM = {
                        2: 'need dictionary',
                        1: 'stream end',
                        0: '',
                        '-1': 'file error',
                        '-2': 'stream error',
                        '-3': 'data error',
                        '-4': 'insufficient memory',
                        '-5': 'buffer error',
                        '-6': 'incompatible version'
                    }, tS = {
                        'Z_NO_FLUSH': 0,
                        'Z_PARTIAL_FLUSH': 1,
                        'Z_SYNC_FLUSH': 2,
                        'Z_FULL_FLUSH': 3,
                        'Z_FINISH': 4,
                        'Z_BLOCK': 5,
                        'Z_TREES': 6,
                        'Z_OK': 0,
                        'Z_STREAM_END': 1,
                        'Z_NEED_DICT': 2,
                        'Z_ERRNO': -1,
                        'Z_STREAM_ERROR': -2,
                        'Z_DATA_ERROR': -3,
                        'Z_MEM_ERROR': -4,
                        'Z_BUF_ERROR': -5,
                        'Z_NO_COMPRESSION': 0,
                        'Z_BEST_SPEED': 1,
                        'Z_BEST_COMPRESSION': 9,
                        'Z_DEFAULT_COMPRESSION': -1,
                        'Z_FILTERED': 1,
                        'Z_HUFFMAN_ONLY': 2,
                        'Z_RLE': 3,
                        'Z_FIXED': 4,
                        'Z_DEFAULT_STRATEGY': 0,
                        'Z_BINARY': 0,
                        'Z_TEXT': 1,
                        'Z_UNKNOWN': 2,
                        'Z_DEFLATED': 8
                    };
                const {
                        _tr_init: tK,
                        _tr_stored_block: tC,
                        _tr_flush_block: tE,
                        _tr_tally: tH,
                        _tr_align: tZ
                    } = t8, {
                        Z_NO_FLUSH: tV,
                        Z_PARTIAL_FLUSH: tT,
                        Z_FULL_FLUSH: tj,
                        Z_FINISH: tJ,
                        Z_BLOCK: tR,
                        Z_OK: tL,
                        Z_STREAM_END: tA,
                        Z_STREAM_ERROR: tI,
                        Z_DATA_ERROR: tP,
                        Z_BUF_ERROR: tN,
                        Z_DEFAULT_COMPRESSION: tW,
                        Z_FILTERED: tD,
                        Z_HUFFMAN_ONLY: tQ,
                        Z_RLE: tX,
                        Z_FIXED: tG,
                        Z_DEFAULT_STRATEGY: tz,
                        Z_UNKNOWN: tF,
                        Z_DEFLATED: tq
                    } = tS, M3 = (WZ, WV) => (WZ.msg = tM[WV], WV), M4 = WZ => 2 * WZ - (WZ > 4 ? 9 : 0), M5 = WZ => {
                        let WV = WZ.length;
                        for (; --WV >= 0;) {
                            WZ[WV] = 0;
                        }
                    }, M6 = WZ => {
                        ;
                        let WV, WT, Wj, WJ = WZ.w_size;
                        WV = WZ.hash_size;
                        Wj = WV;
                        do {
                            WT = WZ.head[--Wj];
                            WZ.head[Wj] = WT >= WJ ? WT - WJ : 0;
                        } while (--WV);
                        WV = WJ;
                        Wj = WV;
                        do {
                            WT = WZ.prev[--Wj];
                            WZ.prev[Wj] = WT >= WJ ? WT - WJ : 0;
                        } while (--WV);
                    };
                let M7 = (WZ, WV, WT) => (WV << WZ.hash_shift ^ WT) & WZ.hash_mask;
                const M8 = WZ => {
                        ;
                        const WV = WZ.state;
                        let WT = WV.pending;
                        WT > WZ.avail_out && (WT = WZ.avail_out);
                        if (0 !== WT) {
                            WZ.output.set(WV.pending_buf.subarray(WV.pending_out, WV.pending_out + WT), WZ.next_out);
                            WZ.next_out += WT;
                            WV.pending_out += WT;
                            WZ.total_out += WT;
                            WZ.avail_out -= WT;
                            WV.pending -= WT;
                            0 === WV.pending && (WV.pending_out = 0);
                        }
                    }, M9 = (WZ, WV) => {
                        ;
                        tE(WZ, WZ.block_start >= 0 ? WZ.block_start : -1, WZ.strstart - WZ.block_start, WV);
                        WZ.block_start = WZ.strstart;
                        M8(WZ.strm);
                    }, MO = (WZ, WV) => {
                        ;
                        WZ.pending_buf[WZ.pending++] = WV;
                    }, MY = (WZ, WV) => {
                        ;
                        WZ.pending_buf[WZ.pending++] = WV >>> 8 & 255;
                        WZ.pending_buf[WZ.pending++] = 255 & WV;
                    }, MM = (WZ, WV, WT, Wj) => {
                        ;
                        let WJ = WZ.avail_in;
                        return WJ > Wj && (WJ = Wj), 0 === WJ ? 0 : (WZ.avail_in -= WJ, WV.set(WZ.input.subarray(WZ.next_in, WZ.next_in + WJ), WT), 1 === WZ.state.wrap ? WZ.adler = t9(WZ.adler, WV, WJ, WT) : 2 === WZ.state.wrap && (WZ.adler = tY(WZ.adler, WV, WJ, WT)), WZ.next_in += WJ, WZ.total_in += WJ, WJ);
                    }, MS = (WZ, WV) => {
                        ;
                        let WT, Wj, WJ = WZ.max_chain_length, WR = WZ.strstart, WL = WZ.prev_length, WA = WZ.nice_match;
                        const WI = WZ.strstart > WZ.w_size - 262 ? WZ.strstart - (WZ.w_size - 262) : 0, WP = WZ.window, WN = WZ.w_mask, WW = WZ.prev, WD = WZ.strstart + 258;
                        let WQ = WP[WR + WL - 1], Wk = WP[WR + WL];
                        WZ.prev_length >= WZ.good_match && (WJ >>= 2);
                        WA > WZ.lookahead && (WA = WZ.lookahead);
                        do {
                            if (WT = WV, WP[WT + WL] === Wk && WP[WT + WL - 1] === WQ && WP[WT] === WP[WR] && WP[++WT] === WP[WR + 1]) {
                                WR += 2;
                                WT++;
                                do {
                                } while (WP[++WR] === WP[++WT] && WP[++WR] === WP[++WT] && WP[++WR] === WP[++WT] && WP[++WR] === WP[++WT] && WP[++WR] === WP[++WT] && WP[++WR] === WP[++WT] && WP[++WR] === WP[++WT] && WP[++WR] === WP[++WT] && WR < WD);
                                if (Wj = 258 - (WD - WR), WR = WD - 258, Wj > WL) {
                                    if (WZ.match_start = WV, WL = Wj, Wj >= WA) {
                                        break;
                                    }
                                    WQ = WP[WR + WL - 1];
                                    Wk = WP[WR + WL];
                                }
                            }
                        } while ((WV = WW[WV & WN]) > WI && 0 != --WJ);
                        return WL <= WZ.lookahead ? WL : WZ.lookahead;
                    }, MK = WZ => {
                        ;
                        const WV = WZ.w_size;
                        let WT, Wj, WJ;
                        do {
                            if (Wj = WZ.window_size - WZ.lookahead - WZ.strstart, WZ.strstart >= WV + (WV - 262) && (WZ.window.set(WZ.window.subarray(WV, WV + WV - Wj), 0), WZ.match_start -= WV, WZ.strstart -= WV, WZ.block_start -= WV, WZ.insert > WZ.strstart && (WZ.insert = WZ.strstart), M6(WZ), Wj += WV), 0 === WZ.strm.avail_in) {
                                break;
                            }
                            if (WT = MM(WZ.strm, WZ.window, WZ.strstart + WZ.lookahead, Wj), WZ.lookahead += WT, WZ.lookahead + WZ.insert >= 3) {
                                for (WJ = WZ.strstart - WZ.insert, WZ.ins_h = WZ.window[WJ], WZ.ins_h = M7(WZ, WZ.ins_h, WZ.window[WJ + 1]); WZ.insert && (WZ.ins_h = M7(WZ, WZ.ins_h, WZ.window[WJ + 3 - 1]), WZ.prev[WJ & WZ.w_mask] = WZ.head[WZ.ins_h], WZ.head[WZ.ins_h] = WJ, WJ++, WZ.insert--, !(WZ.lookahead + WZ.insert < 3));) {
                                    ;
                                }
                            }
                        } while (WZ.lookahead < 262 && 0 !== WZ.strm.avail_in);
                    }, MC = (WZ, WV) => {
                        ;
                        let WT, Wj, WJ, WR = WZ.pending_buf_size - 5 > WZ.w_size ? WZ.w_size : WZ.pending_buf_size - 5, WL = 0, WA = WZ.strm.avail_in;
                        do {
                            if (WT = 65535, WJ = WZ.bi_valid + 42 >> 3, WZ.strm.avail_out < WJ) {
                                break;
                            }
                            if (WJ = WZ.strm.avail_out - WJ, Wj = WZ.strstart - WZ.block_start, WT > Wj + WZ.strm.avail_in && (WT = Wj + WZ.strm.avail_in), WT > WJ && (WT = WJ), WT < WR && (0 === WT && WV !== tJ || WV === tV || WT !== Wj + WZ.strm.avail_in)) {
                                break;
                            }
                            WL = WV === tJ && WT === Wj + WZ.strm.avail_in ? 1 : 0;
                            tC(WZ, 0, 0, WL);
                            WZ.pending_buf[WZ.pending - 4] = WT;
                            WZ.pending_buf[WZ.pending - 3] = WT >> 8;
                            WZ.pending_buf[WZ.pending - 2] = ~WT;
                            WZ.pending_buf[WZ.pending - 1] = ~WT >> 8;
                            M8(WZ.strm);
                            Wj && (Wj > WT && (Wj = WT), WZ.strm.output.set(WZ.window.subarray(WZ.block_start, WZ.block_start + Wj), WZ.strm.next_out), WZ.strm.next_out += Wj, WZ.strm.avail_out -= Wj, WZ.strm.total_out += Wj, WZ.block_start += Wj, WT -= Wj);
                            WT && (MM(WZ.strm, WZ.strm.output, WZ.strm.next_out, WT), WZ.strm.next_out += WT, WZ.strm.avail_out -= WT, WZ.strm.total_out += WT);
                        } while (0 === WL);
                        return WA -= WZ.strm.avail_in, WA && (WA >= WZ.w_size ? (WZ.matches = 2, WZ.window.set(WZ.strm.input.subarray(WZ.strm.next_in - WZ.w_size, WZ.strm.next_in), 0), WZ.strstart = WZ.w_size, WZ.insert = WZ.strstart) : (WZ.window_size - WZ.strstart <= WA && (WZ.strstart -= WZ.w_size, WZ.window.set(WZ.window.subarray(WZ.w_size, WZ.w_size + WZ.strstart), 0), WZ.matches < 2 && WZ.matches++, WZ.insert > WZ.strstart && (WZ.insert = WZ.strstart)), WZ.window.set(WZ.strm.input.subarray(WZ.strm.next_in - WA, WZ.strm.next_in), WZ.strstart), WZ.strstart += WA, WZ.insert += WA > WZ.w_size - WZ.insert ? WZ.w_size - WZ.insert : WA), WZ.block_start = WZ.strstart), WZ.high_water < WZ.strstart && (WZ.high_water = WZ.strstart), WL ? 4 : WV !== tV && WV !== tJ && 0 === WZ.strm.avail_in && WZ.strstart === WZ.block_start ? 2 : (WJ = WZ.window_size - WZ.strstart, WZ.strm.avail_in > WJ && WZ.block_start >= WZ.w_size && (WZ.block_start -= WZ.w_size, WZ.strstart -= WZ.w_size, WZ.window.set(WZ.window.subarray(WZ.w_size, WZ.w_size + WZ.strstart), 0), WZ.matches < 2 && WZ.matches++, WJ += WZ.w_size, WZ.insert > WZ.strstart && (WZ.insert = WZ.strstart)), WJ > WZ.strm.avail_in && (WJ = WZ.strm.avail_in), WJ && (MM(WZ.strm, WZ.window, WZ.strstart, WJ), WZ.strstart += WJ, WZ.insert += WJ > WZ.w_size - WZ.insert ? WZ.w_size - WZ.insert : WJ), WZ.high_water < WZ.strstart && (WZ.high_water = WZ.strstart), WJ = WZ.bi_valid + 42 >> 3, WJ = WZ.pending_buf_size - WJ > 65535 ? 65535 : WZ.pending_buf_size - WJ, WR = WJ > WZ.w_size ? WZ.w_size : WJ, Wj = WZ.strstart - WZ.block_start, (Wj >= WR || (Wj || WV === tJ) && WV !== tV && 0 === WZ.strm.avail_in && Wj <= WJ) && (WT = Wj > WJ ? WJ : Wj, WL = WV === tJ && 0 === WZ.strm.avail_in && WT === Wj ? 1 : 0, tC(WZ, WZ.block_start, WT, WL), WZ.block_start += WT, M8(WZ.strm)), WL ? 3 : 1);
                    }, ME = (WZ, WV) => {
                        ;
                        let WT, Wj;
                        for (;;) {
                            if (WZ.lookahead < 262) {
                                if (MK(WZ), WZ.lookahead < 262 && WV === tV) {
                                    return 1;
                                }
                                if (0 === WZ.lookahead) {
                                    break;
                                }
                            }
                            if (WT = 0, WZ.lookahead >= 3 && (WZ.ins_h = M7(WZ, WZ.ins_h, WZ.window[WZ.strstart + 3 - 1]), WT = WZ.prev[WZ.strstart & WZ.w_mask] = WZ.head[WZ.ins_h], WZ.head[WZ.ins_h] = WZ.strstart), 0 !== WT && WZ.strstart - WT <= WZ.w_size - 262 && (WZ.match_length = MS(WZ, WT)), WZ.match_length >= 3) {
                                if (Wj = tH(WZ, WZ.strstart - WZ.match_start, WZ.match_length - 3), WZ.lookahead -= WZ.match_length, WZ.match_length <= WZ.max_lazy_match && WZ.lookahead >= 3) {
                                    WZ.match_length--;
                                    do {
                                        WZ.strstart++;
                                        WZ.ins_h = M7(WZ, WZ.ins_h, WZ.window[WZ.strstart + 3 - 1]);
                                        WT = WZ.prev[WZ.strstart & WZ.w_mask] = WZ.head[WZ.ins_h];
                                        WZ.head[WZ.ins_h] = WZ.strstart;
                                    } while (0 != --WZ.match_length);
                                    WZ.strstart++;
                                } else {
                                    WZ.strstart += WZ.match_length;
                                    WZ.match_length = 0;
                                    WZ.ins_h = WZ.window[WZ.strstart];
                                    WZ.ins_h = M7(WZ, WZ.ins_h, WZ.window[WZ.strstart + 1]);
                                }
                            } else {
                                Wj = tH(WZ, 0, WZ.window[WZ.strstart]);
                                WZ.lookahead--;
                                WZ.strstart++;
                            }
                            if (Wj && (M9(WZ, false), 0 === WZ.strm.avail_out)) {
                                return 1;
                            }
                        }
                        return WZ.insert = WZ.strstart < 2 ? WZ.strstart : 2, WV === tJ ? (M9(WZ, true), 0 === WZ.strm.avail_out ? 3 : 4) : WZ.sym_next && (M9(WZ, false), 0 === WZ.strm.avail_out) ? 1 : 2;
                    }, MH = (WZ, WV) => {
                        ;
                        let WT, Wj, WJ;
                        for (;;) {
                            if (WZ.lookahead < 262) {
                                if (MK(WZ), WZ.lookahead < 262 && WV === tV) {
                                    return 1;
                                }
                                if (0 === WZ.lookahead) {
                                    break;
                                }
                            }
                            if (WT = 0, WZ.lookahead >= 3 && (WZ.ins_h = M7(WZ, WZ.ins_h, WZ.window[WZ.strstart + 3 - 1]), WT = WZ.prev[WZ.strstart & WZ.w_mask] = WZ.head[WZ.ins_h], WZ.head[WZ.ins_h] = WZ.strstart), WZ.prev_length = WZ.match_length, WZ.prev_match = WZ.match_start, WZ.match_length = 2, 0 !== WT && WZ.prev_length < WZ.max_lazy_match && WZ.strstart - WT <= WZ.w_size - 262 && (WZ.match_length = MS(WZ, WT), WZ.match_length <= 5 && (WZ.strategy === tD || 3 === WZ.match_length && WZ.strstart - WZ.match_start > 4096) && (WZ.match_length = 2)), WZ.prev_length >= 3 && WZ.match_length <= WZ.prev_length) {
                                WJ = WZ.strstart + WZ.lookahead - 3;
                                Wj = tH(WZ, WZ.strstart - 1 - WZ.prev_match, WZ.prev_length - 3);
                                WZ.lookahead -= WZ.prev_length - 1;
                                WZ.prev_length -= 2;
                                do {
                                    if (++WZ.strstart <= WJ) {
                                        WZ.ins_h = M7(WZ, WZ.ins_h, WZ.window[WZ.strstart + 3 - 1]);
                                        WT = WZ.prev[WZ.strstart & WZ.w_mask] = WZ.head[WZ.ins_h];
                                        WZ.head[WZ.ins_h] = WZ.strstart;
                                    }
                                } while (0 != --WZ.prev_length);
                                if (WZ.match_available = 0, WZ.match_length = 2, WZ.strstart++, Wj && (M9(WZ, false), 0 === WZ.strm.avail_out)) {
                                    return 1;
                                }
                            } else {
                                if (WZ.match_available) {
                                    if (Wj = tH(WZ, 0, WZ.window[WZ.strstart - 1]), Wj && M9(WZ, false), WZ.strstart++, WZ.lookahead--, 0 === WZ.strm.avail_out) {
                                        return 1;
                                    }
                                } else {
                                    WZ.match_available = 1;
                                    WZ.strstart++;
                                    WZ.lookahead--;
                                }
                            }
                        }
                        return WZ.match_available && (Wj = tH(WZ, 0, WZ.window[WZ.strstart - 1]), WZ.match_available = 0), WZ.insert = WZ.strstart < 2 ? WZ.strstart : 2, WV === tJ ? (M9(WZ, true), 0 === WZ.strm.avail_out ? 3 : 4) : WZ.sym_next && (M9(WZ, false), 0 === WZ.strm.avail_out) ? 1 : 2;
                    };
                function MZ(WZ, WV, WT, Wj, WJ) {
                    ;
                    this.good_length = WZ;
                    this.max_lazy = WV;
                    this.nice_length = WT;
                    this.max_chain = Wj;
                    this.func = WJ;
                }
                const MV = [
                    new MZ(0, 0, 0, 0, MC),
                    new MZ(4, 4, 8, 4, ME),
                    new MZ(4, 5, 16, 8, ME),
                    new MZ(4, 6, 32, 32, ME),
                    new MZ(4, 4, 16, 16, MH),
                    new MZ(8, 16, 32, 32, MH),
                    new MZ(8, 16, 128, 128, MH),
                    new MZ(8, 32, 128, 256, MH),
                    new MZ(32, 128, 258, 1024, MH),
                    new MZ(32, 258, 258, 4096, MH)
                ];
                function MT() {
                    ;
                    this.strm = null;
                    this.status = 0;
                    this.pending_buf = null;
                    this.pending_buf_size = 0;
                    this.pending_out = 0;
                    this.pending = 0;
                    this.wrap = 0;
                    this.gzhead = null;
                    this.gzindex = 0;
                    this.method = tq;
                    this.last_flush = -1;
                    this.w_size = 0;
                    this.w_bits = 0;
                    this.w_mask = 0;
                    this.window = null;
                    this.window_size = 0;
                    this.prev = null;
                    this.head = null;
                    this.ins_h = 0;
                    this.hash_size = 0;
                    this.hash_bits = 0;
                    this.hash_mask = 0;
                    this.hash_shift = 0;
                    this.block_start = 0;
                    this.match_length = 0;
                    this.prev_match = 0;
                    this.match_available = 0;
                    this.strstart = 0;
                    this.match_start = 0;
                    this.lookahead = 0;
                    this.prev_length = 0;
                    this.max_chain_length = 0;
                    this.max_lazy_match = 0;
                    this.level = 0;
                    this.strategy = 0;
                    this.good_match = 0;
                    this.nice_match = 0;
                    this.dyn_ltree = new Uint16Array(1146);
                    this.dyn_dtree = new Uint16Array(122);
                    this.bl_tree = new Uint16Array(78);
                    M5(this.dyn_ltree);
                    M5(this.dyn_dtree);
                    M5(this.bl_tree);
                    this.l_desc = null;
                    this.d_desc = null;
                    this.bl_desc = null;
                    this.bl_count = new Uint16Array(16);
                    this.heap = new Uint16Array(573);
                    M5(this.heap);
                    this.heap_len = 0;
                    this.heap_max = 0;
                    this.depth = new Uint16Array(573);
                    M5(this.depth);
                    this.sym_buf = 0;
                    this.lit_bufsize = 0;
                    this.sym_next = 0;
                    this.sym_end = 0;
                    this.opt_len = 0;
                    this.static_len = 0;
                    this.matches = 0;
                    this.insert = 0;
                    this.bi_buf = 0;
                    this.bi_valid = 0;
                }
                const Mj = WZ => {
                        ;
                        if (!WZ) {
                            return 1;
                        }
                        const WV = WZ.state;
                        return !WV || WV.strm !== WZ || WV.status !== 42 && 57 !== WV.status && 69 !== WV.status && 73 !== WV.status && 91 !== WV.status && 103 !== WV.status && WV.status !== 113 && WV.status !== 666 ? 1 : 0;
                    }, MJ = WZ => {
                        ;
                        if (Mj(WZ)) {
                            return M3(WZ, tI);
                        }
                        WZ.total_in = WZ.total_out = 0;
                        WZ.data_type = tF;
                        const WV = WZ.state;
                        return WV.pending = 0, WV.pending_out = 0, WV.wrap < 0 && (WV.wrap = -WV.wrap), WV.status = 2 === WV.wrap ? 57 : WV.wrap ? 42 : 113, WZ.adler = 2 === WV.wrap ? 0 : 1, WV.last_flush = -2, tK(WV), tL;
                    }, MR = WZ => {
                        ;
                        const WV = MJ(WZ);
                        var WT;
                        return WV === tL && ((WT = WZ.state).window_size = 2 * WT.w_size, M5(WT.head), WT.max_lazy_match = MV[WT.level].max_lazy, WT.good_match = MV[WT.level].good_length, WT.nice_match = MV[WT.level].nice_length, WT.max_chain_length = MV[WT.level].max_chain, WT.strstart = 0, WT.block_start = 0, WT.lookahead = 0, WT.insert = 0, WT.match_length = WT.prev_length = 2, WT.match_available = 0, WT.ins_h = 0), WV;
                    }, ML = (WZ, WV, WT, Wj, WJ, WR) => {
                        ;
                        if (!WZ) {
                            return tI;
                        }
                        let WL = 1;
                        if (WV === tW && (WV = 6), Wj < 0 ? (WL = 0, Wj = -Wj) : Wj > 15 && (WL = 2, Wj -= 16), WJ < 1 || WJ > 9 || WT !== tq || Wj < 8 || Wj > 15 || WV < 0 || WV > 9 || WR < 0 || WR > tG || 8 === Wj && 1 !== WL) {
                            return M3(WZ, tI);
                        }
                        8 === Wj && (Wj = 9);
                        const WA = new MT();
                        return WZ.state = WA, WA.strm = WZ, WA.status = 42, WA.wrap = WL, WA.gzhead = null, WA.w_bits = Wj, WA.w_size = 1 << WA.w_bits, WA.w_mask = WA.w_size - 1, WA.hash_bits = WJ + 7, WA.hash_size = 1 << WA.hash_bits, WA.hash_mask = WA.hash_size - 1, WA.hash_shift = ~~((WA.hash_bits + 3 - 1) / 3), WA.window = new Uint8Array(2 * WA.w_size), WA.head = new Uint16Array(WA.hash_size), WA.prev = new Uint16Array(WA.w_size), WA.lit_bufsize = 1 << WJ + 6, WA.pending_buf_size = 4 * WA.lit_bufsize, WA.pending_buf = new Uint8Array(WA.pending_buf_size), WA.sym_buf = WA.lit_bufsize, WA.sym_end = 3 * (WA.lit_bufsize - 1), WA.level = WV, WA.strategy = WR, WA.method = WT, MR(WZ);
                    };
                var MA = (WZ, WV) => {
                        ;
                        if (Mj(WZ) || WV > tR || WV < 0) {
                            return WZ ? M3(WZ, tI) : tI;
                        }
                        const WT = WZ.state;
                        if (!WZ.output || 0 !== WZ.avail_in && !WZ.input || WT.status === 666 && WV !== tJ) {
                            return M3(WZ, 0 === WZ.avail_out ? tN : tI);
                        }
                        const Wj = WT.last_flush;
                        if (WT.last_flush = WV, 0 !== WT.pending) {
                            if (M8(WZ), 0 === WZ.avail_out) {
                                return WT.last_flush = -1, tL;
                            }
                        } else {
                            if (0 === WZ.avail_in && M4(WV) <= M4(Wj) && WV !== tJ) {
                                return M3(WZ, tN);
                            }
                        }
                        if (WT.status === 666 && 0 !== WZ.avail_in) {
                            return M3(WZ, tN);
                        }
                        if (WT.status === 42 && 0 === WT.wrap && (WT.status = 113), WT.status === 42) {
                            let WJ = tq + (WT.w_bits - 8 << 4) << 8, WR = -1;
                            if (WR = WT.strategy >= tQ || WT.level < 2 ? 0 : WT.level < 6 ? 1 : 6 === WT.level ? 2 : 3, WJ |= WR << 6, 0 !== WT.strstart && (WJ |= 32), WJ += 31 - WJ % 31, MY(WT, WJ), 0 !== WT.strstart && (MY(WT, WZ.adler >>> 16), MY(WT, 65535 & WZ.adler)), WZ.adler = 1, WT.status = 113, M8(WZ), 0 !== WT.pending) {
                                return WT.last_flush = -1, tL;
                            }
                        }
                        if (57 === WT.status) {
                            if (WZ.adler = 0, MO(WT, 31), MO(WT, 139), MO(WT, 8), WT.gzhead) {
                                MO(WT, (WT.gzhead.text ? 1 : 0) + (WT.gzhead.hcrc ? 2 : 0) + (WT.gzhead.extra ? 4 : 0) + (WT.gzhead.name ? 8 : 0) + (WT.gzhead.comment ? 16 : 0));
                                MO(WT, 255 & WT.gzhead.time);
                                MO(WT, WT.gzhead.time >> 8 & 255);
                                MO(WT, WT.gzhead.time >> 16 & 255);
                                MO(WT, WT.gzhead.time >> 24 & 255);
                                MO(WT, 9 === WT.level ? 2 : WT.strategy >= tQ || WT.level < 2 ? 4 : 0);
                                MO(WT, 255 & WT.gzhead.os);
                                WT.gzhead.extra && WT.gzhead.extra.length && (MO(WT, 255 & WT.gzhead.extra.length), MO(WT, WT.gzhead.extra.length >> 8 & 255));
                                WT.gzhead.hcrc && (WZ.adler = tY(WZ.adler, WT.pending_buf, WT.pending, 0));
                                WT.gzindex = 0;
                                WT.status = 69;
                            } else {
                                if (MO(WT, 0), MO(WT, 0), MO(WT, 0), MO(WT, 0), MO(WT, 0), MO(WT, 9 === WT.level ? 2 : WT.strategy >= tQ || WT.level < 2 ? 4 : 0), MO(WT, 3), WT.status = 113, M8(WZ), 0 !== WT.pending) {
                                    return WT.last_flush = -1, tL;
                                }
                            }
                        }
                        if (69 === WT.status) {
                            if (WT.gzhead.extra) {
                                let WL = WT.pending, WA = (65535 & WT.gzhead.extra.length) - WT.gzindex;
                                for (; WT.pending + WA > WT.pending_buf_size;) {
                                    let WP = WT.pending_buf_size - WT.pending;
                                    if (WT.pending_buf.set(WT.gzhead.extra.subarray(WT.gzindex, WT.gzindex + WP), WT.pending), WT.pending = WT.pending_buf_size, WT.gzhead.hcrc && WT.pending > WL && (WZ.adler = tY(WZ.adler, WT.pending_buf, WT.pending - WL, WL)), WT.gzindex += WP, M8(WZ), 0 !== WT.pending) {
                                        return WT.last_flush = -1, tL;
                                    }
                                    WL = 0;
                                    WA -= WP;
                                }
                                let WI = new Uint8Array(WT.gzhead.extra);
                                WT.pending_buf.set(WI.subarray(WT.gzindex, WT.gzindex + WA), WT.pending);
                                WT.pending += WA;
                                WT.gzhead.hcrc && WT.pending > WL && (WZ.adler = tY(WZ.adler, WT.pending_buf, WT.pending - WL, WL));
                                WT.gzindex = 0;
                            }
                            WT.status = 73;
                        }
                        if (73 === WT.status) {
                            if (WT.gzhead.name) {
                                let WN, WW = WT.pending;
                                do {
                                    if (WT.pending === WT.pending_buf_size) {
                                        if (WT.gzhead.hcrc && WT.pending > WW && (WZ.adler = tY(WZ.adler, WT.pending_buf, WT.pending - WW, WW)), M8(WZ), 0 !== WT.pending) {
                                            return WT.last_flush = -1, tL;
                                        }
                                        WW = 0;
                                    }
                                    WN = WT.gzindex < WT.gzhead.name.length ? 255 & WT.gzhead.name.charCodeAt(WT.gzindex++) : 0;
                                    MO(WT, WN);
                                } while (0 !== WN);
                                WT.gzhead.hcrc && WT.pending > WW && (WZ.adler = tY(WZ.adler, WT.pending_buf, WT.pending - WW, WW));
                                WT.gzindex = 0;
                            }
                            WT.status = 91;
                        }
                        if (91 === WT.status) {
                            if (WT.gzhead.comment) {
                                let WD, WQ = WT.pending;
                                do {
                                    if (WT.pending === WT.pending_buf_size) {
                                        if (WT.gzhead.hcrc && WT.pending > WQ && (WZ.adler = tY(WZ.adler, WT.pending_buf, WT.pending - WQ, WQ)), M8(WZ), 0 !== WT.pending) {
                                            return WT.last_flush = -1, tL;
                                        }
                                        WQ = 0;
                                    }
                                    WD = WT.gzindex < WT.gzhead.comment.length ? 255 & WT.gzhead.comment.charCodeAt(WT.gzindex++) : 0;
                                    MO(WT, WD);
                                } while (0 !== WD);
                                WT.gzhead.hcrc && WT.pending > WQ && (WZ.adler = tY(WZ.adler, WT.pending_buf, WT.pending - WQ, WQ));
                            }
                            WT.status = 103;
                        }
                        if (103 === WT.status) {
                            if (WT.gzhead.hcrc) {
                                if (WT.pending + 2 > WT.pending_buf_size && (M8(WZ), 0 !== WT.pending)) {
                                    return WT.last_flush = -1, tL;
                                }
                                MO(WT, 255 & WZ.adler);
                                MO(WT, WZ.adler >> 8 & 255);
                                WZ.adler = 0;
                            }
                            if (WT.status = 113, M8(WZ), 0 !== WT.pending) {
                                return WT.last_flush = -1, tL;
                            }
                        }
                        if (0 !== WZ.avail_in || 0 !== WT.lookahead || WV !== tV && WT.status !== 666) {
                            let Wk = 0 === WT.level ? MC(WT, WV) : WT.strategy === tQ ? ((WX, WG) => {
                                ;
                                let Wz;
                                for (;;) {
                                    if (0 === WX.lookahead && (MK(WX), 0 === WX.lookahead)) {
                                        if (WG === tV) {
                                            return 1;
                                        }
                                        break;
                                    }
                                    if (WX.match_length = 0, Wz = tH(WX, 0, WX.window[WX.strstart]), WX.lookahead--, WX.strstart++, Wz && (M9(WX, false), 0 === WX.strm.avail_out)) {
                                        return 1;
                                    }
                                }
                                return WX.insert = 0, WG === tJ ? (M9(WX, true), 0 === WX.strm.avail_out ? 3 : 4) : WX.sym_next && (M9(WX, false), 0 === WX.strm.avail_out) ? 1 : 2;
                            })(WT, WV) : WT.strategy === tX ? ((WX, WG) => {
                                ;
                                let Wz, WF, Wq, WU;
                                const WB = WX.window;
                                for (;;) {
                                    if (WX.lookahead <= 258) {
                                        if (MK(WX), WX.lookahead <= 258 && WG === tV) {
                                            return 1;
                                        }
                                        if (0 === WX.lookahead) {
                                            break;
                                        }
                                    }
                                    if (WX.match_length = 0, WX.lookahead >= 3 && WX.strstart > 0 && (Wq = WX.strstart - 1, WF = WB[Wq], WF === WB[++Wq] && WF === WB[++Wq] && WF === WB[++Wq])) {
                                        WU = WX.strstart + 258;
                                        do {
                                        } while (WF === WB[++Wq] && WF === WB[++Wq] && WF === WB[++Wq] && WF === WB[++Wq] && WF === WB[++Wq] && WF === WB[++Wq] && WF === WB[++Wq] && WF === WB[++Wq] && Wq < WU);
                                        ;
                                        WX.match_length > WX.lookahead && (WX.match_length = WX.lookahead);
                                    }
                                    if (WX.match_length >= 3 ? (Wz = tH(WX, 1, WX.match_length - 3), WX.lookahead -= WX.match_length, WX.strstart += WX.match_length, WX.match_length = 0) : (Wz = tH(WX, 0, WX.window[WX.strstart]), WX.lookahead--, WX.strstart++), Wz && (M9(WX, false), 0 === WX.strm.avail_out)) {
                                        return 1;
                                    }
                                }
                                return WX.insert = 0, WG === tJ ? (M9(WX, true), 0 === WX.strm.avail_out ? 3 : 4) : WX.sym_next && (M9(WX, false), 0 === WX.strm.avail_out) ? 1 : 2;
                            })(WT, WV) : MV[WT.level].func(WT, WV);
                            if (3 !== Wk && 4 !== Wk || (WT.status = 666), 1 === Wk || 3 === Wk) {
                                return 0 === WZ.avail_out && (WT.last_flush = -1), tL;
                            }
                            if (2 === Wk && (WV === tT ? tZ(WT) : WV !== tR && (tC(WT, 0, 0, false), WV === tj && (M5(WT.head), 0 === WT.lookahead && (WT.strstart = 0, WT.block_start = 0, WT.insert = 0))), M8(WZ), 0 === WZ.avail_out)) {
                                return WT.last_flush = -1, tL;
                            }
                        }
                        return WV !== tJ ? tL : WT.wrap <= 0 ? tA : (2 === WT.wrap ? (MO(WT, 255 & WZ.adler), MO(WT, WZ.adler >> 8 & 255), MO(WT, WZ.adler >> 16 & 255), MO(WT, WZ.adler >> 24 & 255), MO(WT, 255 & WZ.total_in), MO(WT, WZ.total_in >> 8 & 255), MO(WT, WZ.total_in >> 16 & 255), MO(WT, WZ.total_in >> 24 & 255)) : (MY(WT, WZ.adler >>> 16), MY(WT, 65535 & WZ.adler)), M8(WZ), WT.wrap > 0 && (WT.wrap = -WT.wrap), 0 !== WT.pending ? tL : tA);
                    }, MI = {
                        'deflateInit': (WZ, WV) => ML(WZ, WV, tq, 15, 8, tz),
                        'deflateInit2': ML,
                        'deflateReset': MR,
                        'deflateResetKeep': MJ,
                        'deflateSetHeader': (WZ, WV) => Mj(WZ) || 2 !== WZ.state.wrap ? tI : (WZ.state.gzhead = WV, tL),
                        'deflate': MA,
                        'deflateEnd': WZ => {
                            ;
                            if (Mj(WZ)) {
                                return tI;
                            }
                            const WV = WZ.state.status;
                            return WZ.state = null, WV === 113 ? M3(WZ, tP) : tL;
                        },
                        'deflateSetDictionary': (WZ, WV) => {
                            ;
                            let WT = WV.length;
                            if (Mj(WZ)) {
                                return tI;
                            }
                            const Wj = WZ.state, WJ = Wj.wrap;
                            if (2 === WJ || 1 === WJ && Wj.status !== 42 || Wj.lookahead) {
                                return tI;
                            }
                            if (1 === WJ && (WZ.adler = t9(WZ.adler, WV, WT, 0)), Wj.wrap = 0, WT >= Wj.w_size) {
                                if (0 === WJ) {
                                    M5(Wj.head);
                                    Wj.strstart = 0;
                                    Wj.block_start = 0;
                                    Wj.insert = 0;
                                }
                                let WI = new Uint8Array(Wj.w_size);
                                WI.set(WV.subarray(WT - Wj.w_size, WT), 0);
                                WV = WI;
                                WT = Wj.w_size;
                            }
                            const WR = WZ.avail_in, WL = WZ.next_in, WA = WZ.input;
                            for (WZ.avail_in = WT, WZ.next_in = 0, WZ.input = WV, MK(Wj); Wj.lookahead >= 3;) {
                                let WP = Wj.strstart, WN = Wj.lookahead - 2;
                                do {
                                    Wj.ins_h = M7(Wj, Wj.ins_h, Wj.window[WP + 3 - 1]);
                                    Wj.prev[WP & Wj.w_mask] = Wj.head[Wj.ins_h];
                                    Wj.head[Wj.ins_h] = WP;
                                    WP++;
                                } while (--WN);
                                Wj.strstart = WP;
                                Wj.lookahead = 2;
                                MK(Wj);
                            }
                            return Wj.strstart += Wj.lookahead, Wj.block_start = Wj.strstart, Wj.insert = Wj.lookahead, Wj.lookahead = 0, Wj.match_length = Wj.prev_length = 2, Wj.match_available = 0, WZ.next_in = WL, WZ.input = WA, WZ.avail_in = WR, Wj.wrap = WJ, tL;
                        },
                        'deflateInfo': 'pako deflate (from Nodeca project)'
                    };
                const MP = (WZ, WV) => Object.prototype.hasOwnProperty.call(WZ, WV);
                var MN = function (WZ) {
                        ;
                        const WV = Array.prototype.slice.call(arguments, 1);
                        for (; WV.length;) {
                            const WT = WV.shift();
                            if (WT) {
                                if ('object' != typeof WT) {
                                    throw new TypeError(WT + 'must be non-object');
                                }
                                for (const Wj in WT)
                                    MP(WT, Wj) && (WZ[Wj] = WT[Wj]);
                            }
                        }
                        return WZ;
                    }, MW = WZ => {
                        ;
                        let WV = 0;
                        for (let Wj = 0, WJ = WZ.length; Wj < WJ; Wj++) {
                            WV += WZ[Wj].length;
                        }
                        const WT = new Uint8Array(WV);
                        for (let WR = 0, WL = 0, WA = WZ.length; WR < WA; WR++) {
                            let WI = WZ[WR];
                            WT.set(WI, WL);
                            WL += WI.length;
                        }
                        return WT;
                    };
                let MD = true;
                try {
                    String.fromCharCode.apply(null, new Uint8Array(1));
                } catch (WZ) {
                    MD = false;
                }
                const MQ = new Uint8Array(256);
                for (let WV = 0; WV < 256; WV++) {
                    MQ[WV] = WV >= 252 ? 6 : WV >= 248 ? 5 : WV >= 240 ? 4 : WV >= 224 ? 3 : WV >= 192 ? 2 : 1;
                }
                MQ[254] = MQ[254] = 1;
                var MX = WT => {
                        ;
                        if ('function' == typeof TextEncoder && TextEncoder.prototype.encode) {
                            return new TextEncoder().encode(WT);
                        }
                        let Wj, WJ, WR, WL, WA, WI = WT.length, WP = 0;
                        for (WL = 0; WL < WI; WL++) {
                            WJ = WT.charCodeAt(WL);
                            55296 == (64512 & WJ) && WL + 1 < WI && (WR = WT.charCodeAt(WL + 1), 56320 == (64512 & WR) && (WJ = 65536 + (WJ - 55296 << 10) + (WR - 56320), WL++));
                            WP += WJ < 128 ? 1 : WJ < 2048 ? 2 : WJ < 65536 ? 3 : 4;
                        }
                        for (Wj = new Uint8Array(WP), WA = 0, WL = 0; WA < WP; WL++) {
                            WJ = WT.charCodeAt(WL);
                            55296 == (64512 & WJ) && WL + 1 < WI && (WR = WT.charCodeAt(WL + 1), 56320 == (64512 & WR) && (WJ = 65536 + (WJ - 55296 << 10) + (WR - 56320), WL++));
                            WJ < 128 ? Wj[WA++] = WJ : WJ < 2048 ? (Wj[WA++] = 192 | WJ >>> 6, Wj[WA++] = 128 | 63 & WJ) : WJ < 65536 ? (Wj[WA++] = 224 | WJ >>> 12, Wj[WA++] = 128 | WJ >>> 6 & 63, Wj[WA++] = 128 | 63 & WJ) : (Wj[WA++] = 240 | WJ >>> 18, Wj[WA++] = 128 | WJ >>> 12 & 63, Wj[WA++] = 128 | WJ >>> 6 & 63, Wj[WA++] = 128 | 63 & WJ);
                        }
                        return Wj;
                    }, MG = (WT, Wj) => {
                        ;
                        const WJ = Wj || WT.length;
                        if ('function' == typeof TextDecoder && TextDecoder.prototype.decode) {
                            return new TextDecoder().decode(WT.subarray(0, Wj));
                        }
                        let WR, WL;
                        const WA = new Array(2 * WJ);
                        for (WL = 0, WR = 0; WR < WJ;) {
                            let WI = WT[WR++];
                            if (WI < 128) {
                                WA[WL++] = WI;
                                continue;
                            }
                            let WP = MQ[WI];
                            if (WP > 4) {
                                WA[WL++] = 65533;
                                WR += WP - 1;
                            } else {
                                for (WI &= 2 === WP ? 31 : 3 === WP ? 15 : 7; WP > 1 && WR < WJ;) {
                                    WI = WI << 6 | 63 & WT[WR++];
                                    WP--;
                                }
                                WP > 1 ? WA[WL++] = 65533 : WI < 65536 ? WA[WL++] = WI : (WI -= 65536, WA[WL++] = 55296 | WI >> 10 & 1023, WA[WL++] = 56320 | 1023 & WI);
                            }
                        }
                        return ((WN, WW) => {
                            ;
                            if (WW < 65534 && WN.subarray && MD) {
                                return String.fromCharCode.apply(null, WN.length === WW ? WN : WN.subarray(0, WW));
                            }
                            let WD = '';
                            for (let WQ = 0; WQ < WW; WQ++) {
                                WD += String.fromCharCode(WN[WQ]);
                            }
                            return WD;
                        })(WA, WL);
                    }, Mz = (WT, Wj) => {
                        ;
                        (Wj = Wj || WT.length) > WT.length && (Wj = WT.length);
                        let WJ = Wj - 1;
                        for (; WJ >= 0 && 128 == (192 & WT[WJ]);) {
                            WJ--;
                        }
                        return WJ < 0 || 0 === WJ ? Wj : WJ + MQ[WT[WJ]] > Wj ? WJ : Wj;
                    }, MF = function () {
                        ;
                        this.input = null;
                        this.next_in = 0;
                        this.avail_in = 0;
                        this.total_in = 0;
                        this.output = null;
                        this.next_out = 0;
                        this.avail_out = 0;
                        this.total_out = 0;
                        this.msg = '';
                        this.state = null;
                        this.data_type = 2;
                        this.adler = 0;
                    };
                const Mq = Object.prototype.toString, {
                        Z_NO_FLUSH: MU,
                        Z_SYNC_FLUSH: MB,
                        Z_FULL_FLUSH: S0,
                        Z_FINISH: S1,
                        Z_OK: S2,
                        Z_STREAM_END: S3,
                        Z_DEFAULT_COMPRESSION: S4,
                        Z_DEFAULT_STRATEGY: S5,
                        Z_DEFLATED: S6
                    } = tS;
                function S7(WT) {
                    ;
                    this.options = MN({
                        'level': S4,
                        'method': S6,
                        'chunkSize': 16384,
                        'windowBits': 15,
                        'memLevel': 8,
                        'strategy': S5
                    }, WT || {});
                    let Wj = this.options;
                    Wj.raw && Wj.windowBits > 0 ? Wj.windowBits = -Wj.windowBits : Wj.gzip && Wj.windowBits > 0 && Wj.windowBits < 16 && (Wj.windowBits += 16);
                    this.err = 0;
                    this.msg = '';
                    this.ended = false;
                    this.chunks = [];
                    this.strm = new MF();
                    this.strm.avail_out = 0;
                    let WJ = MI.deflateInit2(this.strm, Wj.level, Wj.method, Wj.windowBits, Wj.memLevel, Wj.strategy);
                    if (WJ !== S2) {
                        throw new Error(tM[WJ]);
                    }
                    if (Wj.header && MI.deflateSetHeader(this.strm, Wj.header), Wj.dictionary) {
                        let WR;
                        if (WR = 'string' == typeof Wj.dictionary ? MX(Wj.dictionary) : '[object ArrayBuffer]' === Mq.call(Wj.dictionary) ? new Uint8Array(Wj.dictionary) : Wj.dictionary, WJ = MI.deflateSetDictionary(this.strm, WR), WJ !== S2) {
                            throw new Error(tM[WJ]);
                        }
                        this['_dict_set'] = true;
                    }
                }
                function S8(WT, Wj) {
                    ;
                    const WJ = new S7(Wj);
                    if (WJ.push(WT, true), WJ.err) {
                        throw WJ.msg || tM[WJ.err];
                    }
                    return WJ.result;
                }
                S7.prototype.push = function (WT, Wj) {
                    ;
                    const WJ = this.strm, WR = this.options.chunkSize;
                    let WL, WA;
                    if (this.ended) {
                        return false;
                    }
                    for (WA = Wj === ~~Wj ? Wj : true === Wj ? S1 : MU, 'string' == typeof WT ? WJ.input = MX(WT) : '[object ArrayBuffer]' === Mq.call(WT) ? WJ.input = new Uint8Array(WT) : WJ.input = WT, WJ.next_in = 0, WJ.avail_in = WJ.input.length;;) {
                        if (0 === WJ.avail_out && (WJ.output = new Uint8Array(WR), WJ.next_out = 0, WJ.avail_out = WR), (WA === MB || WA === S0) && WJ.avail_out <= 6) {
                            this.onData(WJ.output.subarray(0, WJ.next_out));
                            WJ.avail_out = 0;
                        } else {
                            if (WL = MI.deflate(WJ, WA), WL === S3) {
                                return WJ.next_out > 0 && this.onData(WJ.output.subarray(0, WJ.next_out)), WL = MI.deflateEnd(this.strm), this.onEnd(WL), this.ended = true, WL === S2;
                            }
                            if (0 !== WJ.avail_out) {
                                if (WA > 0 && WJ.next_out > 0) {
                                    this.onData(WJ.output.subarray(0, WJ.next_out));
                                    WJ.avail_out = 0;
                                } else {
                                    if (0 === WJ.avail_in) {
                                        break;
                                    }
                                }
                            } else {
                                this.onData(WJ.output);
                            }
                        }
                    }
                    return true;
                };
                S7.prototype.onData = function (WT) {
                    ;
                    this.chunks.push(WT);
                };
                S7.prototype.onEnd = function (WT) {
                    ;
                    WT === S2 && (this.result = MW(this.chunks));
                    this.chunks = [];
                    this.err = WT;
                    this.msg = this.strm.msg;
                };
                var S9 = {
                    'Deflate': S7,
                    'deflate': S8,
                    'deflateRaw': function (WT, Wj) {
                        return (Wj = Wj || {}).raw = true, S8(WT, Wj);
                    },
                    'gzip': function (WT, Wj) {
                        ;
                        return (Wj = Wj || {}).gzip = true, S8(WT, Wj);
                    },
                    'constants': tS
                };
                ;
                var SY = function (WT, Wj) {
                    ;
                    let WJ, WR, WL, WA, WI, WP, WN, WW, WD, WQ, Wk, WX, WG, Wz, WF, Wq, WU, WB, d0, d1, d2, d3, d4, d5;
                    const d6 = WT.state;
                    WJ = WT.next_in;
                    d4 = WT.input;
                    WR = WJ + (WT.avail_in - 5);
                    WL = WT.next_out;
                    d5 = WT.output;
                    WA = WL - (Wj - WT.avail_out);
                    WI = WL + (WT.avail_out - 257);
                    WP = d6.dmax;
                    WN = d6.wsize;
                    WW = d6.whave;
                    WD = d6.wnext;
                    WQ = d6.window;
                    Wk = d6.hold;
                    WX = d6.bits;
                    WG = d6.lencode;
                    Wz = d6.distcode;
                    WF = (1 << d6.lenbits) - 1;
                    Wq = (1 << d6.distbits) - 1;
                    d7:
                        do {
                            if (WX < 15) {
                                Wk += d4[WJ++] << WX;
                                WX += 8;
                                Wk += d4[WJ++] << WX;
                                WX += 8;
                            }
                            WU = WG[Wk & WF];
                            d8:
                                for (;;) {
                                    if (WB = WU >>> 24, Wk >>>= WB, WX -= WB, WB = WU >>> 16 & 255, 0 === WB) {
                                        d5[WL++] = 65535 & WU;
                                    } else {
                                        if (!(16 & WB)) {
                                            if (0 == (64 & WB)) {
                                                WU = WG[(65535 & WU) + (Wk & (1 << WB) - 1)];
                                                continue d8;
                                            }
                                            if (32 & WB) {
                                                d6.mode = 16191;
                                                break d7;
                                            }
                                            WT.msg = 'invalid literal/length code';
                                            d6.mode = 16209;
                                            break d7;
                                        }
                                        d0 = 65535 & WU;
                                        WB &= 15;
                                        WB && (WX < WB && (Wk += d4[WJ++] << WX, WX += 8), d0 += Wk & (1 << WB) - 1, Wk >>>= WB, WX -= WB);
                                        if (WX < 15) {
                                            Wk += d4[WJ++] << WX;
                                            WX += 8;
                                            Wk += d4[WJ++] << WX;
                                            WX += 8;
                                        }
                                        WU = Wz[Wk & Wq];
                                        d9:
                                            for (;;) {
                                                if (WB = WU >>> 24, Wk >>>= WB, WX -= WB, WB = WU >>> 16 & 255, !(16 & WB)) {
                                                    if (0 == (64 & WB)) {
                                                        WU = Wz[(65535 & WU) + (Wk & (1 << WB) - 1)];
                                                        continue d9;
                                                    }
                                                    WT.msg = 'invalid distance code';
                                                    d6.mode = 16209;
                                                    break d7;
                                                }
                                                if (d1 = 65535 & WU, WB &= 15, WX < WB && (Wk += d4[WJ++] << WX, WX += 8, WX < WB && (Wk += d4[WJ++] << WX, WX += 8)), d1 += Wk & (1 << WB) - 1, d1 > WP) {
                                                    WT.msg = 'invalid distance too far back';
                                                    d6.mode = 16209;
                                                    break d7;
                                                }
                                                if (Wk >>>= WB, WX -= WB, WB = WL - WA, d1 > WB) {
                                                    if (WB = d1 - WB, WB > WW && d6.sane) {
                                                        WT.msg = 'invalid distance too far back';
                                                        d6.mode = 16209;
                                                        break d7;
                                                    }
                                                    if (d2 = 0, d3 = WQ, 0 === WD) {
                                                        if (d2 += WN - WB, WB < d0) {
                                                            d0 -= WB;
                                                            do {
                                                                d5[WL++] = WQ[d2++];
                                                            } while (--WB);
                                                            d2 = WL - d1;
                                                            d3 = d5;
                                                        }
                                                    } else {
                                                        if (WD < WB) {
                                                            if (d2 += WN + WD - WB, WB -= WD, WB < d0) {
                                                                d0 -= WB;
                                                                do {
                                                                    d5[WL++] = WQ[d2++];
                                                                } while (--WB);
                                                                if (d2 = 0, WD < d0) {
                                                                    WB = WD;
                                                                    d0 -= WB;
                                                                    do {
                                                                        d5[WL++] = WQ[d2++];
                                                                    } while (--WB);
                                                                    d2 = WL - d1;
                                                                    d3 = d5;
                                                                }
                                                            }
                                                        } else {
                                                            if (d2 += WD - WB, WB < d0) {
                                                                d0 -= WB;
                                                                do {
                                                                    d5[WL++] = WQ[d2++];
                                                                } while (--WB);
                                                                d2 = WL - d1;
                                                                d3 = d5;
                                                            }
                                                        }
                                                    }
                                                    for (; d0 > 2;) {
                                                        d5[WL++] = d3[d2++];
                                                        d5[WL++] = d3[d2++];
                                                        d5[WL++] = d3[d2++];
                                                        d0 -= 3;
                                                    }
                                                    d0 && (d5[WL++] = d3[d2++], d0 > 1 && (d5[WL++] = d3[d2++]));
                                                } else {
                                                    d2 = WL - d1;
                                                    do {
                                                        d5[WL++] = d5[d2++];
                                                        d5[WL++] = d5[d2++];
                                                        d5[WL++] = d5[d2++];
                                                        d0 -= 3;
                                                    } while (d0 > 2);
                                                    d0 && (d5[WL++] = d5[d2++], d0 > 1 && (d5[WL++] = d5[d2++]));
                                                }
                                                break;
                                            }
                                    }
                                    break;
                                }
                        } while (WJ < WR && WL < WI);
                    d0 = WX >> 3;
                    WJ -= d0;
                    WX -= d0 << 3;
                    Wk &= (1 << WX) - 1;
                    WT.next_in = WJ;
                    WT.next_out = WL;
                    WT.avail_in = WJ < WR ? WR - WJ + 5 : 5 - (WJ - WR);
                    WT.avail_out = WL < WI ? WI - WL + 257 : 257 - (WL - WI);
                    d6.hold = Wk;
                    d6.bits = WX;
                };
                const SS = new Uint16Array([
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        13,
                        15,
                        17,
                        19,
                        23,
                        27,
                        31,
                        35,
                        43,
                        51,
                        59,
                        67,
                        83,
                        99,
                        115,
                        131,
                        163,
                        195,
                        227,
                        258,
                        0,
                        0
                    ]), SK = new Uint8Array([
                        16,
                        16,
                        16,
                        16,
                        16,
                        16,
                        16,
                        16,
                        17,
                        17,
                        17,
                        17,
                        18,
                        18,
                        18,
                        18,
                        19,
                        19,
                        19,
                        19,
                        20,
                        20,
                        20,
                        20,
                        21,
                        21,
                        21,
                        21,
                        16,
                        72,
                        78
                    ]), SC = new Uint16Array([
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        9,
                        13,
                        17,
                        25,
                        33,
                        49,
                        65,
                        97,
                        129,
                        193,
                        257,
                        385,
                        513,
                        769,
                        1025,
                        1537,
                        2049,
                        3073,
                        4097,
                        6145,
                        8193,
                        12289,
                        16385,
                        24577,
                        0,
                        0
                    ]), SE = new Uint8Array([
                        16,
                        16,
                        16,
                        16,
                        17,
                        17,
                        18,
                        18,
                        19,
                        19,
                        20,
                        20,
                        21,
                        21,
                        22,
                        22,
                        23,
                        23,
                        24,
                        24,
                        25,
                        25,
                        26,
                        26,
                        27,
                        27,
                        28,
                        28,
                        29,
                        29,
                        64,
                        64
                    ]);
                var SH = (WT, Wj, WJ, WR, WL, WA, WI, WP) => {
                    ;
                    const WN = WP.bits;
                    let WW, WD, WQ, Wk, WX, WG, Wz = 0, WF = 0, Wq = 0, WU = 0, WB = 0, d0 = 0, d1 = 0, d2 = 0, d3 = 0, d4 = 0, d5 = null;
                    const d6 = new Uint16Array(16), d7 = new Uint16Array(16);
                    let d8, d9, dO, dY = null;
                    for (Wz = 0; Wz <= 15; Wz++) {
                        d6[Wz] = 0;
                    }
                    for (WF = 0; WF < WR; WF++) {
                        d6[Wj[WJ + WF]]++;
                    }
                    for (WB = WN, WU = 15; WU >= 1 && 0 === d6[WU]; WU--) {
                        ;
                    }
                    if (WB > WU && (WB = WU), 0 === WU) {
                        return WL[WA++] = 20971520, WL[WA++] = 20971520, WP.bits = 1, 0;
                    }
                    for (Wq = 1; Wq < WU && 0 === d6[Wq]; Wq++) {
                        ;
                    }
                    for (WB < Wq && (WB = Wq), d2 = 1, Wz = 1; Wz <= 15; Wz++) {
                        if (d2 <<= 1, d2 -= d6[Wz], d2 < 0) {
                            return -1;
                        }
                    }
                    if (d2 > 0 && (0 === WT || 1 !== WU)) {
                        return -1;
                    }
                    for (d7[1] = 0, Wz = 1; Wz < 15; Wz++) {
                        d7[Wz + 1] = d7[Wz] + d6[Wz];
                    }
                    for (WF = 0; WF < WR; WF++) {
                        0 !== Wj[WJ + WF] && (WI[d7[Wj[WJ + WF]]++] = WF);
                    }
                    if (0 === WT ? (d5 = dY = WI, WG = 20) : 1 === WT ? (d5 = SS, dY = SK, WG = 257) : (d5 = SC, dY = SE, WG = 0), d4 = 0, WF = 0, Wz = Wq, WX = WA, d0 = WB, d1 = 0, WQ = -1, d3 = 1 << WB, Wk = d3 - 1, 1 === WT && d3 > 852 || 2 === WT && d3 > 592) {
                        return 1;
                    }
                    for (;;) {
                        d8 = Wz - d1;
                        WI[WF] + 1 < WG ? (d9 = 0, dO = WI[WF]) : WI[WF] >= WG ? (d9 = dY[WI[WF] - WG], dO = d5[WI[WF] - WG]) : (d9 = 96, dO = 0);
                        WW = 1 << Wz - d1;
                        WD = 1 << d0;
                        Wq = WD;
                        do {
                            WD -= WW;
                            WL[WX + (d4 >> d1) + WD] = d8 << 24 | d9 << 16 | dO | 0;
                        } while (0 !== WD);
                        for (WW = 1 << Wz - 1; d4 & WW;) {
                            WW >>= 1;
                        }
                        if (0 !== WW ? (d4 &= WW - 1, d4 += WW) : d4 = 0, WF++, 0 == --d6[Wz]) {
                            if (Wz === WU) {
                                break;
                            }
                            Wz = Wj[WJ + WI[WF]];
                        }
                        if (Wz > WB && (d4 & Wk) !== WQ) {
                            for (0 === d1 && (d1 = WB), WX += Wq, d0 = Wz - d1, d2 = 1 << d0; d0 + d1 < WU && (d2 -= d6[d0 + d1], !(d2 <= 0));) {
                                d0++;
                                d2 <<= 1;
                            }
                            if (d3 += 1 << d0, 1 === WT && d3 > 852 || 2 === WT && d3 > 592) {
                                return 1;
                            }
                            WQ = d4 & Wk;
                            WL[WQ] = WB << 24 | d0 << 16 | WX - WA | 0;
                        }
                    }
                    return 0 !== d4 && (WL[WX + d4] = Wz - d1 << 24 | 64 << 16 | 0), WP.bits = WB, 0;
                };
                const {
                        Z_FINISH: SZ,
                        Z_BLOCK: SV,
                        Z_TREES: ST,
                        Z_OK: Sj,
                        Z_STREAM_END: SJ,
                        Z_NEED_DICT: SR,
                        Z_STREAM_ERROR: SL,
                        Z_DATA_ERROR: SA,
                        Z_MEM_ERROR: SI,
                        Z_BUF_ERROR: SP,
                        Z_DEFLATED: SN
                    } = tS, SB = WT => (WT >>> 24 & 255) + (WT >>> 8 & 65280) + ((65280 & WT) << 8) + ((255 & WT) << 24);
                function K0() {
                    ;
                    this.strm = null;
                    this.mode = 0;
                    this.last = false;
                    this.wrap = 0;
                    this.havedict = false;
                    this.flags = 0;
                    this.dmax = 0;
                    this.check = 0;
                    this.total = 0;
                    this.head = null;
                    this.wbits = 0;
                    this.wsize = 0;
                    this.whave = 0;
                    this.wnext = 0;
                    this.window = null;
                    this.hold = 0;
                    this.bits = 0;
                    this.length = 0;
                    this.offset = 0;
                    this.extra = 0;
                    this.lencode = null;
                    this.distcode = null;
                    this.lenbits = 0;
                    this.distbits = 0;
                    this.ncode = 0;
                    this.nlen = 0;
                    this.ndist = 0;
                    this.have = 0;
                    this.next = null;
                    this.lens = new Uint16Array(320);
                    this.work = new Uint16Array(288);
                    this.lendyn = null;
                    this.distdyn = null;
                    this.sane = 0;
                    this.back = 0;
                    this.was = 0;
                }
                const K1 = WT => {
                        ;
                        if (!WT) {
                            return 1;
                        }
                        const Wj = WT.state;
                        return !Wj || Wj.strm !== WT || Wj.mode < 16180 || Wj.mode > 16211 ? 1 : 0;
                    }, K2 = WT => {
                        ;
                        if (K1(WT)) {
                            return SL;
                        }
                        const Wj = WT.state;
                        return WT.total_in = WT.total_out = Wj.total = 0, WT.msg = '', Wj.wrap && (WT.adler = 1 & Wj.wrap), Wj.mode = 16180, Wj.last = 0, Wj.havedict = 0, Wj.flags = -1, Wj.dmax = 32768, Wj.head = null, Wj.hold = 0, Wj.bits = 0, Wj.lencode = Wj.lendyn = new Int32Array(852), Wj.distcode = Wj.distdyn = new Int32Array(592), Wj.sane = 1, Wj.back = -1, Sj;
                    }, K3 = WT => {
                        ;
                        if (K1(WT)) {
                            return SL;
                        }
                        const Wj = WT.state;
                        return Wj.wsize = 0, Wj.whave = 0, Wj.wnext = 0, K2(WT);
                    }, K4 = (WT, Wj) => {
                        ;
                        let WJ;
                        if (K1(WT)) {
                            return SL;
                        }
                        const WR = WT.state;
                        return Wj < 0 ? (WJ = 0, Wj = -Wj) : (WJ = 5 + (Wj >> 4), Wj < 48 && (Wj &= 15)), Wj && (Wj < 8 || Wj > 15) ? SL : (null !== WR.window && WR.wbits !== Wj && (WR.window = null), WR.wrap = WJ, WR.wbits = Wj, K3(WT));
                    }, K5 = (WT, Wj) => {
                        ;
                        if (!WT) {
                            return SL;
                        }
                        const WJ = new K0();
                        WT.state = WJ;
                        WJ.strm = WT;
                        WJ.window = null;
                        WJ.mode = 16180;
                        const WR = K4(WT, Wj);
                        return WR !== Sj && (WT.state = null), WR;
                    };
                let K6, K7, K8 = true;
                const K9 = WT => {
                        ;
                        if (K8) {
                            K6 = new Int32Array(512);
                            K7 = new Int32Array(32);
                            let Wj = 0;
                            for (; Wj < 144;) {
                                WT.lens[Wj++] = 8;
                            }
                            for (; Wj < 256;) {
                                WT.lens[Wj++] = 9;
                            }
                            for (; Wj < 280;) {
                                WT.lens[Wj++] = 7;
                            }
                            for (; Wj < 288;) {
                                WT.lens[Wj++] = 8;
                            }
                            for (SH(1, WT.lens, 0, 288, K6, 0, WT.work, { 'bits': 9 }), Wj = 0; Wj < 32;) {
                                WT.lens[Wj++] = 5;
                            }
                            SH(2, WT.lens, 0, 32, K7, 0, WT.work, { 'bits': 5 });
                            K8 = false;
                        }
                        WT.lencode = K6;
                        WT.lenbits = 9;
                        WT.distcode = K7;
                        WT.distbits = 5;
                    }, KO = (WT, Wj, WJ, WR) => {
                        ;
                        let WL;
                        const WA = WT.state;
                        return null === WA.window && (WA.wsize = 1 << WA.wbits, WA.wnext = 0, WA.whave = 0, WA.window = new Uint8Array(WA.wsize)), WR >= WA.wsize ? (WA.window.set(Wj.subarray(WJ - WA.wsize, WJ), 0), WA.wnext = 0, WA.whave = WA.wsize) : (WL = WA.wsize - WA.wnext, WL > WR && (WL = WR), WA.window.set(Wj.subarray(WJ - WR, WJ - WR + WL), WA.wnext), (WR -= WL) ? (WA.window.set(Wj.subarray(WJ - WR, WJ), 0), WA.wnext = WR, WA.whave = WA.wsize) : (WA.wnext += WL, WA.wnext === WA.wsize && (WA.wnext = 0), WA.whave < WA.wsize && (WA.whave += WL))), 0;
                    };
                var KY = (WT, Wj) => {
                        ;
                        let WJ, WR, WL, WA, WI, WP, WN, WW, WD, WQ, Wk, WX, WG, Wz, WF, Wq, WU, WB, d0, d1, d2, d3, d4 = 0;
                        const d5 = new Uint8Array(4);
                        let d6, d7;
                        const d8 = new Uint8Array([
                            16,
                            17,
                            18,
                            0,
                            8,
                            7,
                            9,
                            6,
                            10,
                            5,
                            11,
                            4,
                            12,
                            3,
                            13,
                            2,
                            14,
                            1,
                            15
                        ]);
                        if (K1(WT) || !WT.output || !WT.input && 0 !== WT.avail_in) {
                            return SL;
                        }
                        WJ = WT.state;
                        WJ.mode === 16191 && (WJ.mode = 16192);
                        WI = WT.next_out;
                        WL = WT.output;
                        WN = WT.avail_out;
                        WA = WT.next_in;
                        WR = WT.input;
                        WP = WT.avail_in;
                        WW = WJ.hold;
                        WD = WJ.bits;
                        WQ = WP;
                        Wk = WN;
                        d3 = Sj;
                        d9:
                            for (;;) {
                                switch (WJ.mode) {
                                case 16180:
                                    if (0 === WJ.wrap) {
                                        WJ.mode = 16192;
                                        break;
                                    }
                                    for (; WD < 16;) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WP--;
                                        WW += WR[WA++] << WD;
                                        WD += 8;
                                    }
                                    if (2 & WJ.wrap && 35615 === WW) {
                                        0 === WJ.wbits && (WJ.wbits = 15);
                                        WJ.check = 0;
                                        d5[0] = 255 & WW;
                                        d5[1] = WW >>> 8 & 255;
                                        WJ.check = tY(WJ.check, d5, 2, 0);
                                        WW = 0;
                                        WD = 0;
                                        WJ.mode = 16181;
                                        break;
                                    }
                                    if (WJ.head && (WJ.head.done = false), !(1 & WJ.wrap) || (((255 & WW) << 8) + (WW >> 8)) % 31) {
                                        WT.msg = 'incorrect header check';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    if ((15 & WW) !== SN) {
                                        WT.msg = 'unknown compression method';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    if (WW >>>= 4, WD -= 4, d2 = 8 + (15 & WW), 0 === WJ.wbits && (WJ.wbits = d2), d2 > 15 || d2 > WJ.wbits) {
                                        WT.msg = 'invalid window size';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    WJ.dmax = 1 << WJ.wbits, WJ.flags = 0, WT.adler = WJ.check = 1, WJ.mode = 512 & WW ? 16189 : 16191, WW = 0, WD = 0;
                                    break;
                                case 16181:
                                    for (; WD < 16;) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WP--;
                                        WW += WR[WA++] << WD;
                                        WD += 8;
                                    }
                                    if (WJ.flags = WW, (255 & WJ.flags) !== SN) {
                                        WT.msg = 'unknown compression method';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    if (57344 & WJ.flags) {
                                        WT.msg = 'unknown header flags set';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    WJ.head && (WJ.head.text = WW >> 8 & 1), 512 & WJ.flags && 4 & WJ.wrap && (d5[0] = 255 & WW, d5[1] = WW >>> 8 & 255, WJ.check = tY(WJ.check, d5, 2, 0)), WW = 0, WD = 0, WJ.mode = 16182;
                                case 16182:
                                    for (; WD < 32;) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WP--;
                                        WW += WR[WA++] << WD;
                                        WD += 8;
                                    }
                                    WJ.head && (WJ.head.time = WW), 512 & WJ.flags && 4 & WJ.wrap && (d5[0] = 255 & WW, d5[1] = WW >>> 8 & 255, d5[2] = WW >>> 16 & 255, d5[3] = WW >>> 24 & 255, WJ.check = tY(WJ.check, d5, 4, 0)), WW = 0, WD = 0, WJ.mode = 16183;
                                case 16183:
                                    for (; WD < 16;) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WP--;
                                        WW += WR[WA++] << WD;
                                        WD += 8;
                                    }
                                    WJ.head && (WJ.head.xflags = 255 & WW, WJ.head.os = WW >> 8), 512 & WJ.flags && 4 & WJ.wrap && (d5[0] = 255 & WW, d5[1] = WW >>> 8 & 255, WJ.check = tY(WJ.check, d5, 2, 0)), WW = 0, WD = 0, WJ.mode = 16184;
                                case 16184:
                                    if (1024 & WJ.flags) {
                                        for (; WD < 16;) {
                                            if (0 === WP) {
                                                break d9;
                                            }
                                            WP--;
                                            WW += WR[WA++] << WD;
                                            WD += 8;
                                        }
                                        WJ.length = WW;
                                        WJ.head && (WJ.head.extra_len = WW);
                                        512 & WJ.flags && 4 & WJ.wrap && (d5[0] = 255 & WW, d5[1] = WW >>> 8 & 255, WJ.check = tY(WJ.check, d5, 2, 0));
                                        WW = 0;
                                        WD = 0;
                                    } else {
                                        WJ.head && (WJ.head.extra = null);
                                    }
                                    WJ.mode = 16185;
                                case 16185:
                                    if (1024 & WJ.flags && (WX = WJ.length, WX > WP && (WX = WP), WX && (WJ.head && (d2 = WJ.head.extra_len - WJ.length, WJ.head.extra || (WJ.head.extra = new Uint8Array(WJ.head.extra_len)), WJ.head.extra.set(WR.subarray(WA, WA + WX), d2)), 512 & WJ.flags && 4 & WJ.wrap && (WJ.check = tY(WJ.check, WR, WX, WA)), WP -= WX, WA += WX, WJ.length -= WX), WJ.length)) {
                                        break d9;
                                    }
                                    WJ.length = 0, WJ.mode = 16186;
                                case 16186:
                                    if (2048 & WJ.flags) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WX = 0;
                                        do {
                                            d2 = WR[WA + WX++];
                                            WJ.head && d2 && WJ.length < 65536 && (WJ.head.name += String.fromCharCode(d2));
                                        } while (d2 && WX < WP);
                                        if (512 & WJ.flags && 4 & WJ.wrap && (WJ.check = tY(WJ.check, WR, WX, WA)), WP -= WX, WA += WX, d2) {
                                            break d9;
                                        }
                                    } else {
                                        WJ.head && (WJ.head.name = null);
                                    }
                                    WJ.length = 0, WJ.mode = 16187;
                                case 16187:
                                    if (4096 & WJ.flags) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WX = 0;
                                        do {
                                            d2 = WR[WA + WX++];
                                            WJ.head && d2 && WJ.length < 65536 && (WJ.head.comment += String.fromCharCode(d2));
                                        } while (d2 && WX < WP);
                                        if (512 & WJ.flags && 4 & WJ.wrap && (WJ.check = tY(WJ.check, WR, WX, WA)), WP -= WX, WA += WX, d2) {
                                            break d9;
                                        }
                                    } else {
                                        WJ.head && (WJ.head.comment = null);
                                    }
                                    WJ.mode = 16188;
                                case 16188:
                                    if (512 & WJ.flags) {
                                        for (; WD < 16;) {
                                            if (0 === WP) {
                                                break d9;
                                            }
                                            WP--;
                                            WW += WR[WA++] << WD;
                                            WD += 8;
                                        }
                                        if (4 & WJ.wrap && WW !== (65535 & WJ.check)) {
                                            WT.msg = 'header crc mismatch';
                                            WJ.mode = 16209;
                                            break;
                                        }
                                        WW = 0;
                                        WD = 0;
                                    }
                                    WJ.head && (WJ.head.hcrc = WJ.flags >> 9 & 1, WJ.head.done = true), WT.adler = WJ.check = 0, WJ.mode = 16191;
                                    break;
                                case 16189:
                                    for (; WD < 32;) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WP--;
                                        WW += WR[WA++] << WD;
                                        WD += 8;
                                    }
                                    WT.adler = WJ.check = SB(WW), WW = 0, WD = 0, WJ.mode = 16190;
                                case 16190:
                                    if (0 === WJ.havedict) {
                                        return WT.next_out = WI, WT.avail_out = WN, WT.next_in = WA, WT.avail_in = WP, WJ.hold = WW, WJ.bits = WD, SR;
                                    }
                                    WT.adler = WJ.check = 1, WJ.mode = 16191;
                                case 16191:
                                    if (Wj === SV || Wj === ST) {
                                        break d9;
                                    }
                                case 16192:
                                    if (WJ.last) {
                                        WW >>>= 7 & WD;
                                        WD -= 7 & WD;
                                        WJ.mode = 16206;
                                        break;
                                    }
                                    for (; WD < 3;) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WP--;
                                        WW += WR[WA++] << WD;
                                        WD += 8;
                                    }
                                    switch (WJ.last = 1 & WW, WW >>>= 1, WD -= 1, 3 & WW) {
                                    case 0:
                                        WJ.mode = 16193;
                                        break;
                                    case 1:
                                        if (K9(WJ), WJ.mode = 16199, Wj === ST) {
                                            WW >>>= 2;
                                            WD -= 2;
                                            break d9;
                                        }
                                        break;
                                    case 2:
                                        WJ.mode = 16196;
                                        break;
                                    case 3:
                                        WT.msg = 'invalid block type', WJ.mode = 16209;
                                    }
                                    WW >>>= 2, WD -= 2;
                                    break;
                                case 16193:
                                    for (WW >>>= 7 & WD, WD -= 7 & WD; WD < 32;) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WP--;
                                        WW += WR[WA++] << WD;
                                        WD += 8;
                                    }
                                    if ((65535 & WW) != (WW >>> 16 ^ 65535)) {
                                        WT.msg = 'invalid stored block lengths';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    if (WJ.length = 65535 & WW, WW = 0, WD = 0, WJ.mode = 16194, Wj === ST) {
                                        break d9;
                                    }
                                case 16194:
                                    WJ.mode = 16195;
                                case 16195:
                                    if (WX = WJ.length, WX) {
                                        if (WX > WP && (WX = WP), WX > WN && (WX = WN), 0 === WX) {
                                            break d9;
                                        }
                                        WL.set(WR.subarray(WA, WA + WX), WI);
                                        WP -= WX;
                                        WA += WX;
                                        WN -= WX;
                                        WI += WX;
                                        WJ.length -= WX;
                                        break;
                                    }
                                    WJ.mode = 16191;
                                    break;
                                case 16196:
                                    for (; WD < 14;) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WP--;
                                        WW += WR[WA++] << WD;
                                        WD += 8;
                                    }
                                    if (WJ.nlen = 257 + (31 & WW), WW >>>= 5, WD -= 5, WJ.ndist = 1 + (31 & WW), WW >>>= 5, WD -= 5, WJ.ncode = 4 + (15 & WW), WW >>>= 4, WD -= 4, WJ.nlen > 286 || WJ.ndist > 30) {
                                        WT.msg = 'too many length or distance symbols';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    WJ.have = 0, WJ.mode = 16197;
                                case 16197:
                                    for (; WJ.have < WJ.ncode;) {
                                        for (; WD < 3;) {
                                            if (0 === WP) {
                                                break d9;
                                            }
                                            WP--;
                                            WW += WR[WA++] << WD;
                                            WD += 8;
                                        }
                                        WJ.lens[d8[WJ.have++]] = 7 & WW;
                                        WW >>>= 3;
                                        WD -= 3;
                                    }
                                    for (; WJ.have < 19;) {
                                        WJ.lens[d8[WJ.have++]] = 0;
                                    }
                                    if (WJ.lencode = WJ.lendyn, WJ.lenbits = 7, d6 = { 'bits': WJ.lenbits }, d3 = SH(0, WJ.lens, 0, 19, WJ.lencode, 0, WJ.work, d6), WJ.lenbits = d6.bits, d3) {
                                        WT.msg = 'invalid code lengths set';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    WJ.have = 0, WJ.mode = 16198;
                                case 16198:
                                    for (; WJ.have < WJ.nlen + WJ.ndist;) {
                                        for (; d4 = WJ.lencode[WW & (1 << WJ.lenbits) - 1], WF = d4 >>> 24, Wq = d4 >>> 16 & 255, WU = 65535 & d4, !(WF <= WD);) {
                                            if (0 === WP) {
                                                break d9;
                                            }
                                            WP--;
                                            WW += WR[WA++] << WD;
                                            WD += 8;
                                        }
                                        if (WU < 16) {
                                            WW >>>= WF;
                                            WD -= WF;
                                            WJ.lens[WJ.have++] = WU;
                                        } else {
                                            if (16 === WU) {
                                                for (d7 = WF + 2; WD < d7;) {
                                                    if (0 === WP) {
                                                        break d9;
                                                    }
                                                    WP--;
                                                    WW += WR[WA++] << WD;
                                                    WD += 8;
                                                }
                                                if (WW >>>= WF, WD -= WF, 0 === WJ.have) {
                                                    WT.msg = 'invalid bit length repeat';
                                                    WJ.mode = 16209;
                                                    break;
                                                }
                                                d2 = WJ.lens[WJ.have - 1];
                                                WX = 3 + (3 & WW);
                                                WW >>>= 2;
                                                WD -= 2;
                                            } else {
                                                if (17 === WU) {
                                                    for (d7 = WF + 3; WD < d7;) {
                                                        if (0 === WP) {
                                                            break d9;
                                                        }
                                                        WP--;
                                                        WW += WR[WA++] << WD;
                                                        WD += 8;
                                                    }
                                                    WW >>>= WF;
                                                    WD -= WF;
                                                    d2 = 0;
                                                    WX = 3 + (7 & WW);
                                                    WW >>>= 3;
                                                    WD -= 3;
                                                } else {
                                                    for (d7 = WF + 7; WD < d7;) {
                                                        if (0 === WP) {
                                                            break d9;
                                                        }
                                                        WP--;
                                                        WW += WR[WA++] << WD;
                                                        WD += 8;
                                                    }
                                                    WW >>>= WF;
                                                    WD -= WF;
                                                    d2 = 0;
                                                    WX = 11 + (127 & WW);
                                                    WW >>>= 7;
                                                    WD -= 7;
                                                }
                                            }
                                            if (WJ.have + WX > WJ.nlen + WJ.ndist) {
                                                WT.msg = 'invalid bit length repeat';
                                                WJ.mode = 16209;
                                                break;
                                            }
                                            for (; WX--;) {
                                                WJ.lens[WJ.have++] = d2;
                                            }
                                        }
                                    }
                                    if (WJ.mode === 16209) {
                                        break;
                                    }
                                    if (0 === WJ.lens[256]) {
                                        WT.msg = 'invalid code -- missing end-of-block';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    if (WJ.lenbits = 9, d6 = { 'bits': WJ.lenbits }, d3 = SH(1, WJ.lens, 0, WJ.nlen, WJ.lencode, 0, WJ.work, d6), WJ.lenbits = d6.bits, d3) {
                                        WT.msg = 'invalid literal/lengths set';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    if (WJ.distbits = 6, WJ.distcode = WJ.distdyn, d6 = { 'bits': WJ.distbits }, d3 = SH(2, WJ.lens, WJ.nlen, WJ.ndist, WJ.distcode, 0, WJ.work, d6), WJ.distbits = d6.bits, d3) {
                                        WT.msg = 'invalid distances set';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    if (WJ.mode = 16199, Wj === ST) {
                                        break d9;
                                    }
                                case 16199:
                                    WJ.mode = 16200;
                                case 16200:
                                    if (WP >= 6 && WN >= 258) {
                                        WT.next_out = WI;
                                        WT.avail_out = WN;
                                        WT.next_in = WA;
                                        WT.avail_in = WP;
                                        WJ.hold = WW;
                                        WJ.bits = WD;
                                        SY(WT, Wk);
                                        WI = WT.next_out;
                                        WL = WT.output;
                                        WN = WT.avail_out;
                                        WA = WT.next_in;
                                        WR = WT.input;
                                        WP = WT.avail_in;
                                        WW = WJ.hold;
                                        WD = WJ.bits;
                                        WJ.mode === 16191 && (WJ.back = -1);
                                        break;
                                    }
                                    for (WJ.back = 0; d4 = WJ.lencode[WW & (1 << WJ.lenbits) - 1], WF = d4 >>> 24, Wq = d4 >>> 16 & 255, WU = 65535 & d4, !(WF <= WD);) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WP--;
                                        WW += WR[WA++] << WD;
                                        WD += 8;
                                    }
                                    if (Wq && 0 == (240 & Wq)) {
                                        for (WB = WF, d0 = Wq, d1 = WU; d4 = WJ.lencode[d1 + ((WW & (1 << WB + d0) - 1) >> WB)], WF = d4 >>> 24, Wq = d4 >>> 16 & 255, WU = 65535 & d4, !(WB + WF <= WD);) {
                                            if (0 === WP) {
                                                break d9;
                                            }
                                            WP--;
                                            WW += WR[WA++] << WD;
                                            WD += 8;
                                        }
                                        WW >>>= WB;
                                        WD -= WB;
                                        WJ.back += WB;
                                    }
                                    if (WW >>>= WF, WD -= WF, WJ.back += WF, WJ.length = WU, 0 === Wq) {
                                        WJ.mode = 16205;
                                        break;
                                    }
                                    if (32 & Wq) {
                                        WJ.back = -1;
                                        WJ.mode = 16191;
                                        break;
                                    }
                                    if (64 & Wq) {
                                        WT.msg = 'invalid literal/length code';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    WJ.extra = 15 & Wq, WJ.mode = 16201;
                                case 16201:
                                    if (WJ.extra) {
                                        for (d7 = WJ.extra; WD < d7;) {
                                            if (0 === WP) {
                                                break d9;
                                            }
                                            WP--;
                                            WW += WR[WA++] << WD;
                                            WD += 8;
                                        }
                                        WJ.length += WW & (1 << WJ.extra) - 1;
                                        WW >>>= WJ.extra;
                                        WD -= WJ.extra;
                                        WJ.back += WJ.extra;
                                    }
                                    WJ.was = WJ.length, WJ.mode = 16202;
                                case 16202:
                                    for (; d4 = WJ.distcode[WW & (1 << WJ.distbits) - 1], WF = d4 >>> 24, Wq = d4 >>> 16 & 255, WU = 65535 & d4, !(WF <= WD);) {
                                        if (0 === WP) {
                                            break d9;
                                        }
                                        WP--;
                                        WW += WR[WA++] << WD;
                                        WD += 8;
                                    }
                                    if (0 == (240 & Wq)) {
                                        for (WB = WF, d0 = Wq, d1 = WU; d4 = WJ.distcode[d1 + ((WW & (1 << WB + d0) - 1) >> WB)], WF = d4 >>> 24, Wq = d4 >>> 16 & 255, WU = 65535 & d4, !(WB + WF <= WD);) {
                                            if (0 === WP) {
                                                break d9;
                                            }
                                            WP--;
                                            WW += WR[WA++] << WD;
                                            WD += 8;
                                        }
                                        WW >>>= WB;
                                        WD -= WB;
                                        WJ.back += WB;
                                    }
                                    if (WW >>>= WF, WD -= WF, WJ.back += WF, 64 & Wq) {
                                        WT.msg = 'invalid distance code';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    WJ.offset = WU, WJ.extra = 15 & Wq, WJ.mode = 16203;
                                case 16203:
                                    if (WJ.extra) {
                                        for (d7 = WJ.extra; WD < d7;) {
                                            if (0 === WP) {
                                                break d9;
                                            }
                                            WP--;
                                            WW += WR[WA++] << WD;
                                            WD += 8;
                                        }
                                        WJ.offset += WW & (1 << WJ.extra) - 1;
                                        WW >>>= WJ.extra;
                                        WD -= WJ.extra;
                                        WJ.back += WJ.extra;
                                    }
                                    if (WJ.offset > WJ.dmax) {
                                        WT.msg = 'invalid distance too far back';
                                        WJ.mode = 16209;
                                        break;
                                    }
                                    WJ.mode = 16204;
                                case 16204:
                                    if (0 === WN) {
                                        break d9;
                                    }
                                    if (WX = Wk - WN, WJ.offset > WX) {
                                        if (WX = WJ.offset - WX, WX > WJ.whave && WJ.sane) {
                                            WT.msg = 'invalid distance too far back';
                                            WJ.mode = 16209;
                                            break;
                                        }
                                        WX > WJ.wnext ? (WX -= WJ.wnext, WG = WJ.wsize - WX) : WG = WJ.wnext - WX;
                                        WX > WJ.length && (WX = WJ.length);
                                        Wz = WJ.window;
                                    } else {
                                        Wz = WL;
                                        WG = WI - WJ.offset;
                                        WX = WJ.length;
                                    }
                                    WX > WN && (WX = WN), WN -= WX, WJ.length -= WX;
                                    do {
                                        WL[WI++] = Wz[WG++];
                                    } while (--WX);
                                    0 === WJ.length && (WJ.mode = 16200);
                                    break;
                                case 16205:
                                    if (0 === WN) {
                                        break d9;
                                    }
                                    WL[WI++] = WJ.length, WN--, WJ.mode = 16200;
                                    break;
                                case 16206:
                                    if (WJ.wrap) {
                                        for (; WD < 32;) {
                                            if (0 === WP) {
                                                break d9;
                                            }
                                            WP--;
                                            WW |= WR[WA++] << WD;
                                            WD += 8;
                                        }
                                        if (Wk -= WN, WT.total_out += Wk, WJ.total += Wk, 4 & WJ.wrap && Wk && (WT.adler = WJ.check = WJ.flags ? tY(WJ.check, WL, Wk, WI - Wk) : t9(WJ.check, WL, Wk, WI - Wk)), Wk = WN, 4 & WJ.wrap && (WJ.flags ? WW : SB(WW)) !== WJ.check) {
                                            WT.msg = 'incorrect data check';
                                            WJ.mode = 16209;
                                            break;
                                        }
                                        WW = 0;
                                        WD = 0;
                                    }
                                    WJ.mode = 16207;
                                case 16207:
                                    if (WJ.wrap && WJ.flags) {
                                        for (; WD < 32;) {
                                            if (0 === WP) {
                                                break d9;
                                            }
                                            WP--;
                                            WW += WR[WA++] << WD;
                                            WD += 8;
                                        }
                                        if (4 & WJ.wrap && WW !== (4294967295 & WJ.total)) {
                                            WT.msg = 'incorrect length check';
                                            WJ.mode = 16209;
                                            break;
                                        }
                                        WW = 0;
                                        WD = 0;
                                    }
                                    WJ.mode = 16208;
                                case 16208:
                                    d3 = SJ;
                                    break d9;
                                case 16209:
                                    d3 = SA;
                                    break d9;
                                case 16210:
                                    return SI;
                                default:
                                    return SL;
                                }
                            }
                        return WT.next_out = WI, WT.avail_out = WN, WT.next_in = WA, WT.avail_in = WP, WJ.hold = WW, WJ.bits = WD, (WJ.wsize || Wk !== WT.avail_out && WJ.mode < 16209 && (WJ.mode < 16206 || Wj !== SZ)) && KO(WT, WT.output, WT.next_out, Wk - WT.avail_out), WQ -= WT.avail_in, Wk -= WT.avail_out, WT.total_in += WQ, WT.total_out += Wk, WJ.total += Wk, 4 & WJ.wrap && Wk && (WT.adler = WJ.check = WJ.flags ? tY(WJ.check, WL, Wk, WT.next_out - Wk) : t9(WJ.check, WL, Wk, WT.next_out - Wk)), WT.data_type = WJ.bits + (WJ.last ? 64 : 0) + (WJ.mode === 16191 ? 128 : 0) + (WJ.mode === 16199 || WJ.mode === 16194 ? 256 : 0), (0 === WQ && 0 === Wk || Wj === SZ) && d3 === Sj && (d3 = SP), d3;
                    }, KM = {
                        'inflateReset': K3,
                        'inflateReset2': K4,
                        'inflateResetKeep': K2,
                        'inflateInit': WT => K5(WT, 15),
                        'inflateInit2': K5,
                        'inflate': KY,
                        'inflateEnd': WT => {
                            ;
                            if (K1(WT)) {
                                return SL;
                            }
                            let Wj = WT.state;
                            return Wj.window && (Wj.window = null), WT.state = null, Sj;
                        },
                        'inflateGetHeader': (WT, Wj) => {
                            ;
                            if (K1(WT)) {
                                return SL;
                            }
                            const WJ = WT.state;
                            return 0 == (2 & WJ.wrap) ? SL : (WJ.head = Wj, Wj.done = false, Sj);
                        },
                        'inflateSetDictionary': (WT, Wj) => {
                            ;
                            const WJ = Wj.length;
                            let WR, WL, WA;
                            return K1(WT) ? SL : (WR = WT.state, 0 !== WR.wrap && WR.mode !== 16190 ? SL : WR.mode === 16190 && (WL = 1, WL = t9(WL, Wj, WJ, 0), WL !== WR.check) ? SA : (WA = KO(WT, Wj, WJ, WJ), WA ? (WR.mode = 16210, SI) : (WR.havedict = 1, Sj)));
                        },
                        'inflateInfo': 'pako inflate (from Nodeca project)'
                    }, KS = function () {
                        ;
                        this.text = 0;
                        this.time = 0;
                        this.xflags = 0;
                        this.os = 0;
                        this.extra = null;
                        this.extra_len = 0;
                        this.name = '';
                        this.comment = '';
                        this.hcrc = 0;
                        this.done = false;
                    };
                const KK = Object.prototype.toString, {
                        Z_NO_FLUSH: KC,
                        Z_FINISH: KE,
                        Z_OK: KH,
                        Z_STREAM_END: KZ,
                        Z_NEED_DICT: KV,
                        Z_STREAM_ERROR: KT,
                        Z_DATA_ERROR: Kj,
                        Z_MEM_ERROR: KJ
                    } = tS;
                function KR(WT) {
                    ;
                    this.options = MN({
                        'chunkSize': 65536,
                        'windowBits': 15,
                        'to': ''
                    }, WT || {});
                    const Wj = this.options;
                    Wj.raw && Wj.windowBits >= 0 && Wj.windowBits < 16 && (Wj.windowBits = -Wj.windowBits, 0 === Wj.windowBits && (Wj.windowBits = -15));
                    !(Wj.windowBits >= 0 && Wj.windowBits < 16) || WT && WT.windowBits || (Wj.windowBits += 32);
                    Wj.windowBits > 15 && Wj.windowBits < 48 && 0 == (15 & Wj.windowBits) && (Wj.windowBits |= 15);
                    this.err = 0;
                    this.msg = '';
                    this.ended = false;
                    this.chunks = [];
                    this.strm = new MF();
                    this.strm.avail_out = 0;
                    let WJ = KM.inflateInit2(this.strm, Wj.windowBits);
                    if (WJ !== KH) {
                        throw new Error(tM[WJ]);
                    }
                    if (this.header = new KS(), KM.inflateGetHeader(this.strm, this.header), Wj.dictionary && ('string' == typeof Wj.dictionary ? Wj.dictionary = MX(Wj.dictionary) : '[object ArrayBuffer]' === KK.call(Wj.dictionary) && (Wj.dictionary = new Uint8Array(Wj.dictionary)), Wj.raw && (WJ = KM.inflateSetDictionary(this.strm, Wj.dictionary), WJ !== KH))) {
                        throw new Error(tM[WJ]);
                    }
                }
                function KL(WT, Wj) {
                    ;
                    const WJ = new KR(Wj);
                    if (WJ.push(WT), WJ.err) {
                        throw WJ.msg || tM[WJ.err];
                    }
                    return WJ.result;
                }
                KR.prototype.push = function (WT, Wj) {
                    ;
                    const WJ = this.strm, WR = this.options.chunkSize, WL = this.options.dictionary;
                    let WA, WI, WP;
                    if (this.ended) {
                        return false;
                    }
                    for (WI = Wj === ~~Wj ? Wj : true === Wj ? KE : KC, '[object ArrayBuffer]' === KK.call(WT) ? WJ.input = new Uint8Array(WT) : WJ.input = WT, WJ.next_in = 0, WJ.avail_in = WJ.input.length;;) {
                        for (0 === WJ.avail_out && (WJ.output = new Uint8Array(WR), WJ.next_out = 0, WJ.avail_out = WR), WA = KM.inflate(WJ, WI), WA === KV && WL && (WA = KM.inflateSetDictionary(WJ, WL), WA === KH ? WA = KM.inflate(WJ, WI) : WA === Kj && (WA = KV)); WJ.avail_in > 0 && WA === KZ && WJ.state.wrap > 0 && 0 !== WT[WJ.next_in];) {
                            KM.inflateReset(WJ);
                            WA = KM.inflate(WJ, WI);
                        }
                        switch (WA) {
                        case KT:
                        case Kj:
                        case KV:
                        case KJ:
                            return this.onEnd(WA), this.ended = true, false;
                        }
                        if (WP = WJ.avail_out, WJ.next_out && (0 === WJ.avail_out || WA === KZ)) {
                            if ('string' === this.options.to) {
                                let WN = Mz(WJ.output, WJ.next_out), WW = WJ.next_out - WN, WD = MG(WJ.output, WN);
                                WJ.next_out = WW;
                                WJ.avail_out = WR - WW;
                                WW && WJ.output.set(WJ.output.subarray(WN, WN + WW), 0);
                                this.onData(WD);
                            } else {
                                this.onData(WJ.output.length === WJ.next_out ? WJ.output : WJ.output.subarray(0, WJ.next_out));
                            }
                        }
                        if (WA !== KH || 0 !== WP) {
                            if (WA === KZ) {
                                return WA = KM.inflateEnd(this.strm), this.onEnd(WA), this.ended = true, true;
                            }
                            if (0 === WJ.avail_in) {
                                break;
                            }
                        }
                    }
                    return true;
                };
                KR.prototype.onData = function (WT) {
                    ;
                    this.chunks.push(WT);
                };
                KR.prototype.onEnd = function (WT) {
                    ;
                    WT === KH && ('string' === this.options.to ? this.result = this.chunks.join('') : this.result = MW(this.chunks));
                    this.chunks = [];
                    this.err = WT;
                    this.msg = this.strm.msg;
                };
                var KA = {
                    'Inflate': KR,
                    'inflate': KL,
                    'inflateRaw': function (WT, Wj) {
                        ;
                        return (Wj = Wj || {}).raw = true, KL(WT, Wj);
                    },
                    'ungzip': KL,
                    'constants': tS
                };
                const {
                        Deflate: KI,
                        deflate: KP,
                        deflateRaw: KN,
                        gzip: KW
                    } = S9, {
                        Inflate: KD,
                        inflate: KQ,
                        inflateRaw: Kk,
                        ungzip: KX
                    } = KA;
                var KG = KP, Kz = KQ, KF = {
                        'c': [
                            {
                                'value': 0,
                                'name': 'Normal (FFA)'
                            },
                            {
                                'value': -1,
                                'name': 'Fallen (FFA)'
                            },
                            {
                                'value': 2,
                                'name': 'Celestial'
                            },
                            {
                                'value': 1,
                                'name': 'Polygon'
                            },
                            {
                                'value': 10,
                                'name': 'Blue'
                            },
                            {
                                'value': 11,
                                'name': 'Red'
                            },
                            {
                                'value': 12,
                                'name': 'Green'
                            },
                            {
                                'value': 13,
                                'name': 'Purple'
                            },
                            {
                                'value': 4,
                                'name': 'Yellow'
                            },
                            {
                                'value': 5,
                                'name': 'Black'
                            },
                            {
                                'value': 6,
                                'name': 'White'
                            },
                            {
                                'value': 3,
                                'name': 'Barrel'
                            },
                            {
                                'value': 7,
                                'name': 'Spike'
                            },
                            {
                                'value': 20,
                                'name': 'Triangle Yellow'
                            },
                            {
                                'value': 21,
                                'name': 'Square Red'
                            },
                            {
                                'value': 22,
                                'name': 'Pentagon Blue'
                            },
                            {
                                'value': 23,
                                'name': 'Hexagon Orange'
                            },
                            {
                                'value': 24,
                                'name': 'Heptagon Green'
                            },
                            {
                                'value': 25,
                                'name': 'Octagon Blue'
                            },
                            {
                                'value': 26,
                                'name': 'Nonagon Dark Purple'
                            },
                            {
                                'value': 27,
                                'name': 'Decagon Dark Blue'
                            },
                            {
                                'value': 28,
                                'name': 'Hendecagon Black'
                            },
                            {
                                'value': 29,
                                'name': 'Dodecagon Dark Grey'
                            },
                            {
                                'value': 30,
                                'name': 'Tridecagon White'
                            }
                        ],
                        'b': [
                            {
                                'value': 1,
                                'name': 'Polygon'
                            },
                            {
                                'value': 0,
                                'name': 'Normal (FFA)'
                            },
                            {
                                'value': -1,
                                'name': 'Fallen (FFA)'
                            },
                            {
                                'value': 2,
                                'name': 'Celestial'
                            },
                            {
                                'value': 10,
                                'name': 'Blue'
                            },
                            {
                                'value': 11,
                                'name': 'Red'
                            },
                            {
                                'value': 12,
                                'name': 'Green'
                            },
                            {
                                'value': 13,
                                'name': 'Purple'
                            },
                            {
                                'value': 4,
                                'name': 'Yellow'
                            },
                            {
                                'value': 5,
                                'name': 'Black'
                            },
                            {
                                'value': 6,
                                'name': 'White'
                            },
                            {
                                'value': 3,
                                'name': 'Barrel'
                            },
                            {
                                'value': 7,
                                'name': 'Spike'
                            },
                            {
                                'value': 20,
                                'name': 'Triangle Yellow'
                            },
                            {
                                'value': 21,
                                'name': 'Square Red'
                            },
                            {
                                'value': 22,
                                'name': 'Pentagon Blue'
                            },
                            {
                                'value': 23,
                                'name': 'Hexagon Orange'
                            },
                            {
                                'value': 24,
                                'name': 'Heptagon Green'
                            },
                            {
                                'value': 25,
                                'name': 'Octagon Blue'
                            },
                            {
                                'value': 26,
                                'name': 'Nonagon Dark Purple'
                            },
                            {
                                'value': 27,
                                'name': 'Decagon Dark Blue'
                            },
                            {
                                'value': 28,
                                'name': 'Hendecagon Black'
                            },
                            {
                                'value': 29,
                                'name': 'Dodecagon Dark Grey'
                            },
                            {
                                'value': 30,
                                'name': 'Tridecagon White'
                            }
                        ],
                        'a': [
                            { 'name': 'Unset' },
                            {
                                'value': 0,
                                'name': 'Normal (Blue and Red)'
                            },
                            {
                                'value': -1,
                                'name': 'Fallen Light Gray'
                            },
                            {
                                'value': 2,
                                'name': 'Celestial Pink'
                            },
                            {
                                'value': 10,
                                'name': 'Blue'
                            },
                            {
                                'value': 11,
                                'name': 'Red'
                            },
                            {
                                'value': 12,
                                'name': 'Green'
                            },
                            {
                                'value': 13,
                                'name': 'Purple'
                            },
                            {
                                'value': 4,
                                'name': 'Yellow'
                            },
                            {
                                'value': 5,
                                'name': 'Black'
                            },
                            {
                                'value': 6,
                                'name': 'White'
                            },
                            {
                                'value': 3,
                                'name': 'Barrel Gray'
                            },
                            {
                                'value': 7,
                                'name': 'Spike Dark Gray'
                            },
                            {
                                'value': 20,
                                'name': 'Triangle Yellow'
                            },
                            {
                                'value': 21,
                                'name': 'Square Red'
                            },
                            {
                                'value': 22,
                                'name': 'Pentagon Blue'
                            },
                            {
                                'value': 23,
                                'name': 'Hexagon Orange'
                            },
                            {
                                'value': 24,
                                'name': 'Heptagon Green'
                            },
                            {
                                'value': 25,
                                'name': 'Octagon Blue'
                            },
                            {
                                'value': 26,
                                'name': 'Nonagon Dark Purple'
                            },
                            {
                                'value': 27,
                                'name': 'Decagon Dark Blue'
                            },
                            {
                                'value': 28,
                                'name': 'Hendecagon Black'
                            },
                            {
                                'value': 29,
                                'name': 'Dodecagon Dark Grey'
                            },
                            {
                                'value': 30,
                                'name': 'Tridecagon White'
                            }
                        ],
                        'd': [
                            {
                                'bulletName': 'Bullet',
                                'defaultShootTrigger': 0,
                                'extraBulletStats': true,
                                'bulletStats': true,
                                'lifetimeAttribute': true,
                                'defaultLength': 1,
                                'defaultWidth': 0.5
                            },
                            {
                                'bulletName': 'Drone',
                                'defaultShootTrigger': 4,
                                'extraBulletStats': true,
                                'bulletStats': true,
                                'droneStats': true,
                                'defaultLength': 0.8,
                                'defaultWidth': 0.5
                            },
                            {
                                'bulletName': 'Trap',
                                'defaultShootTrigger': 0,
                                'extraBulletStats': true,
                                'bulletStats': true,
                                'lifetimeAttribute': true,
                                'defaultLength': 1,
                                'defaultWidth': 0.65
                            },
                            {
                                'bulletName': 'Minion',
                                'defaultShootTrigger': 4,
                                'extraBulletStats': true,
                                'minionStats': true,
                                'droneStats': true,
                                'defaultLength': 1.1,
                                'defaultWidth': 0.5
                            },
                            {
                                'bulletName': 'Player',
                                'noShootTrigger': true,
                                'launchSpeed': true,
                                'defaultLength': 0.7,
                                'defaultWidth': 0.5
                            },
                            {
                                'bulletName': 'Polyp',
                                'defaultShootTrigger': 4,
                                'extraBulletStats': true,
                                'defaultLength': 0.7,
                                'launchSpeed': true,
                                'defaultWidth': 0.5
                            },
                            {
                                'bulletName': 'Nothing',
                                'defaultShootTrigger': 0,
                                'defaultLength': 0.8,
                                'defaultWidth': 1
                            },
                            {
                                'bulletName': 'Rocket',
                                'defaultShootTrigger': 0,
                                'extraBulletStats': true,
                                'lifetimeAttribute': true,
                                'minionStats': true,
                                'defaultLength': 1,
                                'defaultWidth': 0.5
                            },
                            {
                                'bulletName': 'Custom Trap',
                                'defaultShootTrigger': 0,
                                'extraBulletStats': true,
                                'lifetimeAttribute': true,
                                'minionStats': true,
                                'defaultLength': 1,
                                'defaultWidth': 0.5
                            },
                            {
                                'bulletName': 'Polygon',
                                'defaultShootTrigger': 0,
                                'defaultLength': 1,
                                'defaultWidth': 1,
                                'polygonStats': true,
                                'extraBulletStats': true,
                                'launchSpeed': true
                            }
                        ]
                    };
                const Kq = 'object' == typeof self ? self : globalThis, KU = WT => ((Wj, WJ) => {
                        const WR = (WA, WI) => (Wj.set(WI, WA), WA), WL = WA => {
                                ;
                                if (Wj.has(WA)) {
                                    return Wj.get(WA);
                                }
                                const [WI, WP] = WJ[WA];
                                switch (WI) {
                                case 0:
                                case -1:
                                    return WR(WP, WA);
                                case 1: {
                                        const WN = WR([], WA);
                                        for (const WW of WP)
                                            WN.push(WL(WW));
                                        return WN;
                                    }
                                case 2: {
                                        const WD = WR({}, WA);
                                        for (const [WQ, Wk] of WP)
                                            WD[WL(WQ)] = WL(Wk);
                                        return WD;
                                    }
                                case 3:
                                    return WR(new Date(WP), WA);
                                case 4: {
                                        const {
                                            source: WX,
                                            flags: WG
                                        } = WP;
                                        return WR(new RegExp(WX, WG), WA);
                                    }
                                case 5: {
                                        const Wz = WR(new Map(), WA);
                                        for (const [WF, Wq] of WP)
                                            Wz.set(WL(WF), WL(Wq));
                                        return Wz;
                                    }
                                case 6: {
                                        const WU = WR(new Set(), WA);
                                        for (const WB of WP)
                                            WU.add(WL(WB));
                                        return WU;
                                    }
                                case 7: {
                                        const {
                                            name: d0,
                                            message: d1
                                        } = WP;
                                        return WR(new Kq[d0](d1), WA);
                                    }
                                case 8:
                                    return WR(BigInt(WP), WA);
                                case 'BigInt':
                                    return WR(Object(BigInt(WP)), WA);
                                }
                                return WR(new Kq[WI](WP), WA);
                            };
                        return WL;
                    })(new Map(), WT)(0), {toString: C0} = {}, {keys: C1} = Object, C2 = WT => {
                        ;
                        const Wj = typeof WT;
                        if ('object' !== Wj || !WT) {
                            return [
                                0,
                                Wj
                            ];
                        }
                        const WJ = C0.call(WT).slice(8, -1);
                        switch (WJ) {
                        case 'Array':
                            return [
                                1,
                                ''
                            ];
                        case 'Object':
                            return [
                                2,
                                ''
                            ];
                        case 'Date':
                            return [
                                3,
                                ''
                            ];
                        case 'RegExp':
                            return [
                                4,
                                ''
                            ];
                        case 'Map':
                            return [
                                5,
                                ''
                            ];
                        case 'Set':
                            return [
                                6,
                                ''
                            ];
                        }
                        return WJ.includes('Array') ? [
                            1,
                            WJ
                        ] : WJ.includes('Error') ? [
                            7,
                            WJ
                        ] : [
                            2,
                            WJ
                        ];
                    }, C3 = ([WT, Wj]) => 0 === WT && ('function' === Wj || 'symbol' === Wj), C4 = (WT, {
                        json: Wj,
                        lossy: WJ
                    } = {}) => {
                        const WR = [];
                        return ((WL, WA, WI, WP) => {
                            const WN = (WD, WQ) => {
                                    ;
                                    const Wk = WP.push(WD) - 1;
                                    return WI.set(WQ, Wk), Wk;
                                }, WW = WD => {
                                    ;
                                    if (WI.has(WD)) {
                                        return WI.get(WD);
                                    }
                                    let [WQ, Wk] = C2(WD);
                                    switch (WQ) {
                                    case 0: {
                                            let WG = WD;
                                            switch (Wk) {
                                            case 'bigint':
                                                WQ = 8, WG = WD.toString();
                                                break;
                                            case 'function':
                                            case 'symbol':
                                                if (WL) {
                                                    throw new TypeError('unable to serialize ' + Wk);
                                                }
                                                WG = null;
                                                break;
                                            case 'undefined':
                                                return WN([-1], WD);
                                            }
                                            return WN([
                                                WQ,
                                                WG
                                            ], WD);
                                        }
                                    case 1: {
                                            if (Wk) {
                                                return WN([
                                                    Wk,
                                                    [...WD]
                                                ], WD);
                                            }
                                            const Wz = [], WF = WN([
                                                    WQ,
                                                    Wz
                                                ], WD);
                                            for (const Wq of WD)
                                                Wz.push(WW(Wq));
                                            return WF;
                                        }
                                    case 2: {
                                            if (Wk) {
                                                switch (Wk) {
                                                case 'BigInt':
                                                    return WN([
                                                        Wk,
                                                        WD.toString()
                                                    ], WD);
                                                case 'Boolean':
                                                case 'Number':
                                                case 'String':
                                                    return WN([
                                                        Wk,
                                                        WD.valueOf()
                                                    ], WD);
                                                }
                                            }
                                            if (WA && 'toJSON' in WD) {
                                                return WW(WD.toJSON());
                                            }
                                            const WU = [], WB = WN([
                                                    WQ,
                                                    WU
                                                ], WD);
                                            for (const d0 of C1(WD))
                                                !WL && C3(C2(WD[d0])) || WU.push([
                                                    WW(d0),
                                                    WW(WD[d0])
                                                ]);
                                            return WB;
                                        }
                                    case 3:
                                        return WN([
                                            WQ,
                                            WD.toISOString()
                                        ], WD);
                                    case 4: {
                                            const {
                                                source: d1,
                                                flags: d2
                                            } = WD;
                                            return WN([
                                                WQ,
                                                {
                                                    'source': d1,
                                                    'flags': d2
                                                }
                                            ], WD);
                                        }
                                    case 5: {
                                            const d3 = [], d4 = WN([
                                                    WQ,
                                                    d3
                                                ], WD);
                                            for (const [d5, d6] of WD)
                                                (WL || !C3(C2(d5)) && !C3(C2(d6))) && d3.push([
                                                    WW(d5),
                                                    WW(d6)
                                                ]);
                                            return d4;
                                        }
                                    case 6: {
                                            const d7 = [], d8 = WN([
                                                    WQ,
                                                    d7
                                                ], WD);
                                            for (const d9 of WD)
                                                !WL && C3(C2(d9)) || d7.push(WW(d9));
                                            return d8;
                                        }
                                    }
                                    const {message: WX} = WD;
                                    return WN([
                                        WQ,
                                        {
                                            'name': Wk,
                                            'message': WX
                                        }
                                    ], WD);
                                };
                            return WW;
                        })(!(Wj || WJ), !!Wj, new Map(), WR)(WT), WR;
                    }, C5 = 'function' == typeof structuredClone ? (WT, Wj) => Wj && ('json' in Wj || 'lossy' in Wj) ? KU(C4(WT, Wj)) : structuredClone(WT) : (WT, Wj) => KU(C4(WT, Wj));
                function C6(WT) {
                    ;
                    return C6 = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (Wj) {
                        return typeof Wj;
                    } : function (Wj) {
                        ;
                        return Wj && 'function' == typeof Symbol && Wj.constructor === Symbol && Wj !== Symbol.prototype ? 'symbol' : typeof Wj;
                    }, C6(WT);
                }
                function C7(WT, Wj, WJ) {
                    ;
                    if (Wj > WJ) {
                        var WR = Wj;
                        Wj = WJ;
                        WJ = WR;
                    }
                    return Math.min(Math.max(WT, Wj), WJ);
                }
                function C8(WT) {
                    return C5(WT);
                }
                function C9(WT) {
                    return WT * (Math.PI / 180);
                }
                function CO(WT) {
                    return WT * (180 / Math.PI);
                }
                function CY(WT) {
                    ;
                    if (0 == WT.length) {
                        return [[
                                'nothing',
                                6
                            ]];
                    }
                    if (1 == WT.length) {
                        return [WT[0]];
                    }
                    for (var Wj = WT.pop(), WJ = [], WR = 0; WR < WT.length; WR++) {
                        WJ.push(WT[WR]);
                        WR < WT.length - 1 && WJ.push([
                            ', ',
                            6
                        ]);
                    }
                    return WJ.push([
                        1 == WT.length ? ' and ' : ', and ',
                        6
                    ]), WJ.push(Wj), WJ;
                }
                function CM() {
                    ;
                    return Math.random() < 0.5 ? -1 : 1;
                }
                function CS(WT) {
                    var Wj = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], WJ = Math.floor(WT / 3600), WR = Math.floor((WT - 3600 * WJ) / 60), WL = Math.floor(WT - 3600 * WJ - 60 * WR), WA = Math.floor(1000 * (WT - Math.floor(WT)));
                    return 0 == WJ ? 0 == WR ? 0 == WL ? WA + 'ms' : Wj ? WL + 's ' + WA + 'ms' : WL + 's' : WR + 'm ' + WL + 's' : WJ + 'h ' + WR + 'm ' + WL + 's';
                }
                function CK(WT) {
                    var Wj = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, WJ = Math.pow(10, Wj);
                    return Math.round(WT * WJ) / WJ;
                }
                function CC(WT) {
                    var Wj = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, WJ = Math.pow(10, Wj);
                    return Math.ceil(WT * WJ) / WJ;
                }
                function CE(WT) {
                    ;
                    return Math.max(Math.min(1000, WT), -1000);
                }
                function CH(WT, Wj, WJ) {
                    return Wj * WJ + WT * (1 - WJ);
                }
                function CZ(WT, Wj, WJ) {
                    var WR = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.016666666666666666;
                    return CH(WT, Wj, 1 - Math.pow(WJ, WR));
                }
                function CV(WT, Wj) {
                    var WJ = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], WR = Math.sign(WT), WL = Math.abs(WT);
                    return WJ ? (1 - Math.pow(1 - WL, Wj)) * WR : Math.pow(WL, Wj) * WR;
                }
                function CT(WT) {
                    var Wj = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3;
                    return WT < 0.5 ? Math.pow(2, Wj - 1) * Math.pow(WT, Wj) : 1 - Math.pow(-2 * WT + 2, Wj) / 2;
                }
                function Cj(WT, Wj) {
                    return (WT % Wj + Wj) % Wj;
                }
                function CJ(WT) {
                    ;
                    return /^#[0-9A-F]{6}$/i.test(WT);
                }
                function CR(WT) {
                    ;
                    return WT.split('').reverse().join('');
                }
                function CL() {
                    ;
                    Array.prototype.sort.call(arguments);
                    for (var WT = arguments[0], Wj = arguments[1], WJ = [], WR = WT; WR <= Wj; WR++) {
                        WJ.push(WR);
                    }
                    return WJ;
                }
                function CA(WT, Wj, WJ) {
                    var WR = (1 - WJ) * Math.cos(WT) + WJ * Math.cos(Wj), WL = (1 - WJ) * Math.sin(WT) + WJ * Math.sin(Wj);
                    return Math.atan2(WL, WR);
                }
                function CI(WT, Wj, WJ) {
                    return WT = CG(WT), (Wj = CG(Wj)) < (WJ = CG(WJ)) ? Wj <= WT && WT <= WJ : Wj <= WT || WT <= WJ;
                }
                function CP(WT) {
                    ;
                    return WT.toLocaleString();
                }
                function CN(WT) {
                    return (0, c9.JQ)(KG(WT));
                }
                function CW(WT) {
                    ;
                    return Kz((0, c9['b$'])(WT), { 'to': 'string' });
                }
                function CD(WT) {
                    ;
                    for (; WT.firstChild;) {
                        WT.removeChild(WT.firstChild);
                    }
                }
                function CQ(WT) {
                    var Wj = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    if (!Wj) {
                        return new Date(WT).toLocaleDateString();
                    }
                    var WJ = [
                            'Sunday',
                            'Monday',
                            'Tuesday',
                            'Wednesday',
                            'Thursday',
                            'Friday',
                            'Saturday'
                        ], WR = [
                            'January',
                            'February',
                            'March',
                            'April',
                            'May',
                            'June',
                            'July',
                            'August',
                            'September',
                            'October',
                            'November',
                            'December'
                        ], WL = new Date(WT), WA = WL.getMinutes(), WI = WL.getHours(), WP = WI >= 12 ? 'PM' : 'AM';
                    return WI = (WI %= 12) || 12, WA < 10 && (WA = '0' + WA), ''.concat(WJ[WL.getDay()], ', ').concat(WR[WL.getMonth()], ' ').concat(WL.getDate(), ', ').concat(WL.getFullYear(), ' ').concat(WI, ':').concat(WA, ' ').concat(WP);
                }
                function CX(WT) {
                    ;
                    if (WT < 60000) {
                        var WI = Math.round(WT / 1000);
                        return WI < 5 ? 'a few seconds ago' : ''.concat(WI, ' seconds ago');
                    }
                    if (WT < 3600000) {
                        var WP = Math.round(WT / 60000);
                        return 1 == WP ? 'a minute ago' : ''.concat(WP, ' minutes ago');
                    }
                    if (WT < 86400000) {
                        var WN = Math.round(WT / 3600000);
                        return 1 == WN ? 'an hour ago' : ''.concat(WN, ' hours ago');
                    }
                    if (WT < 2592000000) {
                        var WW = Math.round(WT / 86400000);
                        return 1 == WW ? 'yesterday' : ''.concat(WW, ' days ago');
                    }
                    if (WT < 31536000000) {
                        var WD = Math.round(WT / 2592000000);
                        return 1 == WD ? 'a month ago' : ''.concat(WD, ' months ago');
                    }
                    var WQ = Math.round(WT / 31536000000);
                    return 1 == WQ ? 'a year ago' : ''.concat(WQ, ' years ago');
                }
                function CG(WT) {
                    return (WT % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);
                }
                function Cz(WT, Wj, WJ, WR, WL, WA) {
                    ;
                    for (var WI = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0, WP = Math.min(Math.abs(WL - WR) / 2 * WJ, WJ / 1.5), WN = CA(WR, WL, 0.5), WW = WJ - WP / (Math.PI / 2), WD = WT + WW * Math.cos(WN), WQ = Wj + WW * Math.sin(WN), Wk = function (d7) {
                                for (var d8 = [
                                            {
                                                'x': WD,
                                                'y': WQ + d7
                                            },
                                            {
                                                'x': WD,
                                                'y': WQ + d7
                                            }
                                        ], d9 = WP / 100, dO = false, dY = false; !dO || !dY;) {
                                    for (var dM = 0; dM < 2; dM++) {
                                        var dS = 0 == dM ? 1 : -1, dK = d8[dM];
                                        CF(WT, Wj, dK.x, dK.y, WJ, WR, WL, WI) ? dK.x += dS * d9 : 0 == dM ? dO = true : dY = true;
                                    }
                                }
                                return d8;
                            }, WX = [
                                Wk(-WA),
                                Wk(0),
                                Wk(WA)
                            ], WG = [
                                {
                                    'x': null,
                                    'y': WQ
                                },
                                {
                                    'x': null,
                                    'y': WQ
                                }
                            ], Wz = 0, WF = WX; Wz < WF.length; Wz++) {
                        for (var Wq = WF[Wz], WU = 0; WU < 2; WU++) {
                            var WB = 0 == WU ? 1 : -1, d0 = Wq[WU], d1 = WG[WU];
                            d1.x ? d1.x = (1 == WB ? Math.min : Math.max)(d1.x, d0.x) : d1.x = d0.x;
                        }
                    }
                    var d2 = Math.abs(WG[0].x - WT) < Math.abs(WG[1].x - WT) ? 0 : 1, d3 = 0 == d2 ? 1 : 0, d4 = 0 == d2 ? 1 : -1, d5 = Math.abs(WG[d2].x - WG[d3].x);
                    d5 = Math.min(d5, 2 * WP);
                    WG[d2].x = WG[d3].x + d4 * d5;
                    var d6 = Math.abs(WG[0].x - WG[1].x);
                    return {
                        'x': Math.min(WG[0].x, WG[1].x) + d6 / 2,
                        'y': WQ,
                        'width': d6
                    };
                }
                function CF(WT, Wj, WJ, WR, WL, WA, WI) {
                    var WP = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 0, WN = Math.sqrt(Math.pow(WJ - WT, 2) + Math.pow(WR - Wj, 2)), WW = Math.atan2(WR - Wj, WJ - WT);
                    return !(WN > WL) && (!(WN < WP) && CI(WW, WA, WI));
                }
                function Cq(WT, Wj) {
                    ;
                    if (WT.length != Wj.length) {
                        return false;
                    }
                    for (var WJ = 0; WJ < WT.length; WJ++) {
                        if (WT[WJ] != Wj[WJ]) {
                            return false;
                        }
                    }
                    return true;
                }
                function CU(WT, Wj) {
                    ;
                    if (WT === Wj) {
                        return true;
                    }
                    if (null == WT && null == Wj) {
                        return true;
                    }
                    if ('object' == C6(WT) && 'object' == C6(Wj)) {
                        if (Object.keys(WT).length != Object.keys(Wj).length) {
                            return false;
                        }
                        for (var WJ in WT)
                            if (!CU(WT[WJ], Wj[WJ])) {
                                return false;
                            }
                        return true;
                    }
                    return false;
                }
                function CB(WT) {
                    var Wj = new Set();
                    return WT.filter(function (WJ) {
                        ;
                        return !Wj.has(WJ) && (Wj.add(WJ), true);
                    });
                }
                function E0(WT, Wj) {
                    var WJ = new Uint8Array(WT.length + Wj.length);
                    return WJ.set(WT, 0), WJ.set(Wj, WT.length), WJ;
                }
                function E1(WT, Wj) {
                    ;
                    for (var WJ = 0; WJ < WT.length; WJ++) {
                        WT[WJ] = WT[WJ] ^ Wj;
                    }
                    return WT;
                }
                function E2(WT, Wj) {
                    return function (WJ) {
                        if (Array.isArray(WJ)) {
                            return WJ;
                        }
                    }(WT) || function (WJ, WR) {
                        var WL = null == WJ ? null : 'undefined' != typeof Symbol && WJ[Symbol.iterator] || WJ['@@iterator'];
                        if (null != WL) {
                            var WA, WI, WP, WN, WW = [], WD = true, WQ = false;
                            try {
                                if (WP = (WL = WL.call(WJ)).next, 0 === WR) {
                                    if (Object(WL) !== WL) {
                                        return;
                                    }
                                    WD = false;
                                } else {
                                    for (; !(WD = (WA = WP.call(WL)).done) && (WW.push(WA.value), WW.length !== WR); WD = true) {
                                        ;
                                    }
                                }
                            } catch (Wk) {
                                WQ = true;
                                WI = Wk;
                            } finally {
                                try {
                                    if (!WD && null != WL.return && (WN = WL.return(), Object(WN) !== WN)) {
                                        return;
                                    }
                                } finally {
                                    if (WQ) {
                                        throw WI;
                                    }
                                }
                            }
                            return WW;
                        }
                    }(WT, Wj) || function (WJ, WR) {
                        ;
                        if (!WJ) {
                            return;
                        }
                        if ('string' == typeof WJ) {
                            return E3(WJ, WR);
                        }
                        var WL = Object.prototype.toString.call(WJ).slice(8, -1);
                        'Object' === WL && WJ.constructor && (WL = WJ.constructor.name);
                        if ('Map' === WL || 'Set' === WL) {
                            return Array.from(WJ);
                        }
                        if ('Arguments' === WL || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(WL)) {
                            return E3(WJ, WR);
                        }
                    }(WT, Wj) || (function () {
                        ;
                        throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }());
                }
                function E3(WT, Wj) {
                    ;
                    (null == Wj || Wj > WT.length) && (Wj = WT.length);
                    for (var WJ = 0, WR = new Array(Wj); WJ < Wj; WJ++) {
                        WR[WJ] = WT[WJ];
                    }
                    return WR;
                }
                var E4 = document.getElementById('settings'), E5 = 1, E6 = 1000, E7 = 1, E8 = {
                        'sectionTankEditor': {
                            'section': true,
                            'name': 'Tank Editor',
                            'tankEditor': true
                        },
                        'maxSaveStates': {
                            'name': 'Max Undo/Redo Save States',
                            'type': 1,
                            'default': 100,
                            'min': 10,
                            'max': 500,
                            'step': 1,
                            'ending': '',
                            'tankEditor': true
                        },
                        'compressCodes': {
                            'name': 'Compress Codes',
                            'type': 0,
                            'default': true,
                            'tankEditor': true
                        },
                        'showTankSectionFrontGuideLines': {
                            'name': 'Show Tank Section Front Guide Lines',
                            'type': 0,
                            'default': false,
                            'tankEditor': true
                        },
                        'showAutoCannonRangeGuideLines': {
                            'name': 'Show Auto Cannon Range Guide Lines',
                            'type': 0,
                            'default': true,
                            'tankEditor': true
                        },
                        'showRotatingTankSectionGuideLines': {
                            'name': 'Show Rotating Tank Section Guide Lines',
                            'type': 0,
                            'default': true,
                            'tankEditor': true
                        },
                        'showOtherTankSectionGuideLines': {
                            'name': 'Show Other Tank Section Guide Lines',
                            'type': 0,
                            'default': true,
                            'tankEditor': true
                        },
                        'sectionMobile': {
                            'section': true,
                            'name': 'Mobile',
                            'mobile': true
                        },
                        'joystickSize': {
                            'name': 'Joystick Size',
                            'mobile': true,
                            'type': 1,
                            'default': 100,
                            'min': 0,
                            'max': 200,
                            'step': 1,
                            'ending': ''
                        },
                        'joystickOffset': {
                            'name': 'Joystick Offset',
                            'mobile': true,
                            'type': 1,
                            'default': 250,
                            'min': 0,
                            'max': 400,
                            'step': 1,
                            'ending': ''
                        },
                        'invertJoysticks': {
                            'name': 'Invert Joysticks',
                            'type': 0,
                            'default': false,
                            'mobile': true,
                            'onUpdate': function (WT) {
                                E5 = WT ? -1 : 1;
                            }
                        },
                        'showDroneTrajectory': {
                            'name': 'Show Drone Trajectory',
                            'type': 0,
                            'default': false,
                            'mobile': true
                        },
                        'showQuickChatButton': {
                            'name': 'Show Quick Chat Button',
                            'type': 0,
                            'default': true,
                            'mobile': true
                        },
                        'sectionMainMenu': {
                            'section': true,
                            'name': 'Main Menu'
                        },
                        'showFullServerList': {
                            'name': 'Show Full Server List',
                            'type': 0,
                            'default': false,
                            'onUpdate': function (WT) {
                                W8(WT);
                            }
                        },
                        'sectionNamesAndChat': {
                            'section': true,
                            'name': 'Names & Chat'
                        },
                        'showChat': {
                            'name': 'Show Chat',
                            'type': 0,
                            'default': true,
                            'onUpdate': function (WT) {
                                ;
                                VA || EN || (WT ? chat.classList.remove('hidden') : chat.classList.add('hidden'));
                            }
                        },
                        'showNames': {
                            'name': 'Show Names',
                            'type': 0,
                            'default': true
                        },
                        'clickableLinks': {
                            'name': 'Clickable Chat Links',
                            'type': 0,
                            'default': false
                        },
                        'showOwnName': {
                            'name': 'Show Own Name',
                            'type': 0,
                            'default': false
                        },
                        'silentTyping': {
                            'name': 'Silent Typing',
                            'type': 0,
                            'default': false,
                            'onUpdate': function (WT) {
                                WT || AX(false);
                            }
                        },
                        'showTypingIndicators': {
                            'name': 'Show Typing Indicators',
                            'type': 0,
                            'default': true,
                            'onUpdate': function (WT) {
                                WT || (function () {
                                    for (var Wj in AI)
                                        Az(Wj);
                                }());
                            }
                        },
                        'showNamesAndChatInScreenshotMode': {
                            'name': 'Show Names & Chat in Screenshot Mode',
                            'type': 0,
                            'default': false
                        },
                        'sectionDebugMode': {
                            'section': true,
                            'name': 'Debug Mode'
                        },
                        'showClassNames': {
                            'name': 'Show Class Names',
                            'type': 0,
                            'default': false
                        },
                        'showIds': {
                            'name': 'Show IDs',
                            'type': 0,
                            'default': false
                        },
                        'copyIds': {
                            'name': 'Click to Copy IDs',
                            'type': 0,
                            'default': false
                        },
                        'showTickTime': {
                            'name': 'Show Tick Time',
                            'type': 0,
                            'default': true
                        },
                        'showServerName': {
                            'name': 'Show Server Name',
                            'type': 0,
                            'default': true
                        },
                        'showPlayerCount': {
                            'name': 'Show Player Count',
                            'type': 0,
                            'default': true
                        },
                        'showGlobalPlayerCount': {
                            'name': 'Show Global Player Count',
                            'type': 0,
                            'default': true
                        },
                        'showFPS': {
                            'name': 'Show FPS',
                            'type': 0,
                            'default': true
                        },
                        'showPing': {
                            'name': 'Show Ping',
                            'type': 0,
                            'default': true
                        },
                        'showPosition': {
                            'name': 'Show Position',
                            'type': 0,
                            'default': false
                        },
                        'showExtraPerformanceInfo': {
                            'name': 'Show Extra Performance Info',
                            'type': 0,
                            'default': true
                        },
                        'showHitboxes': {
                            'name': 'Show Hitboxes',
                            'type': 0,
                            'default': false
                        },
                        'guideLineWidth': {
                            'name': 'Debug Line Width',
                            'type': 1,
                            'default': 2,
                            'min': 1,
                            'max': 10,
                            'step': 1,
                            'ending': 'px'
                        },
                        'debugModeTextSize': {
                            'name': 'Debug Mode Text Size',
                            'type': 1,
                            'default': 100,
                            'min': 0,
                            'max': 200,
                            'step': 5,
                            'ending': '%',
                            'onUpdate': function (WT) {
                                ;
                                for (var Wj = 0; Wj < hO.childElementCount; Wj++) {
                                    hO.children[Wj].style.fontSize = WT / 50 + 'vmin';
                                }
                            }
                        },
                        'sectionGraphics': {
                            'section': true,
                            'name': 'Graphics'
                        },
                        'fastTransparency': {
                            'name': 'Fast Transparency',
                            'type': 0,
                            'default': true
                        },
                        'staticCamera': {
                            'name': 'Static Camera',
                            'type': 0,
                            'default': false
                        },
                        'particleAmount': {
                            'name': 'Particle Amount',
                            'type': 1,
                            'default': 100,
                            'min': 0,
                            'max': 200,
                            'step': 5,
                            'ending': '%',
                            'onUpdate': function (WT) {
                                ;
                                E7 = WT / 100;
                                E6 = Math.round(WT / 100 * 1000);
                            }
                        },
                        'showAmbientParticles': {
                            'name': 'Show Ambient Particles',
                            'type': 0,
                            'default': true
                        },
                        'minimap': {
                            'name': 'Show Minimap',
                            'type': 0,
                            'default': true
                        },
                        'useScientificNotation': {
                            'name': 'Use Scientific Notation',
                            'type': 0,
                            'default': false
                        },
                        'showPercentagesOnHealthBars': {
                            'name': 'Show Percentages on Health Bars',
                            'type': 0,
                            'default': false
                        },
                        'showHealthBarOnHUD': {
                            'name': 'Show Health Bar on HUD',
                            'type': 0,
                            'default': false
                        },
                        'hudOpacity': {
                            'name': 'Hud Opacity',
                            'type': 1,
                            'default': 100,
                            'min': 0,
                            'max': 100,
                            'step': 5,
                            'ending': '%',
                            'onUpdate': function (WT) {
                                ;
                                Array.from(document.getElementsByClassName('hud')).forEach(function (Wj) {
                                    ;
                                    Wj.style.opacity = WT / 100;
                                });
                            }
                        },
                        'renderDelay': {
                            'name': 'Render Delay',
                            'type': 1,
                            'default': 100,
                            'min': 0,
                            'max': 200,
                            'step': 2,
                            'ending': 'ms'
                        },
                        'cameraShake': {
                            'name': 'Camera Shake',
                            'type': 1,
                            'default': 100,
                            'min': 0,
                            'max': 100,
                            'step': 5,
                            'ending': '%'
                        }
                    }, E9 = {
                        WA: EK(WT[WA], WI.default),
                        WR: WA.checked,
                        WR: WA.value
                    }, EO = { WA: EC(WJ, WI.name) }, EY = false;
                function EM() {
                    ;
                    Object.entries(E8).forEach(function (WT) {
                        var Wj, WJ = E2(WT, 2), WR = WJ[0], WL = WJ[1];
                        if (!WL.section) {
                            var WA = EO[WR];
                            if (WA) {
                                switch (WL.type) {
                                case 0:
                                    WA.checked = EK(E9[WR], WL.default);
                                    break;
                                case 1:
                                    WA.value = EK(E9[WR], WL.default), WA.dispatchEvent(new CustomEvent('input', { 'detail': 'to update settings' }));
                                }
                            } else {
                                console.error('Could not find object for setting ' + WR);
                            }
                            WL.hasOwnProperty('onUpdate') && WL.onUpdate(E9[WR]);
                        }
                        if (WL.section) {
                            Wj = EO[WR];
                        } else {
                            switch (WL.type) {
                            case 0:
                                Wj = EO[WR].parentElement.parentElement;
                                break;
                            case 1:
                                Wj = EO[WR].parentElement;
                            }
                        }
                        Wj.classList.remove('hidden');
                        !EN && WL.tankEditor && Wj.classList.add('hidden');
                        !lz && WL.mobile && Wj.classList.add('hidden');
                    });
                    Object.entries(EV).forEach(function (WT) {
                        var Wj = E2(WT, 2), WJ = Wj[0], WR = Wj[1];
                        if (WR.editable) {
                            var WL = Ej[WJ], WA = ET[WJ];
                            WL.textContent = EJ[WA];
                            WL.value = WA;
                            var WI = WL.parentElement;
                            WI.classList.remove('hidden');
                            !EN && WR.tankEditor && WI.classList.add('hidden');
                        }
                    });
                    E4.classList.remove('hide');
                    EY = true;
                    PM(true);
                    if (2 == N6) {
                        W2('settings');
                        W5('settings');
                    }
                }
                function ES(WT, Wj) {
                    var WJ = document.getElementById('settings-scroll');
                    Object.entries(E8).forEach(function (WR) {
                        var WL = E2(WR, 2), WA = WL[0], WI = WL[1];
                        if (WI.section) {
                            ;
                        } else {
                            switch (WI.type) {
                            case 0:
                                ;
                                var WP = HN(WJ, 'div');
                                HN(WP, 'label').textContent = WI.name;
                                var WN = HN(WP, 'label');
                                WN.classList.add('switch');
                                var WW = HN(WN, 'input');
                                WW.type = 'checkbox', HN(WN, 'span').classList.add('switch-button'), EO[WA] = WW;
                                break;
                            case 1:
                                E9[WA] = EK(WT[WA], WI.default), (WP = HN(WJ, 'div')).classList.add('slider'), HN(WP, 'label').textContent = WI.name;
                                var WD = HN(WP, 'input');
                                WD.classList.add('slide'), WD.type = 'range', WD.step = WI.step, WD.min = WI.min, WD.max = WI.max, WD.oninput = function () {
                                    ;
                                    WD.previousElementSibling.textContent = ''.concat(WI.name, ' - ').concat(WD.value).concat(WI.ending);
                                }, EO[WA] = WD;
                            }
                            WI.hasOwnProperty('onUpdate') && WI.onUpdate(E9[WA]);
                        }
                    });
                    EC(WJ, 'Keybinds');
                    Object.entries(EV).forEach(function (WR) {
                        var WL = E2(WR, 2), WA = WL[0], WI = WL[1];
                        if (WI.editable) {
                            ;
                            var WP = HN(WJ, 'div');
                            WP.classList.add('keybind');
                            HN(WP, 'label').textContent = ''.concat(WI.tankEditor ? 'TANK EDITOR: ' : '').concat(WI.name).concat(WI.control ? ' (CTRL +)' : '');
                            var WN = ET[WA], WW = HN(WP, 'button');
                            WW.textContent = EJ[WN];
                            WW.value = WN;
                            WW.addEventListener('click', function () {
                                !function (WD) {
                                    ;
                                    EH != WD ? (EZ(), EH = WD, Ej[WD].classList.add('changing')) : EZ();
                                }(WA);
                            });
                            ;
                        }
                    });
                    HN(WJ, 'hr');
                }
                function EK(WT) {
                    var Wj = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    return null != WT ? WT : Wj;
                }
                function EC(WT, Wj) {
                    var WJ = HN(WT, 'div');
                    return HN(WJ, 'hr'), HN(WJ, 'h2').textContent = Wj, HN(WJ, 'hr'), WJ;
                }
                function EE() {
                    var WT = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    WT && (Object.entries(E8).forEach(function (Wj) {
                        var WJ = E2(Wj, 2), WR = WJ[0], WL = WJ[1];
                        if (!WL.section) {
                            var WA = EO[WR];
                            if (WA) {
                                switch (WL.type) {
                                case 0:
                                    ;
                                    break;
                                case 1:
                                    ;
                                }
                            } else {
                                console.error('Could not find object for setting ' + WR);
                            }
                            WL.hasOwnProperty('onUpdate') && WL.onUpdate(E9[WR]);
                        }
                    }), Object.entries(EV).forEach(function (Wj) {
                        var WJ = E2(Wj, 2), WR = WJ[0];
                        WJ[1].editable && (ET[WR] = Ej[WR].value);
                    }), WO('settings', JSON.stringify(E9)), WO('keybinds', JSON.stringify(ET)));
                    j4();
                    EY = false;
                    EZ();
                    E4.classList.add('hide');
                    PM(false);
                    if (2 == N6) {
                        W3();
                        W4();
                    }
                }
                var EH = null;
                function EZ() {
                    ;
                    EH && (Ej[EH].classList.remove('changing'), EH = null);
                }
                window.addEventListener('keydown', function (WT) {
                    ;
                    if (EH) {
                        var Wj = WT.keyCode, WJ = Ej[EH];
                        WJ.textContent = EJ[Wj];
                        WJ.value = Wj;
                        EZ();
                        WT.preventDefault();
                    }
                });
                var EV = {
                        'undo': {
                            'name': 'Undo',
                            'default': 90,
                            'editable': true,
                            'tankEditor': true,
                            'control': true
                        },
                        'redo': {
                            'name': 'Redo',
                            'default': 89,
                            'editable': true,
                            'tankEditor': true,
                            'control': true
                        },
                        'selectAll': {
                            'name': 'Select All',
                            'default': 65,
                            'editable': true,
                            'tankEditor': true,
                            'control': true
                        },
                        'duplicate': {
                            'name': 'Duplicate',
                            'default': 68,
                            'editable': true,
                            'tankEditor': true,
                            'control': true
                        },
                        'moveForward': {
                            'name': 'Move Forward',
                            'default': 38,
                            'editable': true,
                            'tankEditor': true,
                            'control': true
                        },
                        'moveBackward': {
                            'name': 'Move Backward',
                            'default': 40,
                            'editable': true,
                            'tankEditor': true,
                            'control': true
                        },
                        'delete': {
                            'name': 'Delete',
                            'default': 8,
                            'editable': true,
                            'tankEditor': true
                        },
                        'escape': {
                            'name': 'Escape',
                            'default': 27,
                            'editable': true
                        },
                        'enter': {
                            'name': 'Enter',
                            'default': 13,
                            'editable': true
                        },
                        'openCommand': {
                            'name': 'Open Command',
                            'default': 191,
                            'editable': true
                        },
                        'quickChat': {
                            'name': 'Quick Chat',
                            'default': 84,
                            'editable': true
                        },
                        'previousChatMessage': {
                            'name': 'Move Up in Chat History',
                            'default': 38,
                            'editable': true
                        },
                        'nextChatMessage': {
                            'name': 'Move Down in Chat History',
                            'default': 40,
                            'editable': true
                        },
                        'fire': {
                            'name': 'Shoot',
                            'default': 32,
                            'editable': true
                        },
                        'repel': {
                            'name': 'Repel Drones',
                            'default': 16,
                            'editable': true
                        },
                        'moveUp': {
                            'name': 'Move Up',
                            'default': 87,
                            'editable': true
                        },
                        'moveDown': {
                            'name': 'Move Down',
                            'default': 83,
                            'editable': true
                        },
                        'moveLeft': {
                            'name': 'Move Left',
                            'default': 65,
                            'editable': true
                        },
                        'moveRight': {
                            'name': 'Move Right',
                            'default': 68,
                            'editable': true
                        },
                        'moveUpAlt': {
                            'name': 'Move Up (Alternate)',
                            'default': 38,
                            'editable': true
                        },
                        'moveDownAlt': {
                            'name': 'Move Down (Alternate)',
                            'default': 40,
                            'editable': true
                        },
                        'moveLeftAlt': {
                            'name': 'Move Left (Alternate)',
                            'default': 37,
                            'editable': true
                        },
                        'moveRightAlt': {
                            'name': 'Move Right (Alternate)',
                            'default': 39,
                            'editable': true
                        },
                        'autoFire': {
                            'name': 'Toggle Auto Fire',
                            'default': 69,
                            'editable': true
                        },
                        'autoSpin': {
                            'name': 'Toggle Auto Spin',
                            'default': 67,
                            'editable': true
                        },
                        'spinLock': {
                            'name': 'Toggle Spin Lock',
                            'default': 88,
                            'editable': true
                        },
                        'passiveMode': {
                            'name': 'Toggle Passive Mode',
                            'default': 86,
                            'editable': true
                        },
                        'debugMode': {
                            'name': 'Toggle Debug Mode',
                            'default': 77,
                            'editable': true
                        },
                        'screenshotMode': {
                            'name': 'Toggle Screenshot Mode',
                            'default': 80,
                            'editable': true
                        },
                        'weaponTree': {
                            'name': 'Open Weapon Upgrade Tree',
                            'default': 89,
                            'editable': true
                        },
                        'bodyTree': {
                            'name': 'Open Body Upgrade Tree',
                            'default': 85,
                            'editable': true
                        },
                        'settings': {
                            'name': 'Open Settings (In-Game)',
                            'default': 79,
                            'editable': true
                        }
                    }, ET = { WA: EK(Wj[WA], WI.default) }, Ej = { WA: WW }, EJ = [
                        '',
                        '',
                        '',
                        'CANCEL',
                        '',
                        '',
                        'HELP',
                        '',
                        'BACKSPACE',
                        'TAB',
                        '',
                        '',
                        'CLEAR',
                        'ENTER',
                        'ENTER_SPECIAL',
                        '',
                        'SHIFT',
                        'CONTROL',
                        'ALT',
                        'PAUSE',
                        'CAPS_LOCK',
                        'KANA',
                        'EISU',
                        'JUNJA',
                        'FINAL',
                        'HANJA',
                        '',
                        'ESCAPE',
                        'CONVERT',
                        'NONCONVERT',
                        'ACCEPT',
                        'MODECHANGE',
                        'SPACE',
                        'PAGE_UP',
                        'PAGE_DOWN',
                        'END',
                        'HOME',
                        'LEFT ARROW',
                        'UP ARROW',
                        'RIGHT ARROW',
                        'DOWN ARROW',
                        'SELECT',
                        'PRINT',
                        'EXECUTE',
                        'PRINTSCREEN',
                        'INSERT',
                        'DELETE',
                        '',
                        '0',
                        '1',
                        '2',
                        '3',
                        '4',
                        '5',
                        '6',
                        '7',
                        '8',
                        '9',
                        'COLON',
                        'SEMICOLON',
                        'LESS_THAN',
                        'EQUALS',
                        'GREATER_THAN',
                        'QUESTION_MARK',
                        'AT',
                        'A',
                        'B',
                        'C',
                        'D',
                        'E',
                        'F',
                        'G',
                        'H',
                        'I',
                        'J',
                        'K',
                        'L',
                        'M',
                        'N',
                        'O',
                        'P',
                        'Q',
                        'R',
                        'S',
                        'T',
                        'U',
                        'V',
                        'W',
                        'X',
                        'Y',
                        'Z',
                        'OS_KEY',
                        '',
                        'CONTEXT_MENU',
                        '',
                        'SLEEP',
                        'NUMPAD0',
                        'NUMPAD1',
                        'NUMPAD2',
                        'NUMPAD3',
                        'NUMPAD4',
                        'NUMPAD5',
                        'NUMPAD6',
                        'NUMPAD7',
                        'NUMPAD8',
                        'NUMPAD9',
                        'MULTIPLY',
                        'ADD',
                        'SEPARATOR',
                        'SUBTRACT',
                        'DECIMAL',
                        'DIVIDE',
                        'F1',
                        'F2',
                        'F3',
                        'F4',
                        'F5',
                        'F6',
                        'F7',
                        'F8',
                        'F9',
                        'F10',
                        'F11',
                        'F12',
                        'F13',
                        'F14',
                        'F15',
                        'F16',
                        'F17',
                        'F18',
                        'F19',
                        'F20',
                        'F21',
                        'F22',
                        'F23',
                        'F24',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        'NUM_LOCK',
                        'SCROLL_LOCK',
                        'WIN_OEM_FJ_JISHO',
                        'WIN_OEM_FJ_MASSHOU',
                        'WIN_OEM_FJ_TOUROKU',
                        'WIN_OEM_FJ_LOYA',
                        'WIN_OEM_FJ_ROYA',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        'CIRCUMFLEX',
                        'EXCLAMATION',
                        'DOUBLE_QUOTE',
                        'HASH',
                        'DOLLAR',
                        'PERCENT',
                        'AMPERSAND',
                        'UNDERSCORE',
                        'OPEN_PAREN',
                        'CLOSE_PAREN',
                        'ASTERISK',
                        'PLUS',
                        'PIPE',
                        'HYPHEN_MINUS',
                        'OPEN_CURLY_BRACKET',
                        'CLOSE_CURLY_BRACKET',
                        'TILDE',
                        '',
                        '',
                        '',
                        '',
                        'VOLUME_MUTE',
                        'VOLUME_DOWN',
                        'VOLUME_UP',
                        '',
                        '',
                        'SEMICOLON',
                        'EQUALS',
                        'COMMA',
                        'MINUS',
                        'PERIOD',
                        'SLASH',
                        'BACK_QUOTE',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        'OPEN_BRACKET',
                        'BACK_SLASH',
                        'CLOSE_BRACKET',
                        'QUOTE',
                        '',
                        'META',
                        'ALTGR',
                        '',
                        'WIN_ICO_HELP',
                        'WIN_ICO_00',
                        '',
                        'WIN_ICO_CLEAR',
                        '',
                        '',
                        'WIN_OEM_RESET',
                        'WIN_OEM_JUMP',
                        'WIN_OEM_PA1',
                        'WIN_OEM_PA2',
                        'WIN_OEM_PA3',
                        'WIN_OEM_WSCTRL',
                        'WIN_OEM_CUSEL',
                        'WIN_OEM_ATTN',
                        'WIN_OEM_FINISH',
                        'WIN_OEM_COPY',
                        'WIN_OEM_AUTO',
                        'WIN_OEM_ENLW',
                        'WIN_OEM_BACKTAB',
                        'ATTN',
                        'CRSEL',
                        'EXSEL',
                        'EREOF',
                        'PLAY',
                        'ZOOM',
                        '',
                        'PA1',
                        'WIN_OEM_CLEAR',
                        ''
                    ];
                function ER(WT, Wj) {
                    var WJ = 'undefined' != typeof Symbol && WT[Symbol.iterator] || WT['@@iterator'];
                    if (!WJ) {
                        if (Array.isArray(WT) || (WJ = EA(WT)) || Wj && WT && 'number' == typeof WT.length) {
                            WJ && (WT = WJ);
                            var WR = 0, WL = function () {
                                };
                            return {
                                's': WL,
                                'n': function () {
                                    ;
                                    return WR >= WT.length ? { 'done': true } : {
                                        'done': false,
                                        'value': WT[WR++]
                                    };
                                },
                                'e': function (WN) {
                                    throw WN;
                                },
                                'f': WL
                            };
                        }
                        throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }
                    var WA, WI = true, WP = false;
                    return {
                        's': function () {
                            ;
                            WJ = WJ.call(WT);
                        },
                        'n': function () {
                            var WN = WJ.next();
                            return WI = WN.done, WN;
                        },
                        'e': function (WN) {
                            WP = true;
                            WA = WN;
                        },
                        'f': function () {
                            ;
                            try {
                                WI || null == WJ.return || WJ.return();
                            } finally {
                                if (WP) {
                                    throw WA;
                                }
                            }
                        }
                    };
                }
                function EL(WT) {
                    return function (Wj) {
                        ;
                        if (Array.isArray(Wj)) {
                            return EI(Wj);
                        }
                    }(WT) || function (Wj) {
                        ;
                        if ('undefined' != typeof Symbol && null != Wj[Symbol.iterator] || null != Wj['@@iterator']) {
                            return Array.from(Wj);
                        }
                    }(WT) || EA(WT) || (function () {
                        ;
                        throw new TypeError('Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }());
                }
                function EA(WT, Wj) {
                    ;
                    if (WT) {
                        if ('string' == typeof WT) {
                            return EI(WT, Wj);
                        }
                        var WJ = Object.prototype.toString.call(WT).slice(8, -1);
                        return 'Object' === WJ && WT.constructor && (WJ = WT.constructor.name), 'Map' === WJ || 'Set' === WJ ? Array.from(WT) : 'Arguments' === WJ || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(WJ) ? EI(WT, Wj) : void 0;
                    }
                }
                function EI(WT, Wj) {
                    ;
                    (null == Wj || Wj > WT.length) && (Wj = WT.length);
                    for (var WJ = 0, WR = new Array(Wj); WJ < Wj; WJ++) {
                        WR[WJ] = WT[WJ];
                    }
                    return WR;
                }
                var EP = false, EN = false, EW = {
                        cameraSizeMultiplier: aX(aQ(r7.value), 1),
                        maxDrones: aX(aQ(r9.value), 1),
                        name: aI(rH.value.trim(), ''),
                        barrels: HI(Wj.barrels || []),
                        cameraSizeMultiplier: aX(Wj.weaponCameraSizeMultiplier, 1),
                        maxDrones: aX(Wj.maxWeaponDrones, 3),
                        name: Wj.weaponUpgradeName || '',
                        barrels: HI(Wj.barrels || []),
                        cameraSizeMultiplier: aX(Wj.cameraSizeMultiplier, 1),
                        maxDrones: aX(Wj.maxDrones, 3),
                        name: Wj.name || '',
                        barrels: HI(HR(WB.weapon.barrels)),
                        cameraSizeMultiplier: WB.weapon.cameraSizeMultiplier,
                        maxDrones: WB.weapon.maxDrones,
                        name: WB.weapon.name
                    }, ED = {
                        cameraSizeMultiplier: aX(aQ(r8.value), 1),
                        maxDrones: aX(aQ(rO.value), 1),
                        sides: CE(aX(aQ(rY.value), 0)),
                        outerSides: CE(aX(aQ(rM.value), 0)),
                        outerSize: aX(aQ(rS.value), 0),
                        healthMultiplier: aX(aQ(rK.value), 1),
                        bodyDamageMultiplier: aX(aQ(rC.value), 1),
                        speedMultiplier: aX(aQ(rE.value), 1),
                        name: aI(rZ.value.trim(), ''),
                        type: aX(rj.value, 0),
                        level: Math.ceil(C7(aX(aQ(rJ.value), 1), Math.max(1 == ED.type ? 75 : 1), 500)),
                        size: Math.min(50, Math.max(0, aX(aQ(rR.value), 0.01))),
                        team: rA.value,
                        visualTeam: rP.value,
                        radiant: Math.round(C7(aX(aQ(rN.value), 0), 0, 20)),
                        overrideTankName: aI(rW.value.trim(), ''),
                        gadgets: HP(Wj.gadgets || []),
                        layers: HA(Wj.layers || []),
                        outerSize: Wj.outerSize || 0,
                        sides: CE(Wj.sides || 0),
                        outerSides: CE(Wj.outerSides || 0),
                        healthMultiplier: aX(Wj.healthMultiplier, 1),
                        bodyDamageMultiplier: aX(Wj.bodyDamageMultiplier, 1),
                        speedMultiplier: aX(Wj.speedMultiplier, 1),
                        cameraSizeMultiplier: aX(Wj.bodyCameraSizeMultiplier, 1),
                        maxDrones: aX(Wj.maxBodyDrones, 3),
                        name: Wj.bodyUpgradeName || '',
                        level: aX(Wj.level, 1),
                        size: aX(Wj.size, 1),
                        type: aX(Wj.tankType, 0),
                        radiant: aX(Wj.radiant, 0),
                        team: aG(Wj.team, 0),
                        visualTeam: aG(Wj.visualTeam, void 0),
                        overrideTankName: Wj.overrideTankName || '',
                        gadgets: HP(Wj.gadgets || []),
                        layers: HA(Wj.layers || []),
                        outerSize: Wj.outerSize || 0,
                        sides: CE(Wj.sides || 0),
                        outerSides: CE(Wj.outerSides || 0),
                        healthMultiplier: aX(Wj.healthMultiplier, 1),
                        bodyDamageMultiplier: aX(Wj.bodyDamageMultiplier, 1),
                        speedMultiplier: aX(Wj.speedMultiplier, 1),
                        cameraSizeMultiplier: aX(Wj.cameraSizeMultiplier, 1),
                        maxDrones: aX(Wj.maxDrones, 3),
                        name: Wj.name || '',
                        gadgets: HP(HL(WB.body.gadgets)),
                        layers: HA(HJ(WB.body.layers)),
                        sides: WB.body.sides,
                        outerSides: WB.body.outerSides,
                        outerSize: WB.body.outerSize,
                        healthMultiplier: WB.body.healthMultiplier,
                        bodyDamageMultiplier: WB.body.bodyDamageMultiplier,
                        speedMultiplier: WB.body.speedMultiplier,
                        cameraSizeMultiplier: WB.body.cameraSizeMultiplier,
                        maxDrones: WB.body.maxDrones,
                        name: WB.body.name,
                        type: WB.body.type,
                        level: WB.body.level,
                        size: WB.body.size,
                        radiant: WB.body.radiant,
                        team: WB.body.team,
                        visualTeam: WB.body.visualTeam,
                        overrideTankName: WB.body.overrideTankName
                    }, EQ = document.getElementById('tank-editor'), EX = document.getElementById('tank-editor-menu'), EG = document.getElementById('barrels-text'), Ez = document.getElementById('gadgets-text'), EF = document.getElementById('layers-text'), Eq = document.getElementById('barrels-content'), EU = document.getElementById('gadgets-content'), EB = document.getElementById('layers-content'), r0 = document.getElementById('tank-editor-main'), r1 = document.getElementById('tank-editor-selection');
                function r2() {
                    ;
                    (EN = !EN) ? (EX.classList.remove('hide'), h5 = false, h6 = false, h3 = false, h4 = false, VR(false), hG(), hA(), document.body.addEventListener('mousemove', r4), hL()) : (document.body.removeEventListener('mousemove', r4), r3.classList.add('hide'), EX.classList.add('hide'), VR(true));
                }
                r1.classList.add('hidden');
                document.getElementById('button-edit').onclick = function () {
                    r2();
                };
                var r3 = document.getElementById('tank-editor-tooltip');
                function r4(WT) {
                    var Wj = WT.target.getAttribute('data-tooltip');
                    Wj && !lz ? (r3.innerText = Wj, r3.classList.remove('hide')) : r3.classList.add('hide');
                    r3.style.top = WT.y + 'px';
                    r3.style.left = WT.x + 'px';
                }
                document.getElementById('game-canvas').onclick = function (WT) {
                    var Wj;
                    EN && (Wj = WT.ctrlKey || WT.shiftKey || WT.metaKey, V4 = true, V5 = Wj, V8 = V7, V7 = [], LE = []);
                };
                for (var r5 = document.getElementsByClassName('tank-editor-collapsible'), r6 = 0; r6 < r5.length; r6++) {
                    r5[r6].addEventListener('click', function () {
                        ;
                        this.classList.toggle('active');
                        var WT = this.nextElementSibling;
                        'flex' === WT.style.display ? WT.style.display = 'none' : WT.style.display = 'flex';
                    });
                }
                var r7 = document.getElementById('weapon-camera-size-multiplier'), r8 = document.getElementById('body-camera-size-multiplier'), r9 = document.getElementById('weapon-max-drones'), rO = document.getElementById('body-max-drones'), rY = document.getElementById('sides'), rM = document.getElementById('outersides'), rS = document.getElementById('outersize'), rK = document.getElementById('health'), rC = document.getElementById('bodydamage'), rE = document.getElementById('speed'), rH = document.getElementById('weapon-name'), rZ = document.getElementById('body-name'), rV = document.getElementById('save-as-png-area'), rT = document.getElementById('save-as-png'), rj = document.getElementById('tank-type'), rJ = document.getElementById('tank-level'), rR = document.getElementById('tank-size'), rL = document.getElementById('tank-team'), rA = document.getElementById('tank-team-color'), rI = document.getElementById('visual-tank-team'), rP = document.getElementById('visual-tank-team-color'), rN = document.getElementById('radiant'), rW = document.getElementById('tank-name'), rD = HN(rL, 'option');
                rD.value = 'custom';
                rD.innerText = 'Custom...';
                KF.c.forEach(function (WT) {
                    var Wj = HN(rL, 'option');
                    Wj.value = WT.value;
                    Wj.innerText = WT.name;
                });
                var rQ = HN(rI, 'option');
                function rX(WT) {
                    ;
                    CJ(WT) ? (rA.value = WT, rL.value = 'custom', rA.classList.remove('hidden')) : (rL.value = WT, rA.classList.add('hidden'));
                }
                function rG(WT) {
                    ;
                    CJ(WT) ? (rP.value = WT, rI.value = 'custom', rP.classList.remove('hidden')) : (rI.value = WT, rP.classList.add('hidden'));
                }
                function rz() {
                    var WT = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    H5(false, false);
                    H7(false, false);
                    rU();
                    WT && H9();
                }
                rQ.value = 'custom';
                rQ.innerText = 'Custom...';
                KF.a.forEach(function (WT) {
                    var Wj = HN(rI, 'option');
                    Wj.value = WT.value;
                    Wj.innerText = WT.name;
                });
                r7.onchange = function () {
                    ;
                    ;
                    r7.value = Math.max(0.1, EW.cameraSizeMultiplier);
                    l5();
                    H5();
                };
                r8.onchange = function () {
                    ;
                    ;
                    r8.value = Math.max(0.1, ED.cameraSizeMultiplier);
                    l4();
                    H7();
                };
                r9.onchange = function () {
                    ;
                    ;
                    r9.value = Math.max(0, EW.maxDrones);
                    l5();
                    H5();
                };
                rO.onchange = function () {
                    ;
                    ;
                    rO.value = Math.max(0, ED.maxDrones);
                    l4();
                    H7();
                };
                rY.onchange = function () {
                    ;
                    ;
                    rY.value = ED.sides;
                    l4();
                    H7();
                };
                rM.onchange = function () {
                    ;
                    ;
                    rM.value = ED.outerSides;
                    l4();
                    H7();
                };
                rS.onchange = function () {
                    ;
                    ;
                    rS.value = ED.outerSize;
                    l4();
                    H7();
                };
                rK.onchange = function () {
                    ;
                    ;
                    rK.value = ED.healthMultiplier;
                    l4();
                    H7();
                };
                rC.onchange = function () {
                    ;
                    ;
                    rC.value = ED.bodyDamageMultiplier;
                    l4();
                    H7();
                };
                rE.onchange = function () {
                    ;
                    ;
                    rE.value = ED.speedMultiplier;
                    l4();
                    H7();
                };
                rH.onchange = function () {
                    ;
                    ;
                    rH.value = EW.name;
                    l5();
                    H5();
                };
                rZ.onchange = function () {
                    ;
                    ;
                    rZ.value = ED.name;
                    l4();
                    H7();
                };
                rT.onclick = function () {
                    ;
                    LN({
                        'sides': ED.sides,
                        'outerSides': ED.outerSides,
                        'outerSize': ED.outerSize,
                        'gadgets': C8(ED.gadgets),
                        'layers': C8(ED.layers),
                        'barrels': C8(EW.barrels),
                        'd': C9(90),
                        'filename': rV.value.replace(/[\/|\\:*?"<>]/g, ' ').trim(),
                        'size': T7.size,
                        'team': T7.team
                    });
                };
                rV.addEventListener('keydown', function (WT) {
                    ;
                    if (WT.keyCode == ET.enter) {
                        rT.click();
                        rV.blur();
                    }
                });
                rj.onchange = function () {
                    ;
                    ;
                    rj.value = ED.type;
                    rJ.onchange();
                    l4();
                    H7();
                };
                rJ.onchange = function () {
                    ;
                    ;
                    rJ.value = ED.level;
                    l4();
                    H7();
                };
                rR.onchange = function () {
                    ;
                    ;
                    rR.value = ED.size;
                    l4();
                    H7();
                };
                rL.onchange = function () {
                    ;
                    'custom' == rL.value ? (CJ(ED.team) || (ED.team = '#ffffff'), rA.value = ED.team, rA.classList.remove('hidden')) : (ED.team = aX(rL.value, 0), rL.value = ED.team, rA.classList.add('hidden'));
                    l4();
                    H7();
                };
                rA.onchange = function () {
                    ;
                    CJ(rA.value) || (CJ('#' + rA.value) ? rA.value = '#' + rA.value : rA.value = ED.team);
                    ;
                    l4();
                    H7();
                };
                rI.onchange = function () {
                    ;
                    'custom' == rI.value ? (CJ(ED.visualTeam) || (ED.visualTeam = '#ffffff'), rP.value = ED.visualTeam, rP.classList.remove('hidden')) : (ED.visualTeam = aX(rI.value, void 0), rI.value = ED.visualTeam, rP.classList.add('hidden'));
                    l4();
                    H7();
                };
                rP.onchange = function () {
                    ;
                    CJ(rP.value) || (CJ('#' + rP.value) ? rP.value = '#' + rP.value : rP.value = ED.visualTeam);
                    ;
                    l4();
                    H7();
                };
                rN.onchange = function () {
                    ;
                    ;
                    rN.value = ED.radiant;
                    l4();
                    H7();
                };
                rW.onchange = function () {
                    ;
                    ;
                    rW.value = ED.overrideTankName;
                    l4();
                    H7();
                };
                var rF = [];
                function rq(WT) {
                    ;
                    return 0 == WT.stack.length ? {
                        'barrel': EW.barrels,
                        'gadget': ED.gadgets,
                        'layer': ED.layers
                    }[WT.type][WT.index] : function Wj(WJ, WR, WL) {
                        ;
                        if (1 == WR.length) {
                            var WA = WJ[WR[0]];
                            return WA && 3 == WA.type && WA.tank ? {
                                'barrel': WA.tank.barrels,
                                'gadget': WA.tank.gadgets,
                                'layer': WA.tank.layers
                            }[WL.type][WL.index] : void 0;
                        }
                        var WI = WJ[WR.shift()];
                        return WI && 3 == WI.type && WI.tank ? Wj(WI.tank.gadgets, WR, WL) : void 0;
                    }(ED.gadgets, EL(WT.stack), WT);
                }
                function rU(WT, Wj) {
                    var WJ = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], WR = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [];
                    if (WT) {
                        var WL = -1;
                        if (WJ || 1 == rF.length) {
                            for (var WA = 0; WA < rF.length; WA++) {
                                var WI = rF[WA];
                                if (WI.type == WT && WI.index == Wj && Cq(WI.stack, WR)) {
                                    WL = WA;
                                    break;
                                }
                            }
                        }
                        -1 == WL ? (WJ || (rF = []), rF.push({
                            'type': WT,
                            'index': Wj,
                            'stack': WR
                        })) : rF.splice(WL, 1);
                    }
                    0 == rF.length ? (r0.classList.remove('hidden'), r1.classList.add('hidden')) : (r0.classList.add('hidden'), r1.classList.remove('hidden'));
                    var WP, WN = [], WW = ER(rF);
                    try {
                        for (WW.s(); !(WP = WW.n()).done;) {
                            var WD = WP.value;
                            rq(WD) || WN.push(WD);
                        }
                    } catch (dS) {
                        WW.e(dS);
                    } finally {
                        WW.f();
                    }
                    rF = rF.filter(function (dK) {
                        ;
                        return !WN.includes(dK);
                    });
                    for (var WQ = [
                                [
                                    aF,
                                    'barrel',
                                    EW.barrels
                                ],
                                [
                                    aq,
                                    'gadget',
                                    ED.gadgets
                                ],
                                [
                                    aU,
                                    'layer',
                                    ED.layers
                                ]
                            ], Wk = function dK(dC) {
                                var dE, dH = ER(dC.barrels);
                                try {
                                    for (dH.s(); !(dE = dH.n()).done;) {
                                        delete dE.value.selected;
                                    }
                                } catch (dR) {
                                    dH.e(dR);
                                } finally {
                                    dH.f();
                                }
                                var dZ, dV = ER(dC.gadgets);
                                try {
                                    for (dV.s(); !(dZ = dV.n()).done;) {
                                        var dT = dZ.value;
                                        delete dT.selected;
                                        3 == dT.type && dT.tank && dK(dT.tank);
                                    }
                                } catch (dL) {
                                    dV.e(dL);
                                } finally {
                                    dV.f();
                                }
                                var dj, dJ = ER(dC.layers);
                                try {
                                    for (dJ.s(); !(dj = dJ.n()).done;) {
                                        delete dj.value.selected;
                                    }
                                } catch (dA) {
                                    dJ.e(dA);
                                } finally {
                                    dJ.f();
                                }
                            }, WX = function dC(dE) {
                                var dH, dZ = ER(dE);
                                try {
                                    for (dZ.s(); !(dH = dZ.n()).done;) {
                                        var dV = dH.value;
                                        dV.button.classList.remove('selected');
                                        dV.tank && (dC(dV.tank.barrels), dC(dV.tank.gadgets), dC(dV.tank.layers));
                                    }
                                } catch (dT) {
                                    dZ.e(dT);
                                } finally {
                                    dZ.f();
                                }
                            }, WG = 0, Wz = WQ; WG < Wz.length; WG++) {
                        var WF = Wz[WG], Wq = WF[0], WU = WF[2];
                        WX(Wq);
                        var WB, d0 = ER(WU);
                        try {
                            for (d0.s(); !(WB = d0.n()).done;) {
                                var d1 = WB.value;
                                delete d1.selected;
                                'gadget' == WF[1] && 3 == d1.type && Wk(d1.tank);
                            }
                        } catch (dE) {
                            d0.e(dE);
                        } finally {
                            d0.f();
                        }
                    }
                    var d2, d3 = function dH(dZ, dV, dT) {
                            ;
                            if (1 == dV.length) {
                                var dj = dZ[dV[0]];
                                return {
                                    'barrel': dj.tank.barrels,
                                    'gadget': dj.tank.gadgets,
                                    'layer': dj.tank.layers
                                }[dT.type][dT.index];
                            }
                            return dH(dZ[dV.shift()].tank.gadgets, dV, dT);
                        }, d4 = ER(rF);
                    try {
                        for (d4.s(); !(d2 = d4.n()).done;) {
                            var d5, d6 = d2.value, d7 = ER(WQ);
                            try {
                                for (d7.s(); !(d5 = d7.n()).done;) {
                                    var d8 = d5.value, d9 = d8[0], dO = d8[1];
                                    d8[2];
                                    if (0 == d6.stack.length) {
                                        if (d6.type == dO) {
                                            var dY = d9[d6.index].button;
                                            dY.classList.add('selected');
                                        }
                                    } else {
                                        if ('gadget' == dO) {
                                            var dM = d3(d9, EL(d6.stack), d6).button;
                                            dM.classList.add('selected');
                                        }
                                    }
                                }
                            } catch (dZ) {
                                d7.e(dZ);
                            } finally {
                                d7.f();
                            }
                        }
                    } catch (dV) {
                        d4.e(dV);
                    } finally {
                        d4.f();
                    }
                    aT();
                }
                function rB() {
                    rF = [];
                    rU();
                }
                var a0 = [
                        {
                            'value': 0,
                            'name': 'Cannon'
                        },
                        {
                            'value': 1,
                            'name': 'Drone Spawner'
                        },
                        {
                            'value': 2,
                            'name': 'Trap Launcher'
                        },
                        {
                            'value': 7,
                            'name': 'Rocket Launcher'
                        },
                        {
                            'value': 3,
                            'name': 'Minion Spawner'
                        },
                        {
                            'value': 8,
                            'name': 'Custom Trap Launcher'
                        },
                        {
                            'value': 6,
                            'name': 'Nothing Barrel'
                        },
                        {
                            'value': 4,
                            'name': 'Player Spawner'
                        },
                        {
                            'value': 5,
                            'name': 'Polyp Spawner'
                        },
                        {
                            'value': 9,
                            'name': 'Polygon Spawner'
                        }
                    ], a1 = [
                        {
                            'value': 0,
                            'name': 'Auto Cannon'
                        },
                        {
                            'value': 1,
                            'name': 'Mounted Drone Spawner'
                        },
                        {
                            'value': 2,
                            'name': 'Aura'
                        },
                        {
                            'value': 3,
                            'name': 'Tank Section'
                        }
                    ], a2 = [
                        {
                            'value': 0,
                            'name': 'Damaging'
                        },
                        {
                            'value': 1,
                            'name': 'Healing'
                        },
                        {
                            'value': 3,
                            'name': 'Repulsion'
                        },
                        {
                            'value': 4,
                            'name': 'Attraction'
                        },
                        {
                            'value': 2,
                            'name': 'Cosmetic'
                        }
                    ], a3 = [
                        {
                            'value': void 0,
                            'name': 'Unset'
                        },
                        {
                            'value': 0,
                            'name': 'Cannon'
                        },
                        {
                            'value': 1,
                            'name': 'Drone Spawner'
                        },
                        {
                            'value': 2,
                            'name': 'Trap Launcher'
                        },
                        {
                            'value': 7,
                            'name': 'Rocket Launcher'
                        },
                        {
                            'value': 3,
                            'name': 'Minion Spawner'
                        },
                        {
                            'value': 8,
                            'name': 'Custom Trap Launcher'
                        },
                        {
                            'value': 6,
                            'name': 'Nothing Barrel'
                        },
                        {
                            'value': 4,
                            'name': 'Player Spawner'
                        },
                        {
                            'value': 5,
                            'name': 'Polyp Spawner'
                        },
                        {
                            'value': 9,
                            'name': 'Polygon Spawner'
                        },
                        {
                            'value': -1,
                            'name': 'Spike'
                        },
                        {
                            'value': -2,
                            'name': 'Inverse Spike'
                        },
                        {
                            'value': -10,
                            'name': 'Invisible'
                        }
                    ], a4 = KF.d, a5 = [
                        {
                            'name': 'Normal',
                            'value': 0
                        },
                        {
                            'name': 'Inverse',
                            'value': 1
                        },
                        {
                            'name': 'Always',
                            'value': 2
                        },
                        {
                            'name': 'Never',
                            'value': 3
                        },
                        {
                            'name': 'Passive Mode Enabled',
                            'value': 7
                        },
                        {
                            'name': 'Passive Mode Disabled',
                            'value': 8
                        },
                        {
                            'name': 'Under Drone Limit',
                            'value': 4
                        },
                        {
                            'name': 'Not Under Drone Limit',
                            'value': 5
                        },
                        {
                            'name': 'Death',
                            'value': 6
                        }
                    ], a6 = [
                        {
                            'name': 'Passive Mode Disabled',
                            'value': 2
                        },
                        {
                            'name': 'Passive Mode Enabled',
                            'value': 3
                        },
                        {
                            'name': 'Always',
                            'value': 0
                        },
                        {
                            'name': 'Never',
                            'value': 1
                        },
                        {
                            'name': 'Shooting',
                            'value': 4
                        },
                        {
                            'name': 'Not Shooting',
                            'value': 5
                        },
                        {
                            'name': 'Under Drone Limit',
                            'value': 6
                        },
                        {
                            'name': 'Not Under Drone Limit',
                            'value': 7
                        }
                    ], a7 = [
                        {
                            'name': 'Rotate',
                            'value': 0
                        },
                        {
                            'name': 'Return to Base Rotation',
                            'value': 1
                        }
                    ], a8 = [
                        {
                            'name': 'Static',
                            'value': 0
                        },
                        {
                            'name': 'Auto Cannon',
                            'value': 1
                        },
                        {
                            'name': 'Constant',
                            'value': 2
                        },
                        {
                            'name': 'Point At Mouse',
                            'value': 4
                        },
                        {
                            'name': 'Conditional',
                            'value': 3
                        }
                    ], a9 = [
                        {
                            'name': 'Always',
                            'value': 0
                        },
                        {
                            'name': 'Never',
                            'value': 1
                        },
                        {
                            'name': 'Shooting',
                            'value': 2
                        },
                        {
                            'name': 'Not Shooting',
                            'value': 3
                        },
                        {
                            'name': 'Passive Mode Enabled',
                            'value': 6
                        },
                        {
                            'name': 'Passive Mode Disabled',
                            'value': 7
                        },
                        {
                            'name': 'Under Drone Limit',
                            'value': 4
                        },
                        {
                            'name': 'Not Under Drone Limit',
                            'value': 5
                        }
                    ], aO = [
                        {
                            'name': 'Stop',
                            'value': 0
                        },
                        {
                            'name': 'Reverse',
                            'value': 1
                        },
                        {
                            'name': 'Wrap Around',
                            'value': 2
                        }
                    ], aY = [
                        {
                            'name': 'Stop',
                            'value': 0
                        },
                        {
                            'name': 'Reverse',
                            'value': 1
                        },
                        {
                            'name': 'Reset',
                            'value': 2
                        },
                        {
                            'name': 'Rotate to Base Rotation',
                            'value': 3
                        }
                    ], aM = [
                        {
                            'name': 'Auto Cannon',
                            'bulletName': 'Bullet',
                            'barrelColor': true,
                            'bulletStats': true,
                            'defaultLength': 0.5,
                            'defaultWidth': 0.25
                        },
                        {
                            'name': 'Mounted Drone Spawner',
                            'bulletName': 'Drone',
                            'barrelColor': true,
                            'bulletStats': true,
                            'droneStats': true,
                            'defaultWidth': 0.5
                        },
                        {
                            'name': 'Aura',
                            'bulletName': 'Aura',
                            'barrelColor': true,
                            'defaultWidth': 0.6
                        },
                        {
                            'name': 'Tank Section',
                            'bulletName': 'Tank',
                            'defaultWidth': 0.5
                        }
                    ], aS = [
                        {
                            'value': void 0,
                            'name': 'Unset'
                        },
                        {
                            'value': -1,
                            'name': 'Fallen (Light Gray)'
                        },
                        {
                            'value': 2,
                            'name': 'Celestial (Pink)'
                        },
                        {
                            'value': 10,
                            'name': 'Blue'
                        },
                        {
                            'value': 11,
                            'name': 'Red'
                        },
                        {
                            'value': 12,
                            'name': 'Green'
                        },
                        {
                            'value': 13,
                            'name': 'Purple'
                        },
                        {
                            'value': 5,
                            'name': 'Black'
                        },
                        {
                            'value': 6,
                            'name': 'White'
                        },
                        {
                            'value': 3,
                            'name': 'Barrel (Gray)'
                        },
                        {
                            'value': 7,
                            'name': 'Spike (Dark Gray)'
                        },
                        {
                            'value': 20,
                            'name': 'Triangle Yellow'
                        },
                        {
                            'value': 21,
                            'name': 'Square Red'
                        },
                        {
                            'value': 22,
                            'name': 'Pentagon Blue'
                        },
                        {
                            'value': 23,
                            'name': 'Hexagon Orange'
                        },
                        {
                            'value': 24,
                            'name': 'Heptagon Green'
                        },
                        {
                            'value': 25,
                            'name': 'Octagon Blue'
                        },
                        {
                            'value': 26,
                            'name': 'Nonagon Dark Purple'
                        },
                        {
                            'value': 27,
                            'name': 'Decagon Dark Blue'
                        },
                        {
                            'value': 28,
                            'name': 'Hendecagon Black'
                        },
                        {
                            'value': 29,
                            'name': 'Dodecagon Dark Grey'
                        },
                        {
                            'value': 30,
                            'name': 'Tridecagon White'
                        }
                    ], aK = [
                        {
                            'value': void 0,
                            'name': 'Default (Gray)'
                        },
                        {
                            'value': -1,
                            'name': 'Fallen (Light Gray)'
                        },
                        {
                            'value': 2,
                            'name': 'Celestial (Pink)'
                        },
                        {
                            'value': 10,
                            'name': 'Blue'
                        },
                        {
                            'value': 11,
                            'name': 'Red'
                        },
                        {
                            'value': 12,
                            'name': 'Green'
                        },
                        {
                            'value': 13,
                            'name': 'Purple'
                        },
                        {
                            'value': 5,
                            'name': 'Black'
                        },
                        {
                            'value': 6,
                            'name': 'White'
                        },
                        {
                            'value': 7,
                            'name': 'Spike (Dark Gray)'
                        },
                        {
                            'value': 20,
                            'name': 'Triangle Yellow'
                        },
                        {
                            'value': 21,
                            'name': 'Square Red'
                        },
                        {
                            'value': 22,
                            'name': 'Pentagon Blue'
                        },
                        {
                            'value': 23,
                            'name': 'Hexagon Orange'
                        },
                        {
                            'value': 24,
                            'name': 'Heptagon Green'
                        },
                        {
                            'value': 25,
                            'name': 'Octagon Blue'
                        },
                        {
                            'value': 26,
                            'name': 'Nonagon Dark Purple'
                        },
                        {
                            'value': 27,
                            'name': 'Decagon Dark Blue'
                        },
                        {
                            'value': 28,
                            'name': 'Hendecagon Black'
                        },
                        {
                            'value': 29,
                            'name': 'Dodecagon Dark Grey'
                        },
                        {
                            'value': 30,
                            'name': 'Tridecagon White'
                        }
                    ];
                function aC(WT, Wj, WJ, WR, WL) {
                    var WA = arguments.length > 5 && void 0 !== arguments[5] && arguments[5], WI = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : void 0;
                    aV.push({
                        'type': 0,
                        'subtype': WR,
                        'id': WJ,
                        'name': WT,
                        'description': Wj,
                        'options': WL,
                        'deleteIfNaN': WA,
                        'placeholder': WI
                    });
                }
                function aE(WT, Wj, WJ, WR, WL) {
                    ;
                    aV.push({
                        'type': 1,
                        'subtype': WL,
                        'id': WR,
                        'name': WT,
                        'description': Wj,
                        'placeholder': WJ
                    });
                }
                function aH(WT, Wj, WJ, WR, WL, WA) {
                    ;
                    aV.push({
                        'type': 2,
                        'subtype': WA,
                        'id': WJ,
                        'name': WT,
                        'description': Wj,
                        'placeholder': WR,
                        'isNumber': WL
                    });
                }
                function aZ(WT) {
                    ;
                    aV.push({
                        'type': -1,
                        'name': WT,
                        'id': WT
                    });
                }
                var aV = [];
                function aT() {
                    var WT, Wj = [], WJ = ER(rF);
                    try {
                        var WR = function () {
                            var dO = WT.value;
                            if (WL = rq(dO), WA = 'Error when loading object: invalid selected object', !WL) {
                                return 'continue';
                            }
                            switch (dO.type) {
                            case 'barrel':
                                WA = aB(WL);
                                break;
                            case 'gadget':
                                WA = H0(WL);
                                break;
                            case 'layer':
                                WA = H1(WL);
                            }
                            switch (WL.selected = true, aV = [], dO.type) {
                            case 'barrel':
                                var dY = a4[WL.type];
                                aC('Barrel Type', 'The type of the barrel. Each barrel type functions and looks differently.', 'type', 1, a0, false, 0), aC('Override Visual Type', 'Overrides the look of the barrel, making it look like another barrel type.', 'visualType', 0, a3, true), dY.minionStats && aE(''.concat(dY.bulletName, ' Tank Code'), 'The tank code of the '.concat(dY.bulletName.toLowerCase(), '. It can have barrels, gadgets, and layers, just like any other tank.'), 'enter a "full tank" code here', 'minion', 0), aZ('Size and Position'), aH('Rotation', 'The barrel\'s rotation, in degrees.', 'rot', 0, true, 1), aH('Length', 'The length of the barrel. '.concat(dY.bulletName, 's are shot from the tip of the barrel.'), 'length', dY.defaultLength, true, 0), aH('Width', 'The width of the barrel. Wider barrels shoot larger '.concat(dY.bulletName.toLowerCase(), 's, and deal more recoil.'), 'width', dY.defaultWidth, true, 0), aH('Side Offset', 'The barrel\'s offset to the side.', 'offset', 0, true, 0), aH('Forward Offset', 'The barrel\'s offset forwards. Use negative numbers to offset it backwards.', 'distance', 0, true, 0), aZ('Attributes'), aC('Barrel Color', 'The color of the barrel.', 'color', 3, aK, true), aC('Border', 'Whether or not the barrel has a darker border around it.', 'hideBorder', 0, [
                                    {
                                        'value': void 0,
                                        'name': 'On'
                                    },
                                    {
                                        'value': 1,
                                        'name': 'Off'
                                    }
                                ], true), dY.polygonStats && (aC('Polygon Color Type', 'The color of the polygon. \'Polygon Color\' uses the color the polygon would normally be, and \'Team Color\' uses the color of the polygon\'s team.', 'colorType', 0, [
                                    'Polygon Color',
                                    'Team Color'
                                ], false, 0), aC('Polygon Team', 'The team of the polygon. Polygons can\'t damage entities on their team, unless the team name says (FFA). All naturally spawning polygons are on the \'Polygon\' team.', 'team', 3, KF.b, true, 1), aH('Minimum '.concat(dY.bulletName, ' Size'), 'The minimum number of sides the polygon will have.', 'minSize', 3, true, 2), aH('Maximum '.concat(dY.bulletName, ' Size'), 'The maximum number of sides the polygon will have. Polygon sizes are still limited by the map size.', 'maxSize', 3, true, 2), aH(''.concat(dY.bulletName, ' Radiant Level'), 'The radiant level of the polygon. Radiant polygons change colors over time, and drop more XP.', 'radiant', 0, true, 5)), (dY.minionStats || dY.bulletStats) && aC('Override '.concat(dY.bulletName, ' Color'), 'Overrides the color of the '.concat(dY.bulletName.toLowerCase(), ', no mattter your team.'), 'team', 3, aS, true), dY.noShootTrigger || aC('Shoot Trigger', 'What causes the barrel to shoot. Most barrels use \'Normal\' by default, except for Drone Spawners and Minion Spawners.', 'shootTrigger', 0, [{
                                        'value': void 0,
                                        'name': 'Default ('.concat(a5.find(function (dS) {
                                            ;
                                            return dS.value == dY.defaultShootTrigger;
                                        }).name, ')')
                                    }].concat(a5), true), dY.droneStats && (aH(''.concat(dY.bulletName, ' Minimum Distance'), ''.concat(dY.bulletName, 's closer than this to their target will move away from it.'), 'minDist', dY.minionStats ? 6 : 0, true, 0), aH(''.concat(dY.bulletName, ' Maximum Distance'), ''.concat(dY.bulletName, 's farther away than this to their target will move closer to it.'), 'maxDist', dY.minionStats ? 10 : 0, true, 0)), aH('Reload', 'How long the barrel waits in between shots. The larger the number, the larger time in between shots.', 'reload', 1, true, 0), aH('Recoil', 'How much the barrel pushes you back when shooting. Recoil is also influenced by the '.concat(dY.bulletName.toLowerCase(), '\'s size.'), 'recoil', 1, true, 0), dY.extraBulletStats && (aH('Spread', 'How far (in degrees) the direction of shots are randomized.', 'spread', 0, true, 0), aH(''.concat(dY.bulletName, ' Size'), 'The size multiplier of the '.concat(dY.bulletName.toLowerCase(), '. Size is also influenced by the barrel width.'), 'size', 1, true, 0)), dY.minionStats && (aH(''.concat(dY.bulletName, ' Body Damage'), 'The body damage multiplier of the '.concat(dY.bulletName.toLowerCase(), '.'), 'damage', 1, true, 0), aH(''.concat(dY.bulletName, ' Speed'), 'The movement speed multiplier of the '.concat(dY.bulletName.toLowerCase(), '.'), 'speed', 1, true, 0), aH(''.concat(dY.bulletName, ' Health'), 'The health speed multiplier of the '.concat(dY.bulletName.toLowerCase(), '.'), 'penetration', 1, true, 0)), dY.launchSpeed && aH(''.concat(dY.bulletName, ' Launch Speed'), 'The speed at which the '.concat(dY.bulletName.toLowerCase(), ' is launched out of the barrel.'), 'speed', 1, true, 0), dY.bulletStats && (aH(''.concat(dY.bulletName, ' Damage'), 'The amount of damage dealt by the '.concat(dY.bulletName.toLowerCase(), '.'), 'damage', 1, true, 0), aH(''.concat(dY.bulletName, ' Speed'), 'The movement speed of the '.concat(dY.bulletName.toLowerCase(), '.'), 'speed', 1, true, 0), aH(''.concat(dY.bulletName, ' Penetration'), 'The penetration the '.concat(dY.bulletName.toLowerCase(), '. Higher penetration ').concat(dY.bulletName.toLowerCase(), 's last longer before despawning or dying.'), 'penetration', 1, true, 0)), dY.lifetimeAttribute && aH(''.concat(dY.bulletName, ' Lifetime'), 'The lifetime multiplier of the '.concat(dY.bulletName.toLowerCase(), '. Lifetime is also influenced by the ').concat(dY.bulletName.toLowerCase(), '\'s penetration.'), 'lifetime', 1, true, 0), aH('Barrel Delay', 'How long the barrel waits before it starts shooting. Influenced by reload.', 'delay', 0, true, 0);
                                break;
                            case 'gadget':
                                var dM = aM[WL.type];
                                aC('Gadget Type', 'The type of the gadget. Different gadgets function and look differently.', 'type', 2, a1, false, 0), 2 == WL.type && aC('Aura Type', 'The type of the aura. Each aura functions differently. Cosmetic auras are only for decoration.', 'subtype', 0, a2), aZ('Size and Position'), 2 == WL.type && aH('Aura Radius', 'The size of the aura.', 'radius', 4, true, 0), [
                                    0,
                                    3
                                ].includes(WL.type) ? aH('Base Rotation', 'The initial rotation of the '.concat(dM.name.toLowerCase(), '.'), 'baseRot', 0, true, 1) : aH('Rotation', 'The '.concat(dM.name.toLowerCase(), '\'s rotation'), 'rot', 0, true, 1), dM.defaultLength && aH('Length', ['The length of the auto cannon\'s barrel.'][WL.type], 'length', dM.defaultLength, true, 0), dM.defaultWidth && aH([
                                    'Width',
                                    'Size',
                                    'Size',
                                    'Size'
                                ][WL.type], [
                                    'The width of the auto cannon. The width influences the size of the bullet.',
                                    'The size of the mounted drone spawner.',
                                    'The size of the aura\'s base.',
                                    'The size of the tank section.'
                                ][WL.type], 'width', dM.defaultWidth, true, 0), aH('Side Offset', 'The '.concat(dM.name.toLowerCase(), '\'s offset to the side.'), 'offsetX', 0, true, 0), aH('Forward Offset', 'The '.concat(dM.name.toLowerCase(), '\'s offset forwards.'), 'offsetY', 0, true, 0), 3 == WL.type && (aZ('Movement'), aC('Rotation Type', 'How the tank section rotates. When it\'s locked, it doesn\'t rotate at all, and when it\'s unlocked, it rotates with its base.', 'rotationType', 0, a8), 1 == WL.rotationType && (aZ('Auto Cannon'), aC('Idle Behavior', 'What the tank section does when it doesn\'t have any targets. When set to "Rotate", the rotation speed is based on the tank section\'s idle rotation speed.', 'idleBehavior', 0, a7), 0 == WL.idleBehavior && aH('Idle Rotation Speed', 'How fast the tank section rotates when it doesn\'t have any targets and its idle behavior is set to "Rotate".', 'rotationSpeed', 1, true, 0), aH('Max Rotation Spread', 'The maximum distance that the tank section can rotate from its base rotation (in degrees). When it\'s past the maximum, it will rotate until it\'s back to the maximum. Set to 0 for no maximum.', 'maxSpread', 0, true, 6), WL.maxSpread > 0 && aC('Only Detect Within Max Spread', 'Whether or not the tank section can only detect and remember targets within its max rotation spread.', 'spreadDetection', 0, [
                                    {
                                        'value': 0,
                                        'name': 'On'
                                    },
                                    {
                                        'value': 1,
                                        'name': 'Off'
                                    }
                                ]), aH('Target Turn Speed', 'How fast the tank section turns whenever it finds a target to shoot at. Between 0 and 1.', 'turnSpeed', 1, true, 3), aH('Main Barrel Speed', 'Set this to the bullet speed of the tank section\'s main barrel for optimal movement prediction. This is only used for movement prediction.', 'speed', 1, true, 0), aH('Main Barrel Length', 'Set this to the length of the tank section\'s main barrel for optimal movement prediction. This is only used for movement prediction.', 'length', 1, true, 0), aH('Target Detect Distance', 'How far away something needs to be to be detected by the tank section.', 'minDistance', 15, true, 0), aH('Target Forget Distance', 'How far away something needs to be to be forgetten by the tank section.', 'maxDistance', 25, true, 0)), 3 == WL.rotationType && (aC('Rotation Condition', 'What causes the tank section to rotate.', 'rotationCondition', 0, a9, false, 0), aC('Rotation Disabled Behavior', 'What the tank section does when its rotation condition is not met.', 'rotationDisabledBehavior', 0, aY, false, 0), aH('Max Rotation', 'The maximum distance that the tank section can rotate from its base rotation (in degrees, on both sides). Set to 0 for no maximum.', 'maxRotation', 0, true, 1), aC('Maxed Rotation Behavior', 'What the tank section does once it has reached its max rotation.', 'maxRotationBehavior', 0, aO, false, 1), aH('Maxed Rotation Smoothing', 'How much the tank section smooths out its speed when its close to its min/max rotation. Set to 1 for no smoothing.', 'maxRotationSmoothing', 1, true, 6)), 2 != WL.rotationType && 3 != WL.rotationType || (aH('Rotation Speed', 'How fast the tank section rotates. Set to a negative number to rotate in the opposite direction.', 'rotationSpeed', 1, true, 0), aC('Is Anchored', 'Whether or not the tank section rotates with its base.', 'anchored', 0, [
                                    'On',
                                    'Off'
                                ], false, 0)), 4 == WL.rotationType && (aH('Turn Speed', 'How fast the tank section turns to point at the mouse.', 'turnSpeed', 1, true, 3), aH('Max Rotation Spread', 'The maximum distance that the tank section can rotate from its base rotation (in degrees). When it\'s past the maximum, it will rotate until it\'s back to the maximum. Set to 0 for no maximum.', 'maxSpread', 0, true, 6), WL.maxSpread > 0 && aC('Only Detect Within Max Spread', 'Whether or not the tank section will only try to point at the mouse if it\'s within its max rotation spread.', 'spreadDetection', 0, [
                                    {
                                        'value': 0,
                                        'name': 'On'
                                    },
                                    {
                                        'value': 1,
                                        'name': 'Off'
                                    }
                                ])), aZ('Visual'), aC('Override Color', 'Overrides the color of the tank section.', 'team', 3, aS, true), null != WL.team && aC('Suppress Color Changes', 'Whether or not the tank section changes color with the body. When on, the tank section won\'t change color when damaged or radiant. Does not work when the tank section\'s override color is set.', 'suppressColor', 0, [
                                    'On',
                                    'Off'
                                ], false, 0), aH('Sides', 'The amount of sides the tank section has. Zero sides make a circle, negative sides make a star.', 'sides', 0, true, 4), aZ('Outer Shell'), aH('Outer Sides', 'The amount of sides the tank section\'s outer shell has. Zero sides make a circle, negative sides make a star.', 'outerSides', 0, true, 4), aH('Outer Size', 'The size of the tank section\'s outer shell.', 'outerSize', 0, true, 0)), aZ('Attributes'), 3 == WL.type && aE('Tank Code', 'Enter a tank code to import it. It can have barrels, gadgets, and layers, just like any other tank.', 'enter a "full tank" code here', 'tank', 1), dM.barrelColor && aC(''.concat(2 == WL.type ? 'Aura Base' : 'Barrel', ' Color'), 'The color of the '.concat(2 == WL.type ? 'aura\'s base' : 'barrel', '.'), 'color', 3, aK, true), 3 != WL.type && aC('Border', 'Whether or not the gadget has a darker border around it.', 'hideBorder', 0, [
                                    {
                                        'value': void 0,
                                        'name': 'On'
                                    },
                                    {
                                        'value': 1,
                                        'name': 'Off'
                                    }
                                ], true), dM.bulletStats ? (aC('Override '.concat(dM.bulletName, ' Color'), 'Overrides the color of the '.concat(dM.bulletName.toLowerCase(), ', no mattter your team.'), 'team', 3, aS, true), dM.droneStats && (aH(''.concat(dM.bulletName, ' Minimum Distance'), ''.concat(dM.bulletName, 's closer than this to their target will move away from it.'), 'minDist', dM.minionStats ? 6 : 0, true, 0), aH(''.concat(dM.bulletName, ' Maximum Distance'), ''.concat(dM.bulletName, 's farther away than this from their target will move closer to it.'), 'maxDist', dM.minionStats ? 10 : 0, true, 0)), 0 == WL.type && (aC('Idle Behavior', 'What the Auto Cannon does when it doesn\'t have any targets. When set to "Rotate", the rotation speed is based on the auto cannon\'s idle rotation speed.', 'idleBehavior', 0, a7), 0 == WL.idleBehavior && aH('Idle Rotation Speed', 'How fast the Auto Cannon rotates when it doesn\'t have any targets and its idle behavior is set to "Rotate".', 'rotationSpeed', 1, true, 0)), aH('Reload', 'How long the barrel waits in between shots. The larger the number, the larger time in between shots.', 'reload', 1, true, 0), 0 == WL.type && (aH('Recoil', 'How much the barrel pushes you back when shooting. Recoil is also influenced by the '.concat(dM.bulletName.toLowerCase(), '\'s size.'), 'recoil', 0, true, 0), aH('Spread', 'How far (in degrees) the direction of shots are randomized.', 'spread', 0, true, 0), aH(''.concat(dM.bulletName, '. Size'), 'The size multiplier of the '.concat(dM.bulletName.toLowerCase(), '. Size is also influenced by the barrel width.'), 'size', 1, true, 0), aH(''.concat(dM.bulletName, ' Lifetime'), 'The lifetime multiplier of the '.concat(dM.bulletName.toLowerCase(), '. Lifetime is also influenced by the ').concat(dM.bulletName.toLowerCase(), '\'s penetration.'), 'lifetime', 1, true, 0)), aH(''.concat(dM.bulletName, ' Damage'), 'The amount of damage dealt by the '.concat(dM.bulletName.toLowerCase(), '.'), 'damage', 1, true, 0), aH(''.concat(dM.bulletName, ' Speed'), 'The movement speed of the '.concat(dM.bulletName.toLowerCase(), '.'), 'speed', 1, true, 0), aH(''.concat(dM.bulletName, ' Penetration'), 'The penetration the '.concat(dM.bulletName.toLowerCase(), '. Higher penetration ').concat(dM.bulletName.toLowerCase(), 's last longer before despawning or dying.'), 'penetration', 1, true, 0), 0 == WL.type && (aH('Target Detect Distance', 'How far away something needs to be to be detected by the auto cannon.', 'minDistance', 15, true, 0), aH('Target Forget Distance', 'How far away something needs to be to be forgetten by the auto cannon.', 'maxDistance', 25, true, 0))) : 2 == WL.type && (aH('Aura Base Sides', 'The amount of sides the aura\'s base has. Zero sides make a circle, negative sides make a star.', 'backSides', 0, true, 4), aC('Override Aura Color', 'Overrides the color of the aura.', 'auraColor', 3, aS, true), aC('Particles', 'Whether or not the aura emits particles.', 'showParticles', 0, [
                                    'On',
                                    'Off'
                                ], false, 0), aC('Aura Rotation Type', 'How the aura rotates. When it\'s locked, it doesn\'t rotate at all, and when it\'s unlocked, it rotates with its base.', 'rotationType', 0, [
                                    'Unlocked',
                                    'Locked'
                                ]), aH('Aura Opacity', 'The opacity of the aura, 0-1. 0 makes it invisible.', 'alpha', 0.3, true, 3), aH('Deactivated Opacity Multiplier', 'The opacity multiplier of the aura when it is deactivated, scaling with the aura\'s opacity attribute. 0 makes it invisible when deactivated.', 'deactivatedApha', 0.3, true, 3), 2 != WL.subtype && (aH(''.concat([
                                    'Attack',
                                    'Heal',
                                    'Nothing',
                                    'Repel',
                                    'Attract'
                                ][WL.subtype], ' Interval'), 'How often the aura will '.concat([
                                    'attack',
                                    'heal',
                                    'what are you looking for here in the code?',
                                    'repel',
                                    'attract'
                                ][WL.subtype], '.'), 'reload', 0.25, true, 0), aH(''.concat([
                                    'Damage',
                                    'Healing',
                                    'Nothing',
                                    'Repulsion',
                                    'Attraction'
                                ][WL.subtype]), 'How much the aura will '.concat([
                                    'attack',
                                    'heal',
                                    'get out',
                                    'repel',
                                    'attract'
                                ][WL.subtype], '.'), 'damage', 0.125, true, 0), [
                                    3,
                                    4
                                ].includes(WL.subtype) && aC('Ignore Mass', 'If the aura ignores the size of the objects it\'s '.concat({
                                    3: 'repelling',
                                    4: 'attracting'
                                }[WL.subtype], '. When on, it will ').concat({
                                    3: 'repel',
                                    4: 'attract'
                                }[WL.subtype], ' all objects at the same speed, regardless of its size.'), 'ignoreMass', 0, [
                                    'On',
                                    'Off'
                                ], false, 1), aC('Affects Bullets', 'If the aura affects bullets. Auras will never affect bullets while in a safe zone, regardless of this setting.', 'affectBullets', 0, [
                                    {
                                        'name': 'All Bullets',
                                        'value': 0
                                    },
                                    {
                                        'name': 'Enemy Bullets',
                                        'value': 1
                                    },
                                    {
                                        'name': 'Team Bullets',
                                        'value': 3
                                    },
                                    {
                                        'name': 'Off',
                                        'value': 2
                                    }
                                ], false, 1)), aC('Activation Trigger', 'What causes the aura to become active.', 'activationTrigger', 0, a6, false, 2), aH('Aura Sides', 'The amount of sides the aura has. Zero sides make a circle, negative sides make a star.', 'sides', 0, true, 4));
                                break;
                            case 'layer':
                                aZ('Size and Position'), aH('Rotation', 'The layer\'s rotation.', 'rot', 0, true, 1), aH('Side Offset', 'The layer\'s offset to the side.', 'offsetX', 0, true, 0), aH('Forward Offset', 'The layer\'s offset to the side.', 'offsetY', 0, true, 0), aH('Size', 'The layer\'s size.', 'size', 0.5, true, 0), aZ('Visual'), aC('Border', 'Whether or not the layer has a darker border around it.', 'hideBorder', 0, [
                                    {
                                        'value': void 0,
                                        'name': 'On'
                                    },
                                    {
                                        'value': 1,
                                        'name': 'Off'
                                    }
                                ], true), aC('Override Color', 'Overrides the color of the layer.', 'team', 3, aS, true), aH('Sides', 'The amount of sides the layer has. Zero sides make a circle, negative sides make a star.', 'sides', 0, true, 4), aZ('Outer Shell'), aH('Outer Sides', 'The amount of sides the layer\'s outer shell has. Zero sides make a circle, negative sides make a star.', 'outerSides', 0, true, 4), aH('Outer Size', 'The size of the layer\'s outer shell.', 'outerSize', 0, true, 0);
                            }
                            Wj.push({
                                'object': WL,
                                'objectInfo': dO,
                                'name': WA,
                                'attributes': aV
                            });
                        };
                        for (WJ.s(); !(WT = WJ.n()).done;) {
                            var WL, WA;
                            WR();
                        }
                    } catch (dO) {
                        WJ.e(dO);
                    } finally {
                        WJ.f();
                    }
                    if (0 != Wj.length) {
                        for (var WI, WP, WN = [], WW = 0, WD = Wj; WW < WD.length; WW++) {
                            var WQ, Wk = WD[WW], WX = ER(Wk.attributes);
                            try {
                                var WG = function () {
                                    var dY, dM = WQ.value, dS = true, dK = Wk.object[dM.id], dC = true, dE = ER(Wj);
                                    try {
                                        for (dE.s(); !(dY = dE.n()).done;) {
                                            var dH = dY.value, dZ = dH.attributes.find(function (dV) {
                                                    return dV.id == dM.id;
                                                });
                                            if (!dZ || dZ.type != dM.type || dZ.subtype != dM.subtype || !CU(dZ.options, dM.options) || dZ.deleteIfNaN != dM.deleteIfNaN || dZ.isNumber != dM.isNumber) {
                                                dS = false;
                                                break;
                                            }
                                            dC && (CU(dH.object[dM.id], dK) || (dC = false));
                                        }
                                    } catch (dV) {
                                        dE.e(dV);
                                    } finally {
                                        dE.f();
                                    }
                                    dS && !WN.find(function (dT) {
                                        return dT.id == dM.id;
                                    }) && (WN.push(dM), dM.sharedValue = dK, dM.isValueShared = dC);
                                };
                                for (WX.s(); !(WQ = WX.n()).done;) {
                                    WG();
                                }
                            } catch (dY) {
                                WX.e(dY);
                            } finally {
                                WX.f();
                            }
                            null == WI ? WI = Wk.name : WI != Wk.name && (WI = '');
                            null == WP ? WP = Wk.objectInfo.type : WP != Wk.objectInfo.type && (WP = '');
                        }
                        var Wz = {
                            'barrel': 'Barrel',
                            'layer': 'Layer',
                            'gadget': 'Gadget'
                        }[WP] || 'Object';
                        '' == WI ? WI = ''.concat(Wj.length, ' ').concat(Wz, 's') : Wj.length > 1 && (WI = ''.concat(Wj.length, ' ').concat(WI, 's'));
                        CD(r1);
                        var WF = HN(r1, 'div');
                        ;
                        ;
                        for (var Wq = function (dM, dS) {
                                    ;
                                    for (var dK = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], dC = 0, dE = Wj; dC < dE.length; dC++) {
                                        var dH = dE[dC], dZ = dH.object;
                                        null != dZ[dM] && dK || (dZ[dM] = C8(dS), null == dZ[dM] && delete dZ[dM]);
                                    }
                                }, WU = function () {
                                    var dM = d0[WB];
                                    switch (dM.type) {
                                    case -1:
                                        (d3 = HN(r1, 'div')).id = 'tank-editor-subtitle', d3.innerHTML = dM.name, d1 = d3;
                                        break;
                                    case 0:
                                        (d2 = HN(r1, 'div')).id = 'tank-editor-text', d2.innerHTML = dM.name + '&emsp;', d1 = d2;
                                        var dS, dK = dM.isValueShared && CJ(dM.sharedValue);
                                        if (dK && ((dS = HN(d2, 'input')).autocomplete = 'off', dS.classList.add('tank-editor-input'), dS.placeholder = '#000000', dS.style.marginRight = '1vmin', dS.value = dM.sharedValue), (d3 = HN(d2, 'select')).classList.add('tank-editor-select'), 3 === dM.subtype) {
                                            var dC = HN(d3, 'option');
                                            dC.value = 'custom';
                                            dC.innerHTML = 'Custom...';
                                        }
                                        for (var dE = 0; dE < dM.options.length; dE++) {
                                            var dH = HN(d3, 'option');
                                            dM.options[dE].hasOwnProperty('value') ? (dH.value = dM.options[dE].value, dH.innerHTML = dM.options[dE].name) : (dH.value = dE, dH.innerHTML = dM.options[dE]);
                                        }
                                        dM.isValueShared ? d3.value = dK ? 'custom' : aI(dM.sharedValue, dM.placeholder) : d3.value = null, dS && (dS.onchange = function (dV) {
                                            ;
                                            CJ(dV.target.value) || (CJ('#' + dV.target.value) ? dV.target.value = '#' + dV.target.value : dV.target.value = dM.sharedValue);
                                            Wq(dM.id, dV.target.value);
                                            az();
                                        }), d3.onchange = function (dV) {
                                            ;
                                            if ('custom' == dV.target.value) {
                                                dM.isValueShared && CJ(dM.sharedValue) || Wq(dM.id, '#ffffff');
                                            } else {
                                                if (dM.deleteIfNaN) {
                                                    var dT = +dV.target.value;
                                                    isNaN(dT) && (dT = void 0);
                                                    Wq(dM.id, dT);
                                                } else {
                                                    Wq(dM.id, aX(dV.target.value, 0));
                                                }
                                            }
                                            switch (dM.subtype) {
                                            case 1:
                                                switch (9 != +dV.target.value && [
                                                        'colorType',
                                                        'radiant',
                                                        'minSize',
                                                        'maxSize'
                                                    ].forEach(function (dj) {
                                                        Wq(dj, void 0);
                                                    }), +dV.target.value) {
                                                case 7:
                                                    Wq('minion', {
                                                        'gadgets': [],
                                                        'layers': [],
                                                        'sides': 0,
                                                        'outerSides': 0,
                                                        'outerSize': 0,
                                                        'maxBodyDrones': 3,
                                                        'barrels': [
                                                            {
                                                                'type': 0,
                                                                'rot': C9(-145),
                                                                'offset': 0,
                                                                'width': 0.5,
                                                                'length': 0.8,
                                                                'damage': 0.5,
                                                                'reload': 0.5,
                                                                'distance': 0,
                                                                'penetration': 0.5,
                                                                'delay': 0
                                                            },
                                                            {
                                                                'type': 0,
                                                                'rot': C9(145),
                                                                'offset': 0,
                                                                'width': 0.5,
                                                                'length': 0.8,
                                                                'damage': 0.5,
                                                                'reload': 0.5,
                                                                'distance': 0,
                                                                'penetration': 0.5,
                                                                'delay': 0
                                                            }
                                                        ],
                                                        'maxWeaponDrones': 3
                                                    }, true), [
                                                        'minDist',
                                                        'maxDist'
                                                    ].forEach(function (dj) {
                                                        Wq(dj, void 0);
                                                    });
                                                    break;
                                                case 8:
                                                    Wq('minion', {
                                                        'gadgets': [],
                                                        'layers': [],
                                                        'sides': 4,
                                                        'outerSides': 0,
                                                        'outerSize': 0,
                                                        'maxBodyDrones': 3,
                                                        'barrels': [
                                                            {
                                                                'type': 0,
                                                                'rot': C9(-135),
                                                                'offset': 0,
                                                                'width': 0.4,
                                                                'length': 0.6,
                                                                'damage': 0.5,
                                                                'reload': 1,
                                                                'distance': 0,
                                                                'penetration': 0.5,
                                                                'delay': 0
                                                            },
                                                            {
                                                                'type': 0,
                                                                'rot': C9(135),
                                                                'offset': 0,
                                                                'width': 0.4,
                                                                'length': 0.6,
                                                                'damage': 0.5,
                                                                'reload': 1,
                                                                'distance': 0,
                                                                'penetration': 0.5,
                                                                'delay': 0
                                                            },
                                                            {
                                                                'type': 0,
                                                                'rot': C9(-45),
                                                                'offset': 0,
                                                                'width': 0.4,
                                                                'length': 0.6,
                                                                'damage': 0.5,
                                                                'reload': 1,
                                                                'distance': 0,
                                                                'penetration': 0.5,
                                                                'delay': 0
                                                            },
                                                            {
                                                                'type': 0,
                                                                'rot': C9(45),
                                                                'offset': 0,
                                                                'width': 0.4,
                                                                'length': 0.6,
                                                                'damage': 0.5,
                                                                'reload': 1,
                                                                'distance': 0,
                                                                'penetration': 0.5,
                                                                'delay': 0
                                                            }
                                                        ],
                                                        'maxWeaponDrones': 3
                                                    }, true), [
                                                        'minDist',
                                                        'maxDist'
                                                    ].forEach(function (dj) {
                                                        Wq(dj, void 0);
                                                    });
                                                    break;
                                                case 3:
                                                    Wq('minion', {
                                                        'sides': 0,
                                                        'barrels': [{
                                                                'type': 0,
                                                                'rot': 0,
                                                                'offset': 0,
                                                                'width': 0.5,
                                                                'length': 1,
                                                                'damage': 0.5,
                                                                'reload': 1,
                                                                'delay': 0
                                                            }],
                                                        'gadgets': []
                                                    }, true), [
                                                        'minDist',
                                                        'maxDist'
                                                    ].forEach(function (dj) {
                                                        Wq(dj, void 0);
                                                    });
                                                    break;
                                                case 1:
                                                    ['minion'].forEach(function (dj) {
                                                        Wq(dj, void 0);
                                                    });
                                                    break;
                                                default:
                                                    [
                                                        'minion',
                                                        'minDist',
                                                        'maxDist'
                                                    ].forEach(function (dj) {
                                                        Wq(dj, void 0);
                                                    });
                                                    break;
                                                case 9:
                                                    Wq('colorType', 0), Wq('team', 1), Wq('minSize', 3), Wq('maxSize', 15), Wq('radiant', 0), Wq('team', void 0);
                                                }
                                                break;
                                            case 2:
                                                switch ([
                                                        'alpha',
                                                        'length',
                                                        'speed',
                                                        'penetration',
                                                        'sides',
                                                        'backSides',
                                                        'subtype',
                                                        'radius',
                                                        'rotationType',
                                                        'maxSpread',
                                                        'spreadDetection',
                                                        'suppressColor',
                                                        'turnSpeed',
                                                        'showParticles',
                                                        'ignoreMass',
                                                        'affectBullets',
                                                        'activationTrigger',
                                                        'baseRot',
                                                        'idleBehavior',
                                                        'rotationSpeed',
                                                        'rotationCondition',
                                                        'maxRotation',
                                                        'maxDistance',
                                                        'minDistance'
                                                    ].forEach(function (dj) {
                                                        Wq(dj, void 0);
                                                    }), WL.type) {
                                                case 0:
                                                    Wq('rot', void 0), Wq('baseRot', 0), Wq('idleBehavior', 0), Wq('rotationSpeed', 1), Wq('length', 1), Wq('minDistance', 15), Wq('maxDistance', 25), Wq('speed', 1), Wq('penetration', 1);
                                                    break;
                                                case 1:
                                                    Wq('rot', 0), Wq('speed', 1), Wq('penetration', 1);
                                                    break;
                                                case 2:
                                                    Wq('rot', 0), Wq('sides', 0), Wq('backSides', 0), Wq('subtype', 0), Wq('radius', 4), Wq('alpha', 0.3), Wq('rotationType', 1), Wq('width', 0.6), Wq('damage', 0.1), Wq('reload', 0.25), Wq('showParticles', 0), Wq('affectBullets', 2), Wq('activationTrigger', 2), Wq('ignoreMass', 1);
                                                    break;
                                                case 3:
                                                    Wq('rot', void 0), Wq('damage', void 0), Wq('reload', void 0), Wq('hideBorder', void 0), Wq('tank', {
                                                        'barrels': [{
                                                                'type': 0,
                                                                'rot': 0,
                                                                'offset': 0,
                                                                'width': 0.5,
                                                                'length': 1,
                                                                'damage': 1,
                                                                'reload': 1,
                                                                'delay': 0,
                                                                'speed': 1,
                                                                'distance': 0,
                                                                'penetration': 1
                                                            }],
                                                        'gadgets': [],
                                                        'layers': []
                                                    }), Wq('rotationType', 0), Wq('maxSpread', 0), Wq('spreadDetection', 0), Wq('suppressColor', 0), Wq('turnSpeed', 1), Wq('baseRot', 0), Wq('sides', 0), Wq('outerSides', 0), Wq('outerSize', 0), Wq('idleBehavior', 0), Wq('rotationSpeed', 1), Wq('anchored', 0), Wq('speed', 1), Wq('length', 1), Wq('minDistance', 15), Wq('maxDistance', 25);
                                                }
                                            }
                                            az();
                                        };
                                        break;
                                    case 1:
                                        (d2 = HN(r1, 'div')).id = 'tank-editor-text', d2.innerHTML = dM.name, d1 = d2, (d3 = HN(r1, 'textarea')).autocomplete = 'off', d3.classList.add('tank-editor-input-large');
                                        for (var dZ = 0; dZ < 15; dZ++) {
                                            HN(r1, 'br');
                                        }
                                        switch (d3.placeholder = dM.placeholder, d3.value = dM.isValueShared ? dM.sharedValue : '-', dM.subtype) {
                                        case 0:
                                            dM.isValueShared && (d3.value = Hj({
                                                'gadgets': HL(dM.sharedValue.gadgets || []),
                                                'layers': HJ(dM.sharedValue.layers || []),
                                                'sides': CE(dM.sharedValue.sides || 0),
                                                'outerSides': CE(dM.sharedValue.outerSides || 0),
                                                'outerSize': CE(dM.sharedValue.outerSize || 0),
                                                'maxBodyDrones': dM.sharedValue.maxBodyDrones,
                                                'barrels': HR(dM.sharedValue.barrels || []),
                                                'maxWeaponDrones': dM.sharedValue.maxWeaponDrones
                                            }));
                                            break;
                                        case 1:
                                            dM.isValueShared && (d3.value = Hj({
                                                'gadgets': HL(dM.sharedValue.gadgets || []),
                                                'layers': HJ(dM.sharedValue.layers || []),
                                                'barrels': HR(dM.sharedValue.barrels || [])
                                            }));
                                        }
                                        d3.lastValue = d3.value, d3.onchange = function (dV) {
                                            ;
                                            switch (dM.subtype) {
                                            case 0:
                                                try {
                                                    if ((dT = HT(dV.target.value)).error) {
                                                        return IE('Tank code invalid!', dT.error), void (dV.target.value = dV.target.lastValue);
                                                    }
                                                } catch (dj) {
                                                    return IE('Tank code invalid!', dj), void (dV.target.value = dV.target.lastValue);
                                                }
                                                dV.target.lastValue = dV.target.value, Wq(dM.id, {
                                                    'gadgets': HP(dT.gadgets || []),
                                                    'layers': HA(dT.layers || []),
                                                    'outerSize': dT.outerSize || 0,
                                                    'sides': dT.sides || 0,
                                                    'outerSides': dT.outerSides || 0,
                                                    'maxBodyDrones': aX(dT.maxBodyDrones, 3),
                                                    'barrels': HI(dT.barrels || []),
                                                    'maxWeaponDrones': aX(dT.maxWeaponDrones, 3)
                                                }), null != dT.healthMultiplier && Wq('penetration', dT.healthMultiplier), null != dT.bodyDamageMultiplier && Wq('damage', dT.bodyDamageMultiplier), null != dT.speedMultiplier && Wq('speed', dT.speedMultiplier);
                                                break;
                                            case 1:
                                                var dT;
                                                try {
                                                    if ((dT = HT(dV.target.value)).error) {
                                                        return IE('Tank code invalid!', dT.error), void (dV.target.value = dV.target.lastValue);
                                                    }
                                                } catch (dJ) {
                                                    return IE('Tank code invalid!', dJ), void (dV.target.value = dV.target.lastValue);
                                                }
                                                dV.target.lastValue = dV.target.value, Wq(dM.id, {
                                                    'gadgets': HP(dT.gadgets || []),
                                                    'layers': HA(dT.layers || []),
                                                    'barrels': HI(dT.barrels || [])
                                                }), null != dT.sides && Wq('sides', dT.sides), null != dT.outerSides && Wq('outerSides', dT.outerSides), null != dT.outerSize && Wq('outerSize', dT.outerSize);
                                            }
                                            az();
                                        };
                                        break;
                                    case 2:
                                        if ((d2 = HN(r1, 'div')).id = 'tank-editor-text', d2.innerHTML = dM.name + '&emsp;', d1 = d2, (d3 = HN(d2, 'input')).autocomplete = 'off', d3.classList.add('tank-editor-input'), d3.placeholder = dM.placeholder, 1 === dM.subtype) {
                                            dM.isValueShared ? d3.value = CK(CO(aX(dM.sharedValue, dM.placeholder)), 5) : d3.value = '-';
                                        } else {
                                            dM.isValueShared ? dM.isNumber ? d3.value = aX(dM.sharedValue, dM.placeholder) : d3.value = aI(dM.sharedValue, dM.placeholder) : d3.value = '-';
                                        }
                                        d3.onchange = function (dV) {
                                            ;
                                            if (dM.isNumber) {
                                                var dT = aX(aQ(dV.target.value), dM.placeholder);
                                                Wq(dM.id, dT);
                                                dM.sharedValue = dT;
                                                dM.isValueShared = true;
                                            } else {
                                                var dj = aI(dV.target.value, dM.placeholder);
                                                Wq(dM.id, dj);
                                                dM.sharedValue = dj;
                                                dM.isValueShared = true;
                                            }
                                            switch (dM.subtype) {
                                            case 1:
                                                Wq(dM.id, C9(dM.sharedValue));
                                                break;
                                            case 2:
                                                Wq(dM.id, Math.min(Math.max(3, dM.sharedValue), 1000));
                                                break;
                                            case 3:
                                                Wq(dM.id, Math.max(0, Math.min(1, dM.sharedValue)));
                                                break;
                                            case 4:
                                                Wq(dM.id, CE(dM.sharedValue));
                                                break;
                                            case 5:
                                                Wq(dM.id, Math.min(Math.max(0, dM.sharedValue), 20));
                                                break;
                                            case 6:
                                                Wq(dM.id, Math.max(0, dM.sharedValue));
                                            }
                                            az();
                                        };
                                    }
                                    -1 != dM.type && function (dV, dT) {
                                        ;
                                        dT ? dV.setAttribute('data-tooltip', dT) : dV.removeAttribute('data-tooltip');
                                    }(d1, dM.description);
                                }, WB = 0, d0 = WN; WB < d0.length; WB++) {
                            var d1, d2, d3;
                            WU();
                        }
                        var d4 = HN(r1, 'div'), d5 = HN(r1, 'div');
                        d4.style.textAlign = 'right';
                        d5.style.textAlign = 'right';
                        var d6 = HN(d4, 'button');
                        d6.innerHTML = 'Move Forward';
                        d6.classList.add('tank-editor-button');
                        var d7 = HN(d4, 'button');
                        d7.innerHTML = 'Move Backward';
                        d7.classList.add('tank-editor-button');
                        var d8 = HN(d5, 'button');
                        d8.innerHTML = 'Delete '.concat(WI);
                        d8.classList.add('tank-editor-button');
                        var d9 = HN(d5, 'button');
                        d9.innerHTML = 'Duplicate '.concat(WI);
                        d9.classList.add('tank-editor-button');
                        d6.onclick = function () {
                            aJ();
                        };
                        d7.onclick = function () {
                            aR();
                        };
                        d8.onclick = function () {
                            aL();
                        };
                        d9.onclick = function () {
                            aA();
                        };
                    }
                }
                function aj(WT) {
                    ;
                    return 0 == WT.stack.length ? {
                        'barrel': EW.barrels,
                        'gadget': ED.gadgets,
                        'layer': ED.layers
                    }[WT.type] : function Wj(WJ, WR, WL) {
                        ;
                        if (1 == WR.length) {
                            var WA = WJ[WR[0]];
                            return WA && 3 == WA.type && WA.tank ? {
                                'barrel': WA.tank.barrels,
                                'gadget': WA.tank.gadgets,
                                'layer': WA.tank.layers
                            }[WL.type] : void 0;
                        }
                        var WI = WJ[WR.shift()];
                        return WI && 3 == WI.type && WI.tank ? Wj(WI.tank.gadgets, WR, WL) : void 0;
                    }(ED.gadgets, EL(WT.stack), WT);
                }
                function aJ() {
                    var WT, Wj = rF.sort(function (WW, WD) {
                            ;
                            return WD.index - WW.index;
                        }).sort(function (WW, WD) {
                            ;
                            return WD.stack.length - WW.stack.length;
                        }), WJ = ER(Wj);
                    try {
                        for (WJ.s(); !(WT = WJ.n()).done;) {
                            var WR = WT.value, WL = aj(WR);
                            if (WR.index < WL.length - 1) {
                                var WA = WL[WR.index + 1];
                                WL[WR.index + 1] = WL[WR.index];
                                WL[WR.index] = WA;
                                var WI, WP = ER(Wj);
                                try {
                                    for (WP.s(); !(WI = WP.n()).done;) {
                                        var WN = WI.value;
                                        WR.type == WN.type && WN.index == WR.index + 1 && Cq(WN.stack, WR.stack) && WN.index--;
                                    }
                                } catch (WW) {
                                    WP.e(WW);
                                } finally {
                                    WP.f();
                                }
                                WR.index++;
                            }
                        }
                    } catch (WD) {
                        WJ.e(WD);
                    } finally {
                        WJ.f();
                    }
                    az();
                    rU();
                }
                function aR() {
                    var WT, Wj = rF.sort(function (WW, WD) {
                            ;
                            return WW.index - WD.index;
                        }).sort(function (WW, WD) {
                            ;
                            return WD.stack.length - WW.stack.length;
                        }), WJ = ER(Wj);
                    try {
                        for (WJ.s(); !(WT = WJ.n()).done;) {
                            var WR = WT.value, WL = aj(WR);
                            if (WR.index > 0) {
                                var WA = WL[WR.index - 1];
                                WL[WR.index - 1] = WL[WR.index];
                                WL[WR.index] = WA;
                                var WI, WP = ER(Wj);
                                try {
                                    for (WP.s(); !(WI = WP.n()).done;) {
                                        var WN = WI.value;
                                        WR.type == WN.type && WN.index == WR.index - 1 && Cq(WN.stack, WR.stack) && WN.index++;
                                    }
                                } catch (WW) {
                                    WP.e(WW);
                                } finally {
                                    WP.f();
                                }
                                WR.index--;
                            }
                        }
                    } catch (WD) {
                        WJ.e(WD);
                    } finally {
                        WJ.f();
                    }
                    az();
                    rU();
                }
                function aL() {
                    var WT, Wj = ER(rF.sort(function (WR, WL) {
                            ;
                            return WL.index - WR.index;
                        }).sort(function (WR, WL) {
                            ;
                            return WL.stack.length - WR.stack.length;
                        }));
                    try {
                        for (Wj.s(); !(WT = Wj.n()).done;) {
                            var WJ = WT.value;
                            aj(WJ).splice(WJ.index, 1);
                        }
                    } catch (WR) {
                        Wj.e(WR);
                    } finally {
                        Wj.f();
                    }
                    az(false);
                    rB();
                }
                function aA() {
                    ;
                    for (var WT = rF.sort(function (WA, WI) {
                                ;
                                return WA.index - WI.index;
                            }).sort(function (WA, WI) {
                                ;
                                return WI.stack.length - WA.stack.length;
                            }), Wj = 0; Wj < WT.length; Wj++) {
                        var WJ = WT[Wj], WR = aj(WJ);
                        WR.splice(WJ.index, 0, C8(WR[WJ.index]));
                        for (var WL = Wj + 1; WL < WT.length; WL++) {
                            WT[WL].type == WJ.type && WT[WL].index > WJ.index && Cq(WT[WL].stack, WJ.stack) && WT[WL].index++;
                        }
                    }
                    az();
                    rU();
                }
                function aI(WT, Wj) {
                    return null == WT || '' === WT ? Wj : WT;
                }
                var aP = [
                        '(',
                        ')',
                        /^(\d*\.?\d+|\d+)\e?[+-]?\d*$/,
                        '*',
                        '/',
                        '+',
                        '-',
                        ',',
                        'sin',
                        'cos',
                        'degToRad',
                        'radToDeg',
                        'rand',
                        'rnd',
                        'flr',
                        'ceil',
                        'Infinity'
                    ], aN = [
                        [
                            'radtodeg',
                            'radToDeg'
                        ],
                        [
                            'rad2deg',
                            'radToDeg'
                        ],
                        [
                            'radianstodegrees',
                            'radToDeg'
                        ],
                        [
                            'degtorad',
                            'degToRad'
                        ],
                        [
                            'deg2rad',
                            'degToRad'
                        ],
                        [
                            'degreestoradians',
                            'degToRad'
                        ],
                        [
                            'infinity',
                            'inf'
                        ],
                        [
                            'random',
                            'rand'
                        ],
                        [
                            'round',
                            'rnd'
                        ],
                        [
                            'floor',
                            'flr'
                        ],
                        [
                            'ceiling',
                            'ceil'
                        ],
                        [
                            '^',
                            '**'
                        ]
                    ], aW = [[
                            'inf',
                            'Infinity'
                        ]];
                function aD(WT) {
                    ;
                    try {
                        WT = WT.replace(/([,()/*+-])/g, ' $1 ').toLowerCase();
                        for (var Wj = 0; Wj < aN.length; Wj++) {
                            WT = WT.replaceAll(aN[Wj][0], aN[Wj][1]);
                        }
                        for (Wj = 0; Wj < aW.length; Wj++) {
                            WT = WT.replaceAll(aW[Wj][0], aW[Wj][1]);
                        }
                        return 0 == WT.split(' ').filter(function (WJ) {
                            return WJ;
                        }).filter(function (WJ) {
                            return WR = WJ, !aP.some(function (WL) {
                                ;
                                return WL instanceof RegExp ? WL.test(WR) : WL == WR;
                            });
                            var WR;
                        }).length;
                    } catch (WJ) {
                        return false;
                    }
                }
                function aQ(WT) {
                    ;
                    if (!aD(WT)) {
                        return null;
                    }
                    try {
                        WT = WT.toLowerCase();
                        for (var Wj = 0; Wj < aN.length; Wj++) {
                            WT = WT.replaceAll(aN[Wj][0], aN[Wj][1]);
                        }
                        for (Wj = 0; Wj < aW.length; Wj++) {
                            WT = WT.replaceAll(aW[Wj][0], aW[Wj][1]);
                        }
                        return window.eval(WT);
                    } catch (WJ) {
                        return null;
                    }
                }
                function aX(WT, Wj) {
                    ;
                    return Number.isNaN(+WT) ? Wj : +WT;
                }
                function aG(WT, Wj) {
                    return null == WT ? Wj : WT;
                }
                function az() {
                    var WT, Wj = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], WJ = false, WR = false, WL = ER(rF);
                    try {
                        for (WL.s(); !(WT = WL.n()).done;) {
                            var WA = WT.value;
                            if ('barrel' == WA.type && 0 == WA.stack.length ? WJ = true : WR = true, WJ && WR) {
                                break;
                            }
                        }
                    } catch (WI) {
                        WL.e(WI);
                    } finally {
                        WL.f();
                    }
                    WJ && (l5(), H5(false, Wj));
                    WR && (l4(), H7(false, Wj));
                    (WJ || WR) && H9();
                }
                window.sin = function (WT) {
                    ;
                    return Math.sin(WT);
                };
                window.cos = function (WT) {
                    return Math.cos(WT);
                };
                window.radToDeg = function (WT) {
                    return CO(WT);
                };
                window.degToRad = function (WT) {
                    return C9(WT);
                };
                window.rand = function (WT, Wj) {
                    ;
                    return null == WT && null == Wj ? Math.random() : null == Wj ? Math.random() * WT : Math.random() * (Wj - WT) + WT;
                };
                window.rnd = function (WT) {
                    var Wj = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                    return Math.round(WT / Wj) * Wj;
                };
                window.flr = function (WT) {
                    ;
                    return Math.floor(WT);
                };
                window.ceil = function (WT) {
                    ;
                    return Math.ceil(WT);
                };
                var aF = [], aq = [], aU = [];
                function aB(WT) {
                    var Wj;
                    return (null === (Wj = a0.find(function (WJ) {
                        return WJ.value == WT.type;
                    })) || void 0 === Wj ? void 0 : Wj.name) || 'Invalid barrel (wrong type?)';
                }
                function H0(WT) {
                    ;
                    if (2 == WT.type) {
                        var Wj = a2.find(function (WR) {
                            ;
                            return WR.value == WT.subtype;
                        });
                        return ((null == Wj ? void 0 : Wj.name) || 'Invalid (wrong subtype?)') + ' Aura';
                    }
                    var WJ;
                    return (null === (WJ = a1.find(function (WR) {
                        ;
                        return WR.value == WT.type;
                    })) || void 0 === WJ ? void 0 : WJ.name) || 'Invalid gadget (wrong type?)';
                }
                function H1(WT) {
                    ;
                    return ''.concat(Math.abs(WT.sides), ' ').concat(WT.sides < 0 ? 'point star' : 'sided', ' layer');
                }
                ;
                function H5() {
                    var WT = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], Wj = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    WT && H9();
                    EG.innerHTML = 'Barrels ('.concat(EW.barrels.length, ')');
                    CD(Eq);
                    aF = [];
                    for (var WJ = function (WA) {
                                var WI = EW.barrels[WA], WP = HN(Eq, 'button', 'tank-editor-collapsible-element');
                                ;
                                ;
                                aF.push({ 'button': WP });
                            }, WR = 0; WR < EW.barrels.length; WR++) {
                        WJ(WR);
                    }
                    var WL = HN(Eq, 'button', 'tank-editor-collapsible-element');
                    WL.innerHTML = '+';
                    WL.onclick = function () {
                        ;
                        EW.barrels.push(C8(H2));
                        l5();
                        H5();
                    };
                    r7.value = EW.cameraSizeMultiplier;
                    r9.value = EW.maxDrones;
                    rH.value = EW.name;
                    Wj && rU();
                }
                var H6 = {
                    WF: !H6[WF],
                    d1: !H6[d1],
                    d6: !H6[d6]
                };
                function H7() {
                    var WT, Wj = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], WJ = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    Wj && H9();
                    Ez.innerHTML = 'Gadgets ('.concat(ED.gadgets.length, ')');
                    CD(EU);
                    aq = [];
                    for (var WR = function WN(WW, WD, WQ, Wk) {
                                var WX = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;
                                if (3 == WD.type && WD.tank) {
                                    var WG, Wz = {
                                            barrels: [],
                                            gadgets: [],
                                            layers: []
                                        }, WF = 'b' + Wk.join(''), Wq = HN(WW, 'button', [
                                            'small',
                                            'tank-editor-collapsible'
                                        ]);
                                    ;
                                    Wq.style.marginLeft = ''.concat(3 * WX - 1, 'vmin');
                                    H6[WF] || Wq.classList.add('active');
                                    var WU = HN(WW, 'div', 'tank-editor-collapsible-content');
                                    WU.style.display = H6[WF] ? 'none' : 'flex';
                                    ;
                                    ;
                                    for (var WB = function (dY) {
                                                var dM = WD.tank.barrels[dY], dS = HN(WU, 'button', [
                                                        'small',
                                                        'tank-editor-collapsible-element'
                                                    ]);
                                                dS.style.marginLeft = ''.concat(3 * WX, 'vmin');
                                                dS.innerText = aB(dM);
                                                Wz.barrels.push({ 'button': dS });
                                                dS.onclick = function (dK) {
                                                    var dC = EL(rF).reverse().find(function (dV) {
                                                        ;
                                                        return 'barrel' == dV.type && Cq(dV.stack, Wk);
                                                    });
                                                    if (dC && dC.index != dY && dK.shiftKey) {
                                                        var dE, dH = ER(CL(dC.index, dY));
                                                        try {
                                                            var dZ = function () {
                                                                var dV = dE.value;
                                                                rF.some(function (dT) {
                                                                    ;
                                                                    return 'barrel' == dT.type && dT.index == dV;
                                                                }) || rF.push({
                                                                    'type': 'barrel',
                                                                    'index': dV,
                                                                    'stack': Wk
                                                                });
                                                            };
                                                            for (dH.s(); !(dE = dH.n()).done;) {
                                                                dZ();
                                                            }
                                                        } catch (dV) {
                                                            dH.e(dV);
                                                        } finally {
                                                            dH.f();
                                                        }
                                                        rU();
                                                    } else {
                                                        rU('barrel', dY, dK.ctrlKey || dK.metaKey || dK.shiftKey, Wk);
                                                    }
                                                };
                                            }, d0 = 0; d0 < WD.tank.barrels.length; d0++) {
                                        WB(d0);
                                    }
                                    (WG = HN(WU, 'button', [
                                        'small',
                                        'tank-editor-collapsible-element'
                                    ])).innerHTML = '+';
                                    WG.style.marginLeft = ''.concat(3 * WX, 'vmin');
                                    ;
                                    var d1 = 'g' + Wk.join(''), d2 = HN(WW, 'button', [
                                            'small',
                                            'tank-editor-collapsible'
                                        ]);
                                    d2.innerText = 'Gadgets ('.concat(WD.tank.gadgets.length, ')');
                                    d2.style.marginLeft = ''.concat(3 * WX - 1, 'vmin');
                                    H6[d1] || d2.classList.add('active');
                                    var d3 = HN(WW, 'div', 'tank-editor-collapsible-content');
                                    d3.style.display = H6[d1] ? 'none' : 'flex';
                                    d2.onclick = function () {
                                        ;
                                        d2.classList.toggle('active');
                                        ;
                                        'flex' === d3.style.display ? d3.style.display = 'none' : d3.style.display = 'flex';
                                    };
                                    ;
                                    for (var d4 = function (dY) {
                                                var dM = WD.tank.gadgets[dY], dS = HN(d3, 'button', [
                                                        'small',
                                                        'tank-editor-collapsible-element'
                                                    ]);
                                                dS.style.marginLeft = ''.concat(3 * WX, 'vmin');
                                                dS.innerText = H0(dM);
                                                Wz.gadgets.push({
                                                    'button': dS,
                                                    'tank': WN(d3, dM, {
                                                        'index': dY,
                                                        'type': 'gadget',
                                                        'stack': Wk
                                                    }, Wk.concat([dY]), WX + 1)
                                                });
                                                dS.onclick = function (dK) {
                                                    var dC = EL(rF).reverse().find(function (dV) {
                                                        ;
                                                        return 'gadget' == dV.type && Cq(dV.stack, Wk);
                                                    });
                                                    if (dC && dC.index != dY && dK.shiftKey) {
                                                        var dE, dH = ER(CL(dC.index, dY));
                                                        try {
                                                            var dZ = function () {
                                                                var dV = dE.value;
                                                                rF.some(function (dT) {
                                                                    ;
                                                                    return 'gadget' == dT.type && dT.index == dV;
                                                                }) || rF.push({
                                                                    'type': 'gadget',
                                                                    'index': dV,
                                                                    'stack': Wk
                                                                });
                                                            };
                                                            for (dH.s(); !(dE = dH.n()).done;) {
                                                                dZ();
                                                            }
                                                        } catch (dV) {
                                                            dH.e(dV);
                                                        } finally {
                                                            dH.f();
                                                        }
                                                        rU();
                                                    } else {
                                                        rU('gadget', dY, dK.ctrlKey || dK.metaKey || dK.shiftKey, Wk);
                                                    }
                                                };
                                            }, d5 = 0; d5 < WD.tank.gadgets.length; d5++) {
                                        d4(d5);
                                    }
                                    (WG = HN(d3, 'button', [
                                        'small',
                                        'tank-editor-collapsible-element'
                                    ])).innerHTML = '+';
                                    WG.style.marginLeft = ''.concat(3 * WX, 'vmin');
                                    ;
                                    var d6 = 'l' + Wk.join(''), d7 = HN(WW, 'button', [
                                            'small',
                                            'tank-editor-collapsible'
                                        ]);
                                    d7.innerText = 'Layers ('.concat(WD.tank.layers.length, ')');
                                    d7.style.marginLeft = ''.concat(3 * WX - 1, 'vmin');
                                    H6[d6] || d7.classList.add('active');
                                    var d8 = HN(WW, 'div', 'tank-editor-collapsible-content');
                                    d8.style.display = H6[d6] ? 'none' : 'flex';
                                    d7.onclick = function () {
                                        ;
                                        d7.classList.toggle('active');
                                        ;
                                        'flex' === d8.style.display ? d8.style.display = 'none' : d8.style.display = 'flex';
                                    };
                                    ;
                                    for (var d9 = function (dY) {
                                                var dM = WD.tank.layers[dY], dS = HN(d8, 'button', [
                                                        'small',
                                                        'tank-editor-collapsible-element'
                                                    ]);
                                                dS.style.marginLeft = ''.concat(3 * WX, 'vmin');
                                                dS.innerText = H1(dM);
                                                Wz.layers.push({ 'button': dS });
                                                dS.onclick = function (dK) {
                                                    var dC = EL(rF).reverse().find(function (dV) {
                                                        ;
                                                        return 'layer' == dV.type && Cq(dV.stack, Wk);
                                                    });
                                                    if (dC && dC.index != dY && dK.shiftKey) {
                                                        var dE, dH = ER(CL(dC.index, dY));
                                                        try {
                                                            var dZ = function () {
                                                                var dV = dE.value;
                                                                rF.some(function (dT) {
                                                                    ;
                                                                    return 'layer' == dT.type && dT.index == dV;
                                                                }) || rF.push({
                                                                    'type': 'layer',
                                                                    'index': dV,
                                                                    'stack': Wk
                                                                });
                                                            };
                                                            for (dH.s(); !(dE = dH.n()).done;) {
                                                                dZ();
                                                            }
                                                        } catch (dV) {
                                                            dH.e(dV);
                                                        } finally {
                                                            dH.f();
                                                        }
                                                        rU();
                                                    } else {
                                                        rU('layer', dY, dK.ctrlKey || dK.metaKey || dK.shiftKey, Wk);
                                                    }
                                                };
                                            }, dO = 0; dO < WD.tank.layers.length; dO++) {
                                        d9(dO);
                                    }
                                    return (WG = HN(d8, 'button', [
                                        'small',
                                        'tank-editor-collapsible-element'
                                    ])).innerHTML = '+', WG.style.marginLeft = ''.concat(3 * WX, 'vmin'), WG.onclick = function () {
                                        ;
                                        rq(WQ).tank.layers.push(C8(H4));
                                        l4();
                                        H7();
                                    }, Wz;
                                }
                            }, WL = function (WW) {
                                var WD = ED.gadgets[WW], WQ = HN(EU, 'button', 'tank-editor-collapsible-element');
                                ;
                                ;
                                aq.push({
                                    'button': WQ,
                                    'tank': WR(EU, WD, {
                                        'index': WW,
                                        'type': 'gadget',
                                        'stack': []
                                    }, [WW])
                                });
                            }, WA = 0; WA < ED.gadgets.length; WA++) {
                        WL(WA);
                    }
                    (WT = HN(EU, 'button')).classList.add('tank-editor-collapsible-element');
                    WT.innerHTML = '+';
                    WT.onclick = function () {
                        ;
                        ED.gadgets.push(C8(H3));
                        l4();
                        H7();
                    };
                    EF.innerHTML = 'Layers ('.concat(ED.layers.length, ')');
                    CD(EB);
                    aU = [];
                    for (var WI = function (WW) {
                                var WD = ED.layers[WW], WQ = HN(EB, 'button', 'tank-editor-collapsible-element');
                                ;
                                ;
                                aU.push({ 'button': WQ });
                            }, WP = 0; WP < ED.layers.length; WP++) {
                        WI(WP);
                    }
                    (WT = HN(EB, 'button')).classList.add('tank-editor-collapsible-element');
                    WT.innerHTML = '+';
                    WT.onclick = function () {
                        ;
                        ED.layers.push(C8(H4));
                        l4();
                        H7();
                    };
                    r8.value = ED.cameraSizeMultiplier;
                    rO.value = ED.maxDrones;
                    rY.value = ED.sides;
                    rM.value = ED.outerSides;
                    rS.value = ED.outerSize;
                    rK.value = ED.healthMultiplier;
                    rC.value = ED.bodyDamageMultiplier;
                    rE.value = ED.speedMultiplier;
                    rZ.value = ED.name;
                    rJ.value = ED.level;
                    rR.value = ED.size;
                    rj.value = ED.type;
                    rX(ED.team);
                    rG(aG(ED.visualTeam, void 0));
                    rN.value = ED.radiant;
                    rW.value = ED.overrideTankName;
                    WJ && rU();
                }
                var H8 = [];
                function H9() {
                    var WT = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], Wj = C8([
                            EW,
                            ED,
                            rF
                        ]);
                    H8.push(Wj);
                    WT && (HO = []);
                    H8.length > E9.maxSaveStates && H8.shift();
                }
                var HO = [], HY = document.getElementById('import-export-button'), HM = document.getElementById('import-or-export'), HS = document.getElementById('import-export-type'), HK = document.getElementById('code-area'), HC = document.getElementById('load-weapon-upgrade-area'), HE = document.getElementById('load-body-upgrade-area'), HH = document.getElementById('load-weapon-upgrade'), HZ = document.getElementById('load-body-upgrade');
                function HV(WT, Wj, WJ) {
                    var WR = function () {
                        ;
                        switch (r6) {
                        case 0:
                            Wj && function Wz(WF) {
                                ;
                                for (var Wq = 0; Wq < WF.length; Wq++) {
                                    var WU = WF[Wq];
                                    WU.length = WU.length * (3 == WU.type || 4 == WU.type || 5 == WU.type ? 1.5 : 1);
                                    WU.minion && Wz(WU.minion.barrels);
                                }
                            }(EW.barrels);
                            break;
                        case 1:
                            var WL = function (WF) {
                                ;
                                for (var Wq = 0; Wq < WF.length; Wq++) {
                                    var WU = WF[Wq];
                                    if (2 == WU.type) {
                                        WU.alpha = 0.3;
                                        WU.rot = 0;
                                        WU.rotationType = 2 == WU.subtype ? 0 : 1;
                                        WU.backSides = 2 == WU.subtype ? WU.sides : 0;
                                    }
                                }
                            };
                            WJ && WL(ED.gadgets), Wj && function WF(Wq) {
                                ;
                                for (var WU = 0; WU < Wq.length; WU++) {
                                    var WB = Wq[WU];
                                    WB.minion && (WL(WB.minion.gadgets), WF(WB.minion.barrels));
                                }
                            }(EW.barrels);
                            break;
                        case 2:
                            var WA = function (Wq) {
                                ;
                                for (var WU = 0; WU < Wq.length; WU++) {
                                    var WB = Wq[WU];
                                    2 == WB.type && (WB.showParticles = 0);
                                }
                            };
                            WJ && WA(ED.gadgets), Wj && function Wq(WU) {
                                ;
                                for (var WB = 0; WB < WU.length; WB++) {
                                    var d0 = WU[WB];
                                    d0.minion && (WA(d0.minion.gadgets), Wq(d0.minion.barrels));
                                }
                            }(EW.barrels);
                            break;
                        case 3:
                            var WI = function (WU) {
                                ;
                                for (var WB = 0; WB < WU.length; WB++) {
                                    var d0 = WU[WB];
                                    if (2 == d0.type) {
                                        ;
                                        [
                                            3,
                                            4
                                        ].includes(d0.subtype) && (d0.ignoreMass = 0);
                                    }
                                }
                            };
                            WJ && WI(ED.gadgets), Wj && function WU(WB) {
                                ;
                                for (var d0 = 0; d0 < WB.length; d0++) {
                                    var d1 = WB[d0];
                                    d1.minion && (WI(d1.minion.gadgets), WU(d1.minion.barrels));
                                }
                            }(EW.barrels);
                            break;
                        case 4:
                            var WP = function (WB) {
                                ;
                                for (var d0 = 0; d0 < WB.length; d0++) {
                                    var d1 = WB[d0];
                                    if (0 == d1.type) {
                                        ;
                                        ;
                                        ;
                                    }
                                }
                            };
                            WJ && WP(ED.gadgets), Wj && function WB(d0) {
                                ;
                                for (var d1 = 0; d1 < d0.length; d1++) {
                                    var d2 = d0[d1];
                                    d2.minion && (WP(d2.minion.gadgets), WB(d2.minion.barrels));
                                }
                            }(EW.barrels);
                            break;
                        case 5:
                            var WN = function (d0) {
                                ;
                                for (var d1 = 0; d1 < d0.length; d1++) {
                                    var d2 = d0[d1];
                                    if (0 == d2.type) {
                                        d2.rotationSpeed = d2.idleRotationSpeed;
                                        delete d2.idleRotationSpeed;
                                    }
                                }
                            };
                            WJ && WN(ED.gadgets), Wj && function d0(d1) {
                                ;
                                for (var d2 = 0; d2 < d1.length; d2++) {
                                    var d3 = d1[d2];
                                    d3.minion && (WN(d3.minion.gadgets), d0(d3.minion.barrels));
                                }
                            }(EW.barrels);
                            break;
                        case 6:
                            var WW = function d1(d2) {
                                    ;
                                    for (var d3 = 0; d3 < d2.length; d3++) {
                                        var d4 = d2[d3];
                                        if (3 == d4.type) {
                                            d4.spreadDetection = 1;
                                            d4.tank && (WD(d4.tank.barrels), d1(d4.tank.gadgets));
                                        }
                                    }
                                }, WD = function d2(d3) {
                                    ;
                                    for (var d4 = 0; d4 < d3.length; d4++) {
                                        var d5 = d3[d4];
                                        d5.minion && (WW(d5.minion.gadgets), d2(d5.minion.barrels));
                                    }
                                };
                            WJ && WW(ED.gadgets), Wj && WD(EW.barrels);
                            break;
                        case 7:
                            Wj && WJ && (ED.size = 1);
                            break;
                        case 8:
                            var WQ = function d3(d4) {
                                    ;
                                    for (var d5 = 0; d5 < d4.length; d5++) {
                                        var d6 = d4[d5];
                                        if (2 == d6.type) {
                                            d6.activationTrigger = 2;
                                            d6.deactivatedApha = 0.3;
                                        }
                                        d6.tank && (Wk(d6.tank.barrels), d3(d6.tank.gadgets));
                                    }
                                }, Wk = function d4(d5) {
                                    ;
                                    for (var d6 = 0; d6 < d5.length; d6++) {
                                        var d7 = d5[d6];
                                        d7.minion && (WQ(d7.minion.gadgets), d4(d7.minion.barrels));
                                    }
                                };
                            WJ && WQ(ED.gadgets), Wj && Wk(EW.barrels);
                            break;
                        case 9:
                            var WX = function d5(d6) {
                                    ;
                                    for (var d7 = 0; d7 < d6.length; d7++) {
                                        var d8 = d6[d7];
                                        if (3 == d8.type) {
                                            d8.rotationDisabledBehavior = d8.disabledBehavior;
                                            delete d8.disabledBehavior;
                                            d8.tank && (WG(d8.tank.barrels), d5(d8.tank.gadgets));
                                        }
                                    }
                                }, WG = function d6(d7) {
                                    ;
                                    for (var d8 = 0; d8 < d7.length; d8++) {
                                        var d9 = d7[d8];
                                        d9.minion && (WX(d9.minion.gadgets), d6(d9.minion.barrels));
                                    }
                                };
                            WJ && WX(ED.gadgets), Wj && WG(EW.barrels);
                        }
                    };
                    for (r6 = WT; r6 < 10; r6++) {
                        WR();
                    }
                }
                function HT(WT) {
                    var Wj;
                    try {
                        Wj = JSON.parse(WT, function (WJ, WR) {
                            return 1.79e+308 === WR ? 1e+400 : -1.79e+308 === WR ? -1e+400 : WR;
                        });
                    } catch (WJ) {
                        try {
                            Wj = JSON.parse(CW(WT.trim()), function (WR, WL) {
                                return 1.79e+308 === WL ? 1e+400 : -1.79e+308 === WL ? -1e+400 : WL;
                            });
                        } catch (WR) {
                            try {
                                Wj = JSON.parse(CW(CW(WT.trim())), function (WL, WA) {
                                    return 1.79e+308 === WA ? 1e+400 : -1.79e+308 === WA ? -1e+400 : WA;
                                });
                            } catch (WL) {
                                return { 'error': 'Invalid Code' };
                            }
                            return Wj || { 'error': 'Invalid Code' };
                        }
                        return Wj || { 'error': 'Invalid Code' };
                    }
                    return Wj;
                }
                function Hj(WT) {
                    var Wj = JSON.stringify(WT, function (WL, WA) {
                        return WA === 1e+400 ? 1.79e+308 : WA === -1e+400 ? -1.79e+308 : WA;
                    });
                    if (E9.compressCodes) {
                        var WJ = CN(Wj), WR = CN(WJ);
                        Wj = WJ.length < WR.length ? WJ : WR;
                    }
                    return Wj;
                }
                function HJ(WT) {
                    var Wj = [];
                    return WT.forEach(function (WJ) {
                        ;
                        Object.keys(WJ).forEach(function (WL) {
                            ;
                            switch (WL) {
                            case 'selected':
                                break;
                            case 'rot':
                                WR[WL] = CK(CO(WJ[WL]), 5);
                                break;
                            default:
                                WR[WL] = WJ[WL];
                            }
                        });
                        Wj.push(WR);
                    }), Wj;
                }
                function HR(WT) {
                    var Wj = [];
                    return WT.forEach(function (WJ) {
                        var WR = {
                            WL: CK(CO(WJ[WL]), 5),
                            WL: {
                                'sides': CE(WJ[WL].sides || 0),
                                'outerSides': CE(WJ[WL].outerSides || 0),
                                'outerSize': CE(WJ[WL].outerSize || 0),
                                'maxWeaponDrones': WJ[WL].maxWeaponDrones || 0,
                                'maxBodyDrones': WJ[WL].maxBodyDrones || 0,
                                'barrels': HR(WJ[WL].barrels),
                                'gadgets': HL(WJ[WL].gadgets),
                                'layers': HJ(WJ[WL].layers || [])
                            },
                            WL: WJ[WL]
                        };
                        Object.keys(WJ).forEach(function (WL) {
                            ;
                            switch (WL) {
                            case 'fireCooldown':
                            case 'animTime':
                            case 'selected':
                            case 'shootingTime':
                                break;
                            case 'rot':
                                ;
                                break;
                            case 'minion':
                                ;
                                break;
                            default:
                                ;
                            }
                        });
                        Wj.push(WR);
                    }), Wj;
                }
                function HL(WT) {
                    var Wj = [];
                    return WT.forEach(function (WJ) {
                        var WR = {
                            WL: CE(WJ[WL]),
                            WL: CK(CO(WJ[WL]), 5),
                            WL: WJ[WL]
                        };
                        Object.keys(WJ).forEach(function (WL) {
                            ;
                            switch (WL) {
                            case 'fireCooldown':
                            case 'targetCheckTimer':
                            case 'animTime':
                            case 'target':
                            case 'selected':
                                break;
                            case 'sides':
                            case 'outerSides':
                            case 'backSides':
                                ;
                                break;
                            case 'baseRot':
                                ;
                                break;
                            case 'rot':
                                0 != WJ.type && 3 != WJ.type && (WR[WL] = CK(CO(WJ[WL]), 5));
                                break;
                            default:
                                ;
                            }
                        });
                        Wj.push(WR);
                    }), Wj;
                }
                function HA(WT) {
                    var Wj = [];
                    return WT.forEach(function (WJ) {
                        ;
                        Object.keys(WJ).forEach(function (WL) {
                            ;
                            if ('rot' === WL) {
                                WR[WL] = C9(WJ[WL]);
                            } else {
                                WR[WL] = WJ[WL];
                            }
                        });
                        Wj.push(WR);
                    }), Wj;
                }
                function HI(WT) {
                    var Wj = [];
                    return WT.forEach(function (WJ) {
                        var WR = {
                            WL: C9(WJ[WL]),
                            WL: {
                                'sides': CE(WJ[WL].sides || 0),
                                'outerSides': CE(WJ[WL].outerSides || 0),
                                'outerSize': CE(WJ[WL].outerSize || 0),
                                'maxWeaponDrones': WJ[WL].maxWeaponDrones || 0,
                                'maxBodyDrones': WJ[WL].maxBodyDrones || 0,
                                'barrels': HI(WJ[WL].barrels),
                                'gadgets': HP(WJ[WL].gadgets),
                                'layers': HA(WJ[WL].layers || [])
                            },
                            WL: WJ[WL]
                        };
                        Object.keys(WJ).forEach(function (WL) {
                            ;
                            switch (WL) {
                            case 'rot':
                                ;
                                break;
                            case 'minion':
                                ;
                                break;
                            default:
                                ;
                            }
                        });
                        Wj.push(WR);
                    }), Wj;
                }
                function HP(WT) {
                    var Wj = [];
                    return WT.forEach(function (WJ) {
                        var WR = {
                            WL: C9(WJ[WL]),
                            WL: CE(WJ[WL]),
                            WL: WJ[WL]
                        };
                        Object.keys(WJ).forEach(function (WL) {
                            ;
                            switch (WL) {
                            case 'rot':
                            case 'baseRot':
                                ;
                                break;
                            case 'sides':
                            case 'outerSides':
                            case 'backSides':
                                ;
                                break;
                            default:
                                ;
                            }
                        });
                        Wj.push(WR);
                    }), Wj;
                }
                function HN(WT) {
                    var Wj = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 'div', WJ = arguments.length > 2 ? arguments[2] : void 0;
                    'string' == typeof WJ && (WJ = [WJ]);
                    var WR = document.createElement(Wj);
                    return WT.appendChild(WR), WJ && WJ.forEach(function (WL) {
                        ;
                        WR.classList.add(WL);
                    }), WR;
                }
                function HW(WT, Wj) {
                    return function (WJ) {
                        ;
                        if (Array.isArray(WJ)) {
                            return WJ;
                        }
                    }(WT) || function (WJ, WR) {
                        var WL = null == WJ ? null : 'undefined' != typeof Symbol && WJ[Symbol.iterator] || WJ['@@iterator'];
                        if (null != WL) {
                            var WA, WI, WP, WN, WW = [], WD = true, WQ = false;
                            try {
                                if (WP = (WL = WL.call(WJ)).next, 0 === WR) {
                                    if (Object(WL) !== WL) {
                                        return;
                                    }
                                    WD = false;
                                } else {
                                    for (; !(WD = (WA = WP.call(WL)).done) && (WW.push(WA.value), WW.length !== WR); WD = true) {
                                        ;
                                    }
                                }
                            } catch (Wk) {
                                WQ = true;
                                WI = Wk;
                            } finally {
                                try {
                                    if (!WD && null != WL.return && (WN = WL.return(), Object(WN) !== WN)) {
                                        return;
                                    }
                                } finally {
                                    if (WQ) {
                                        throw WI;
                                    }
                                }
                            }
                            return WW;
                        }
                    }(WT, Wj) || HQ(WT, Wj) || (function () {
                        ;
                        throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }());
                }
                function HD(WT, Wj) {
                    var WJ = 'undefined' != typeof Symbol && WT[Symbol.iterator] || WT['@@iterator'];
                    if (!WJ) {
                        if (Array.isArray(WT) || (WJ = HQ(WT)) || Wj && WT && 'number' == typeof WT.length) {
                            WJ && (WT = WJ);
                            var WR = 0, WL = function () {
                                };
                            return {
                                's': WL,
                                'n': function () {
                                    ;
                                    return WR >= WT.length ? { 'done': true } : {
                                        'done': false,
                                        'value': WT[WR++]
                                    };
                                },
                                'e': function (WN) {
                                    throw WN;
                                },
                                'f': WL
                            };
                        }
                        throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }
                    var WA, WI = true, WP = false;
                    return {
                        's': function () {
                            WJ = WJ.call(WT);
                        },
                        'n': function () {
                            var WN = WJ.next();
                            return WI = WN.done, WN;
                        },
                        'e': function (WN) {
                            WP = true;
                            WA = WN;
                        },
                        'f': function () {
                            ;
                            try {
                                WI || null == WJ.return || WJ.return();
                            } finally {
                                if (WP) {
                                    throw WA;
                                }
                            }
                        }
                    };
                }
                function HQ(WT, Wj) {
                    ;
                    if (WT) {
                        if ('string' == typeof WT) {
                            return Hk(WT, Wj);
                        }
                        var WJ = Object.prototype.toString.call(WT).slice(8, -1);
                        return 'Object' === WJ && WT.constructor && (WJ = WT.constructor.name), 'Map' === WJ || 'Set' === WJ ? Array.from(WT) : 'Arguments' === WJ || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(WJ) ? Hk(WT, Wj) : void 0;
                    }
                }
                function Hk(WT, Wj) {
                    ;
                    (null == Wj || Wj > WT.length) && (Wj = WT.length);
                    for (var WJ = 0, WR = new Array(Wj); WJ < Wj; WJ++) {
                        WR[WJ] = WT[WJ];
                    }
                    return WR;
                }
                HH.onclick = function () {
                    var WT, Wj = HC.value.trim().toLowerCase();
                    HC.value = '';
                    if (0 != Wj.length) {
                        WT = Wj;
                        yA.sendMessage(32, WT);
                    }
                };
                HZ.onclick = function () {
                    var WT, Wj = HE.value.trim().toLowerCase();
                    HE.value = '';
                    if (0 != Wj.length) {
                        WT = Wj;
                        yA.sendMessage(34, WT);
                    }
                };
                HC.addEventListener('keydown', function (WT) {
                    ;
                    if (WT.keyCode == ET.enter) {
                        HH.click();
                        HC.blur();
                    }
                });
                HE.addEventListener('keydown', function (WT) {
                    ;
                    if (WT.keyCode == ET.enter) {
                        HZ.click();
                        HE.blur();
                    }
                });
                HY.onclick = function () {
                    ;
                    switch (HM.selectedIndex) {
                    case 0:
                        switch (HS.selectedIndex) {
                        case 0:
                            !function (WT) {
                                var Wj;
                                try {
                                    if ((Wj = HT(WT)).error) {
                                        return void IE('Tank code invalid!', Wj.error);
                                    }
                                } catch (WR) {
                                    return void IE('Tank code invalid!', WR);
                                }
                                if (Wj.type && 'full' != Wj.type) {
                                    return void IE('Tank code invalid!', 'Code is not a full tank code, it\'s a \n\t\t'.concat({
                                        'weapon': 'weapon',
                                        'body': 'body',
                                        'full': 'full tank'
                                    }[Wj.type], ' code. Import as a "').concat({
                                        'weapon': 'Weapon Upgrade',
                                        'body': 'Body Upgrade',
                                        'full': 'Full Tank'
                                    }[Wj.type], ' instead of a "Full Tank".'));
                                }
                                var WJ = Wj.version || 0;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                HV(WJ, true, true);
                                l4();
                                H7();
                                l5();
                                H5();
                            }(HK.value);
                            break;
                        case 1:
                            !function (WT) {
                                var Wj;
                                try {
                                    if ((Wj = HT(WT)).error) {
                                        return void IE('Weapon code invalid!', Wj.error);
                                    }
                                } catch (WR) {
                                    return void IE('Weapon code invalid!', WR);
                                }
                                if (Wj.type && 'weapon' != Wj.type) {
                                    return void IE('Weapon code invalid!', 'Code is not a weapon code, it\'s a \n\t\t'.concat({
                                        'weapon': 'weapon',
                                        'body': 'body',
                                        'full': 'full tank'
                                    }[Wj.type], ' code. Import as a "').concat({
                                        'weapon': 'Weapon Upgrade',
                                        'body': 'Body Upgrade',
                                        'full': 'Full Tank'
                                    }[Wj.type], ' instead of a "Weapon Upgrade".'));
                                }
                                var WJ = Wj.version || 0;
                                ;
                                ;
                                ;
                                ;
                                HV(WJ, true, false);
                                l5();
                                H5();
                            }(HK.value);
                            break;
                        case 2:
                            !function (WT) {
                                var Wj;
                                try {
                                    if ((Wj = HT(WT)).error) {
                                        return void IE('Body code invalid!', Wj.error);
                                    }
                                } catch (WR) {
                                    return void IE('Body code invalid!', WR);
                                }
                                if (Wj.type && 'body' != Wj.type) {
                                    return void IE('Body code invalid!', 'Code is not a body code, it\'s a \n\t\t'.concat({
                                        'weapon': 'weapon',
                                        'body': 'body',
                                        'full': 'full tank'
                                    }[Wj.type], ' code. Import as a "').concat({
                                        'weapon': 'Weapon Upgrade',
                                        'body': 'Body Upgrade',
                                        'full': 'Full Tank'
                                    }[Wj.type], ' instead of a "Body Upgrade".'));
                                }
                                var WJ = Wj.version || 0;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                ;
                                HV(WJ, false, true);
                                l4();
                                H7();
                            }(HK.value);
                        }
                        break;
                    case 1:
                        switch (HS.selectedIndex) {
                        case 0:
                            HK.value = Hj({
                                'type': 'full',
                                'version': 10,
                                'gadgets': HL(ED.gadgets || []),
                                'layers': HJ(ED.layers || []),
                                'sides': ED.sides || 0,
                                'outerSides': ED.outerSides || 0,
                                'outerSize': ED.outerSize || 0,
                                'healthMultiplier': ED.healthMultiplier,
                                'bodyDamageMultiplier': ED.bodyDamageMultiplier,
                                'speedMultiplier': ED.speedMultiplier,
                                'bodyCameraSizeMultiplier': ED.cameraSizeMultiplier,
                                'maxBodyDrones': ED.maxDrones,
                                'bodyUpgradeName': ED.name,
                                'barrels': HR(EW.barrels || []),
                                'weaponCameraSizeMultiplier': EW.cameraSizeMultiplier,
                                'maxWeaponDrones': EW.maxDrones,
                                'weaponUpgradeName': EW.name,
                                'level': ED.level,
                                'size': ED.size,
                                'tankType': ED.type,
                                'radiant': ED.radiant,
                                'team': ED.team,
                                'visualTeam': ED.visualTeam,
                                'overrideTankName': ED.overrideTankName || ''
                            });
                            break;
                        case 1:
                            HK.value = Hj({
                                'type': 'weapon',
                                'version': 10,
                                'barrels': HR(EW.barrels || []),
                                'cameraSizeMultiplier': EW.cameraSizeMultiplier,
                                'maxDrones': EW.maxDrones,
                                'name': EW.name
                            });
                            break;
                        case 2:
                            HK.value = Hj({
                                'type': 'body',
                                'version': 10,
                                'gadgets': HL(ED.gadgets || []),
                                'layers': HJ(ED.layers || []),
                                'sides': ED.sides,
                                'outerSides': ED.outerSides,
                                'outerSize': ED.outerSize,
                                'healthMultiplier': ED.healthMultiplier,
                                'bodyDamageMultiplier': ED.bodyDamageMultiplier,
                                'speedMultiplier': ED.speedMultiplier,
                                'maxDrones': ED.maxDrones,
                                'cameraSizeMultiplier': ED.cameraSizeMultiplier,
                                'name': ED.name
                            });
                        }
                    }
                };
                var HX, HG, HF, Hq = {
                        Wj: true,
                        WR: false
                    }, HU = { WW: false }, HB = 0, h0 = 0, h1 = 0, h2 = 1, h3 = false, h4 = false, h5 = false, h6 = false, h7 = false, h8 = false, h9 = false, hO = document.getElementById('debug-mode');
                function hM(WT) {
                    ;
                    !function (Wj, WJ) {
                        ;
                        hD = Wj;
                        hQ = WJ;
                        var WR = (hD - window.innerWidth / 2 + Tq) * TN * j6, WL = (hQ - window.innerHeight / 2 + TU) * TN * j6;
                        l9(WR, WL);
                    }(WT.clientX, WT.clientY);
                    0 = WT.clientX * j6;
                    0 = WT.clientY * j6;
                    HF = WT.clientY > window.innerHeight - 150 / j6 && Math.abs(WT.clientX - window.innerWidth / 2) > window.innerWidth / 2 - 300 / j6;
                }
                var hS = [
                        {
                            'align': 1,
                            'selected': false,
                            'x': 0,
                            'y': 0
                        },
                        {
                            'align': -1,
                            'selected': false,
                            'x': 0,
                            'y': 0
                        }
                    ], hK = 0, hC = 0, hE = 0;
                function hH() {
                    hA();
                    hI();
                    hX();
                    hL();
                }
                function hZ(WT) {
                    ;
                    if (!EN) {
                        var Wj, WJ = HD(WT.changedTouches);
                        try {
                            for (WJ.s(); !(Wj = WJ.n()).done;) {
                                var WR, WL = Wj.value, WA = HD(hS);
                                try {
                                    for (WA.s(); !(WR = WA.n()).done;) {
                                        var WI = WR.value;
                                        if (!WI.selected) {
                                            var WP = WI.align * E5 == 1 ? 0 : TK.width, WN = TK.height, WW = WP + +E9.joystickOffset * WI.align * E5, WD = WN - +E9.joystickOffset, WQ = WL.clientX * j6, Wk = WL.clientY * j6;
                                            if (WG = {
                                                    'x': WW,
                                                    'y': WD,
                                                    'size': +E9.joystickSize
                                                }, Wz = {
                                                    'x': WQ,
                                                    'y': Wk,
                                                    'size': Math.min(WL.radiusX, WL.radiusY) * j6
                                                }, WF = void 0, Wq = void 0, void 0, WF = WG.x - Wz.x, Wq = WG.y - Wz.y, Math.sqrt(WF * WF + Wq * Wq) < WG.size + Wz.size) {
                                                WI.selected = true;
                                                WI.selectedIdentifier = WL.identifier;
                                                WI.x = -(WW - WQ) / 2;
                                                WI.y = -(WD - Wk) / 2;
                                                var WX = Math.max(+E9.joystickSize / 2, Math.sqrt(WI.x * WI.x + WI.y * WI.y));
                                                WI.x /= WX;
                                                WI.y /= WX;
                                            }
                                        }
                                    }
                                } catch (WU) {
                                    WA.e(WU);
                                } finally {
                                    WA.f();
                                }
                            }
                        } catch (WB) {
                            WJ.e(WB);
                        } finally {
                            WJ.f();
                        }
                    }
                    var WG, Wz, WF, Wq;
                    hN({
                        'x': WT.changedTouches[0].clientX,
                        'y': WT.changedTouches[0].clientY
                    }, false);
                    hH();
                }
                function hV(WT) {
                    var Wj, WJ = HD(WT.changedTouches);
                    try {
                        for (WJ.s(); !(Wj = WJ.n()).done;) {
                            var WR, WL = Wj.value, WA = HD(hS);
                            try {
                                for (WA.s(); !(WR = WA.n()).done;) {
                                    var WI = WR.value;
                                    if (WI.selected && WI.selectedIdentifier == WL.identifier) {
                                        var WP = WI.align * E5 == 1 ? 0 : TK.width, WN = TK.height, WW = WP + +E9.joystickOffset * WI.align * E5, WD = WN - +E9.joystickOffset, WQ = WL.clientX * j6, Wk = WL.clientY * j6;
                                        WI.x = -(WW - WQ) / 2;
                                        WI.y = -(WD - Wk) / 2;
                                        var WX = Math.max(+E9.joystickSize / 2, Math.sqrt(WI.x * WI.x + WI.y * WI.y));
                                        WI.x /= WX;
                                        WI.y /= WX;
                                    }
                                }
                            } catch (WG) {
                                WA.e(WG);
                            } finally {
                                WA.f();
                            }
                        }
                    } catch (Wz) {
                        WJ.e(Wz);
                    } finally {
                        WJ.f();
                    }
                    WT.cancelable && WT.preventDefault();
                    hH();
                }
                function hT(WT) {
                    var Wj, WJ = HD(WT.changedTouches);
                    try {
                        for (WJ.s(); !(Wj = WJ.n()).done;) {
                            var WR, WL = Wj.value, WA = HD(hS);
                            try {
                                for (WA.s(); !(WR = WA.n()).done;) {
                                    var WI = WR.value;
                                    WI.selected && WI.selectedIdentifier == WL.identifier && (WI.selected = false, WI.x = 0, WI.y = 0);
                                }
                            } catch (WP) {
                                WA.e(WP);
                            } finally {
                                WA.f();
                            }
                        }
                    } catch (WN) {
                        WJ.e(WN);
                    } finally {
                        WJ.f();
                    }
                    hH();
                }
                function hj(WT) {
                    I3 > 0 && WT < 9 && WT > 0 && 15 != I1[WT - 1] && (J2[WT - 1] = lz ? 1.1 : 1.3, J5(1.2), function (Wj) {
                        I1[Wj - 1]++;
                        I3--;
                    }(WT), yU(WT));
                }
                function hJ(WT) {
                    var Wj = WT.keyCode, WJ = WT.repeat, WR = R8, WL = document.activeElement.tagName.toLowerCase();
                    if (!EY && 'input' !== WL && 'textarea' !== WL) {
                        var WA = WT.ctrlKey || WT.metaKey;
                        if (EN) {
                            if (WA) {
                                if (Wj == ET.undo) {
                                    return (function () {
                                        ;
                                        if (H8.length > 1) {
                                            HO.push(H8.pop());
                                            var WI = C8(H8[H8.length - 1]);
                                            EW = WI[0];
                                            ED = WI[1];
                                            rF = WI[2];
                                            rz(false);
                                            l4();
                                            l5();
                                        } else {
                                            console.log('Can\'t undo');
                                        }
                                    }()), WT.preventDefault();
                                }
                                if (Wj == ET.redo) {
                                    return (function () {
                                        ;
                                        if (HO.length > 0) {
                                            var WI = C8(HO.pop());
                                            EW = WI[0];
                                            ED = WI[1];
                                            rF = WI[2];
                                            rz(false);
                                            l4();
                                            l5();
                                            H9(false);
                                        } else {
                                            console.log('Can\'t redo');
                                        }
                                    }()), WT.preventDefault();
                                }
                                if (Wj == ET.selectAll) {
                                    return (function () {
                                        ;
                                        rB();
                                        for (var WI = 0; WI < EW.barrels.length; WI++) {
                                            rF.push({
                                                'type': 'barrel',
                                                'index': WI,
                                                'stack': []
                                            });
                                        }
                                        for (var WP = 0; WP < ED.gadgets.length; WP++) {
                                            rF.push({
                                                'type': 'gadget',
                                                'index': WP,
                                                'stack': []
                                            });
                                        }
                                        for (var WN = 0; WN < ED.layers.length; WN++) {
                                            rF.push({
                                                'type': 'layer',
                                                'index': WN,
                                                'stack': []
                                            });
                                        }
                                        rU();
                                    }()), WT.preventDefault();
                                }
                                if (Wj == ET.duplicate) {
                                    return aA(), WT.preventDefault();
                                }
                                if (Wj == ET.moveForward) {
                                    return aJ(), WT.preventDefault();
                                }
                                if (Wj == ET.moveBackward) {
                                    return aR(), WT.preventDefault();
                                }
                            } else {
                                if (Wj == ET.delete) {
                                    return aL(), WT.preventDefault();
                                }
                            }
                        } else {
                            ;
                        }
                        Wj != ET.autoFire || EN || WJ || WR ? Wj != ET.autoSpin || EN || WJ || WR ? Wj != ET.spinLock || EN || WJ || WR ? Wj != ET.debugMode || EN || WJ || WR ? Wj != ET.passiveMode || EN || WJ || WR ? Wj != ET.screenshotMode || EN || WJ || WR ? Wj != ET.fire || EN || WR ? Wj != ET.repel || EN || WR ? Wj == ET.settings ? (WR && RE(), JB && R1(), EY ? EE() : EM()) : Wj != ET.quickChat || WJ || WR || EN || !E9.showChat ? Wj == ET.escape ? RM && RH() : EN || WR || !Number.isNaN(+WT.key) && +WT.key > 0 && (RM ? RS(+WT.key - 1, true) : hj(WT.key)) : RH() : hI() : (hA(), hI()) : EN || (WY('tut_screenshot_mode') || AY ? Vj(!V3, true) : (I8(true), WO('tut_screenshot_mode', true), setTimeout(function () {
                            ;
                            AU('Pressing '.concat(EJ[Wj], ' again will enable screenshot mode. This will hide all HUD elements.'));
                        }, 0), I8(false))) : (l6(h9 = !h9), AU('Passive Mode ('.concat(EJ[Wj], '): ').concat(h9 ? 'ON' : 'OFF'), 0.5)) : ((h8 = !h8) ? hO.classList.remove('hide') : hO.classList.add('hide'), AU('Debug Mode ('.concat(EJ[Wj], '): ').concat(h8 ? 'ON' : 'OFF'), 0.5)) : (h7 = !h7, AU('Spin Lock ('.concat(EJ[Wj], '): ').concat(h7 ? 'ON' : 'OFF'), 0.5)) : ((h6 = !h6) || (h2 *= -1), AU('Auto Spin ('.concat(EJ[Wj], '): ').concat(h6 ? 'ON' : 'OFF'), 0.5)) : (h5 = !h5, (function () {
                            ;
                            for (var WI = 0, WP = Object.entries(HU); WI < WP.length; WI++) {
                                var WN = HW(WP[WI], 2), WW = WN[0];
                                WN[1];
                                ;
                            }
                            hP();
                            hA();
                        }()), AU('Auto Fire ('.concat(EJ[Wj], '): ').concat(h5 ? 'ON' : 'OFF'), 0.5), hA(), HU[1] = false, hP());
                        hL();
                    }
                }
                function hR(WT) {
                    var Wj = WT.keyCode;
                    lQ === document.activeElement || EN || (Hq[Wj] = false, hL(), hA(), hI());
                }
                function hL() {
                    var WT = 0, Wj = 0;
                    if (Hq[ET.weaponTree] ? (h3 || RI(true), h3 = true) : h3 = false, Hq[ET.bodyTree] ? (h4 || RI(false), h4 = true) : h4 = false, hS[0].selected) {
                        WT = hS[0].x;
                        Wj = -hS[0].y;
                        var WJ = Math.sqrt(WT * WT + Wj * Wj);
                        WJ > 0.2 ? (WT /= WJ, Wj /= WJ) : (WT = 0, Wj = 0);
                    } else {
                        (Hq[ET.moveUp] || Hq[ET.moveUpAlt]) && Wj++;
                        (Hq[ET.moveDown] || Hq[ET.moveDownAlt]) && Wj--;
                        (Hq[ET.moveLeft] || Hq[ET.moveLeftAlt]) && WT--;
                        (Hq[ET.moveRight] || Hq[ET.moveRightAlt]) && WT++;
                    }
                    HB == WT && h0 == Wj || l7(HB = WT, h0 = Wj);
                }
                function hA() {
                    ;
                    EN ? l3(false) : h5 || HU[1] || Hq[ET.fire] || hS[1].selected ? l3(true) : l3(false);
                }
                function hI() {
                    ;
                    HU[3] || Hq[ET.repel] ? l8(2) : HU[1] || Hq[ET.fire] || h5 || hS[1].selected ? l8(1) : l8(0);
                }
                function hP() {
                    hI();
                }
                function hN(WT) {
                    var Wj = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (!Wj || !lz) {
                        var WJ = Date.now();
                        WJ - HX < 1000 ? ++HG > 4 && (WY('tut_autofire') || AY || lz || (I8(true), WO('tut_autofire', true), setTimeout(function () {
                            ;
                            AU('Hold down click to shoot automatically.');
                        }, 1000), setTimeout(function () {
                            ;
                            AU('You can also press E to turn on auto fire.');
                        }, 8000), I8(false))) : HG = 0;
                        HX = WJ;
                        !sX({
                            'x': WT.x * j6,
                            'y': WT.y * j6
                        }) && Wj && (HU[WT.which] = true, hP(), hA());
                    }
                }
                function hW(WT) {
                    HU[WT.which] = false;
                    hP();
                    hA();
                }
                var hD = 0, hQ = 0;
                function hX() {
                    ;
                    (!h6 && !h7 || EN) && (EN ? h1 = 1.5708 : hS[1].selected ? h1 = Math.atan2(hS[1].x, -hS[1].y) : lz || (h1 = Math.atan2(hD - (window.innerWidth / 2 + Tq / TN), window.innerHeight / 2 + TU / TN - hQ)), l1(h1));
                }
                function hG() {
                    ;
                    for (var WT = 0, Wj = Object.entries(Hq); WT < Wj.length; WT++) {
                        var WJ = HW(Wj[WT], 2), WR = WJ[0];
                        WJ[1];
                        ;
                    }
                    hA();
                    hL();
                }
                function hz() {
                    ;
                    hG();
                    var WT, Wj = HD(hS);
                    try {
                        for (Wj.s(); !(WT = Wj.n()).done;) {
                            var WJ = WT.value;
                            WJ.selected = false;
                            WJ.y = 0;
                            WJ.x = 0;
                        }
                    } catch (WR) {
                        Wj.e(WR);
                    } finally {
                        Wj.f();
                    }
                    window.removeEventListener('mousedown', hN);
                    window.removeEventListener('mouseup', hW);
                    window.removeEventListener('keydown', hJ);
                    window.removeEventListener('keyup', hR);
                    window.removeEventListener('mousemove', hM);
                    window.removeEventListener('click', hM);
                    window.removeEventListener('touchstart', hZ);
                    window.removeEventListener('touchmove', hV);
                    window.removeEventListener('touchend', hT);
                    window.removeEventListener('focus', hG);
                    window.removeEventListener('blur', hG);
                }
                var hF, hq = { WP: WN }, hU = {
                        'visual': {
                            'gridSize': 30,
                            'showMinimap': true,
                            'backgroundColor': '#CDCDCD',
                            'gridColor': '#C8C8C8',
                            'particles': [{
                                    'spawnrate': 0,
                                    'speed': {
                                        'min': 0,
                                        'max': 0
                                    },
                                    'd': {
                                        'min': 0,
                                        'max': 360
                                    },
                                    'size': {
                                        'min': 6,
                                        'max': 6
                                    },
                                    'lifetime': {
                                        'min': 30,
                                        'max': 60
                                    },
                                    'sides': {
                                        'min': 0,
                                        'max': 0
                                    },
                                    'transparency': {
                                        'min': 1,
                                        'max': 1
                                    },
                                    'color': {
                                        'min': '#CDCDCD',
                                        'max': '#C8C8C8'
                                    }
                                }]
                        },
                        'bases': [],
                        'walls': [],
                        'gates': [],
                        'trueMapSize': 1
                    };
                function hB(WT) {
                    ;
                    return hB = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (Wj) {
                        return typeof Wj;
                    } : function (Wj) {
                        ;
                        return Wj && 'function' == typeof Symbol && Wj.constructor === Symbol && Wj !== Symbol.prototype ? 'symbol' : typeof Wj;
                    }, hB(WT);
                }
                function b0(WT, Wj) {
                    var WJ = 'undefined' != typeof Symbol && WT[Symbol.iterator] || WT['@@iterator'];
                    if (!WJ) {
                        if (Array.isArray(WT) || (WJ = function (WN, WW) {
                                ;
                                if (!WN) {
                                    return;
                                }
                                if ('string' == typeof WN) {
                                    return b1(WN, WW);
                                }
                                var WD = Object.prototype.toString.call(WN).slice(8, -1);
                                'Object' === WD && WN.constructor && (WD = WN.constructor.name);
                                if ('Map' === WD || 'Set' === WD) {
                                    return Array.from(WN);
                                }
                                if ('Arguments' === WD || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(WD)) {
                                    return b1(WN, WW);
                                }
                            }(WT)) || Wj && WT && 'number' == typeof WT.length) {
                            WJ && (WT = WJ);
                            var WR = 0, WL = function () {
                                };
                            return {
                                's': WL,
                                'n': function () {
                                    ;
                                    return WR >= WT.length ? { 'done': true } : {
                                        'done': false,
                                        'value': WT[WR++]
                                    };
                                },
                                'e': function (WN) {
                                    throw WN;
                                },
                                'f': WL
                            };
                        }
                        throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }
                    var WA, WI = true, WP = false;
                    return {
                        's': function () {
                            ;
                            WJ = WJ.call(WT);
                        },
                        'n': function () {
                            var WN = WJ.next();
                            return WI = WN.done, WN;
                        },
                        'e': function (WN) {
                            WP = true;
                            WA = WN;
                        },
                        'f': function () {
                            ;
                            try {
                                WI || null == WJ.return || WJ.return();
                            } finally {
                                if (WP) {
                                    throw WA;
                                }
                            }
                        }
                    };
                }
                function b1(WT, Wj) {
                    ;
                    (null == Wj || Wj > WT.length) && (Wj = WT.length);
                    for (var WJ = 0, WR = new Array(Wj); WJ < Wj; WJ++) {
                        WR[WJ] = WT[WJ];
                    }
                    return WR;
                }
                function b2(WT, Wj, WJ) {
                    ;
                    return (Wj = function (WR) {
                        var WL = function (WA, WI) {
                            ;
                            if ('object' !== hB(WA) || null === WA) {
                                return WA;
                            }
                            var WP = WA[Symbol.toPrimitive];
                            if (void 0 !== WP) {
                                var WN = WP.call(WA, WI || 'default');
                                if ('object' !== hB(WN)) {
                                    return WN;
                                }
                                throw new TypeError('@@toPrimitive must return a primitive value.');
                            }
                            return ('string' === WI ? String : Number)(WA);
                        }(WR, 'string');
                        return 'symbol' === hB(WL) ? WL : String(WL);
                    }(Wj)) in WT ? Object.defineProperty(WT, Wj, {
                        'value': WJ,
                        'enumerable': true,
                        'configurable': true,
                        'writable': true
                    }) : WT[Wj] = WJ, WT;
                }
                for (var b3 = (b2(hF = {
                            'peacekeeper3': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.6,
                                        'length': 0.35,
                                        'distance': 0.6,
                                        'visualType': 1
                                    },
                                    {
                                        'type': 0,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.8,
                                        'length': 0.35,
                                        'distance': 0.3,
                                        'visualType': 1
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.3,
                                        'length': 0.4,
                                        'distance': 0.6
                                    },
                                    {
                                        'type': 6,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.6,
                                        'length': 0.5,
                                        'distance': -0.2
                                    }
                                ]
                            },
                            'peacekeeper2': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.8,
                                        'length': 0.4,
                                        'distance': 0.3,
                                        'visualType': 1
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.35,
                                        'length': 0.5,
                                        'distance': 0.6
                                    },
                                    {
                                        'type': 6,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.7,
                                        'length': 0.5,
                                        'distance': -0.2
                                    }
                                ]
                            },
                            'peacekeeper1': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.6,
                                        'length': 0.3,
                                        'distance': 0.3,
                                        'visualType': 1
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.3,
                                        'length': 0.5,
                                        'distance': 0.3
                                    }
                                ]
                            },
                            'abyssling': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 0.9,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.65,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 60,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.65,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': -60,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.65,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 120,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.65,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': -120,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.65,
                                        'distance': 0
                                    }
                                ]
                            },
                            'abyssguardian': {
                                'barrels': [
                                    {
                                        'type': 4,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.35,
                                        'length': 0.35,
                                        'distance': 0.6
                                    },
                                    {
                                        'type': 4,
                                        'rot': 90,
                                        'offset': 0,
                                        'width': 0.35,
                                        'length': 0.35,
                                        'distance': 0.6
                                    },
                                    {
                                        'type': 4,
                                        'rot': -90,
                                        'offset': 0,
                                        'width': 0.35,
                                        'length': 0.35,
                                        'distance': 0.6
                                    },
                                    {
                                        'type': 6,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.3,
                                        'length': 0.35,
                                        'distance': 0.6,
                                        'visualType': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.65,
                                        'distance': 0.6,
                                        'visualType': 0
                                    },
                                    {
                                        'type': 8,
                                        'rot': 45,
                                        'offset': 0,
                                        'width': 0.3,
                                        'length': 0.45,
                                        'distance': 0.4
                                    },
                                    {
                                        'type': 8,
                                        'rot': -45,
                                        'offset': 0,
                                        'width': 0.3,
                                        'length': 0.45,
                                        'distance': 0.4
                                    },
                                    {
                                        'type': 8,
                                        'rot': 135,
                                        'offset': 0,
                                        'width': 0.3,
                                        'length': 0.45,
                                        'distance': 0.4
                                    },
                                    {
                                        'type': 8,
                                        'rot': -135,
                                        'offset': 0,
                                        'width': 0.3,
                                        'length': 0.45,
                                        'distance': 0.4
                                    }
                                ]
                            },
                            'hexagonboss': {
                                'barrels': [
                                    {
                                        'type': 9,
                                        'rot': 60,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 9,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 9,
                                        'rot': 300,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    }
                                ]
                            },
                            'streamliner': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 1.3,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 1.2,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 1.1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 0.9,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 0.7,
                                        'distance': 0
                                    }
                                ]
                            },
                            'mono': {
                                'barrels': [{
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    }]
                            },
                            'assassin': {
                                'barrels': [{
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1.25,
                                        'distance': 0
                                    }]
                            },
                            'split': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 35,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -35,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    }
                                ]
                            },
                            'annihilator': {
                                'barrels': [{
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 1,
                                        'length': 1.1,
                                        'distance': 0
                                    }]
                            },
                            'spread': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': -60,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.7,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 60,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.7,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -40,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 40,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 20,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.9,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -20,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.9,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    }
                                ]
                            },
                            'disperse': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': -75,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.7,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 75,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.7,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -60,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 60,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -45,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.9,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 45,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 0.9,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -30,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 30,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 15,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 1.1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -15,
                                        'offset': 0,
                                        'width': 0.25,
                                        'length': 1.1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1.2,
                                        'distance': 0
                                    }
                                ]
                            },
                            'octo': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 90,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -90,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 45,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -45,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 135,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -135,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    }
                                ]
                            },
                            'quadro': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0.65,
                                        'width': 0.3,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': -0.65,
                                        'width': 0.3,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': -0.3,
                                        'width': 0.3,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0.3,
                                        'width': 0.3,
                                        'length': 0.8,
                                        'distance': 0
                                    }
                                ]
                            },
                            'marksman': {
                                'barrels': [{
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1.4,
                                        'distance': 0
                                    }]
                            },
                            'debris': {
                                'barrels': [
                                    {
                                        'type': 2,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.45,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 180,
                                        'offset': 0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 180,
                                        'offset': -0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 60,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.45,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 60,
                                        'offset': 0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 60,
                                        'offset': -0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': -60,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.45,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': -60,
                                        'offset': 0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': -60,
                                        'offset': -0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    }
                                ]
                            },
                            'satellite': {
                                'barrels': [
                                    {
                                        'type': 1,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.45,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': 180,
                                        'offset': 0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': 180,
                                        'offset': -0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': 60,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.45,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': 60,
                                        'offset': 0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': 60,
                                        'offset': -0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': -60,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.45,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': -60,
                                        'offset': 0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': -60,
                                        'offset': -0.5,
                                        'width': 0.1,
                                        'length': 0.35,
                                        'distance': 0
                                    }
                                ]
                            },
                            'charon': {
                                'barrels': [
                                    {
                                        'type': 2,
                                        'rot': -60,
                                        'offset': 0,
                                        'width': 0.55,
                                        'length': 0.5,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 60,
                                        'offset': 0,
                                        'width': 0.55,
                                        'length': 0.5,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.55,
                                        'length': 0.5,
                                        'distance': 0
                                    }
                                ]
                            },
                            'ganymede': {
                                'barrels': [
                                    {
                                        'type': 4,
                                        'rot': 180,
                                        'offset': 0,
                                        'distance': 0.4,
                                        'width': 0.4,
                                        'length': 0.225
                                    },
                                    {
                                        'type': 4,
                                        'rot': 60,
                                        'offset': 0,
                                        'distance': 0.4,
                                        'width': 0.4,
                                        'length': 0.225
                                    },
                                    {
                                        'type': 4,
                                        'rot': -60,
                                        'offset': 0,
                                        'distance': 0.4,
                                        'width': 0.4,
                                        'length': 0.225
                                    },
                                    {
                                        'type': 5,
                                        'rot': 180,
                                        'offset': -0.6,
                                        'distance': 0.4,
                                        'width': 0.1,
                                        'length': 0.15
                                    },
                                    {
                                        'type': 5,
                                        'rot': 180,
                                        'offset': 0.6,
                                        'distance': 0.4,
                                        'width': 0.1,
                                        'length': 0.15
                                    },
                                    {
                                        'type': 5,
                                        'rot': 60,
                                        'offset': -0.6,
                                        'distance': 0.4,
                                        'width': 0.1,
                                        'length': 0.15
                                    },
                                    {
                                        'type': 5,
                                        'rot': 60,
                                        'offset': 0.6,
                                        'distance': 0.4,
                                        'width': 0.1,
                                        'length': 0.15
                                    },
                                    {
                                        'type': 5,
                                        'rot': -60,
                                        'offset': -0.6,
                                        'distance': 0.4,
                                        'width': 0.1,
                                        'length': 0.15
                                    },
                                    {
                                        'type': 5,
                                        'rot': -60,
                                        'offset': 0.6,
                                        'distance': 0.4,
                                        'width': 0.1,
                                        'length': 0.15
                                    }
                                ]
                            },
                            'synope': {
                                'barrels': [
                                    {
                                        'type': 3,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 0.525,
                                        'distance': 0
                                    },
                                    {
                                        'type': 3,
                                        'rot': 60,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 0.525,
                                        'distance': 0
                                    },
                                    {
                                        'type': 3,
                                        'rot': -60,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 0.525,
                                        'distance': 0
                                    }
                                ]
                            },
                            'minigun': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 1.2,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': -0.5,
                                        'width': 0.2,
                                        'length': 1.2,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0.5,
                                        'width': 0.2,
                                        'length': 1.2,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': -0.5,
                                        'width': 0.2,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0.5,
                                        'width': 0.2,
                                        'length': 0.8,
                                        'distance': 0
                                    }
                                ]
                            },
                            'amalgam': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': -0.5,
                                        'width': 0.4,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0.5,
                                        'width': 0.4,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 15,
                                        'offset': 0.4,
                                        'width': 0.65,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': -15,
                                        'offset': -0.4,
                                        'width': 0.65,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': 140,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': -140,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    }
                                ]
                            },
                            'wave': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': -150,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.9,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 150,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.9,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.65,
                                        'length': 1,
                                        'distance': 0.1
                                    },
                                    {
                                        'type': 2,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.65,
                                        'length': 1,
                                        'distance': -0.4
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 1,
                                        'distance': 0
                                    }
                                ]
                            },
                            'wake': {
                                'barrels': [
                                    {
                                        'type': 2,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.65,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.4,
                                        'length': 0.9,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -140,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 140,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    }
                                ]
                            },
                            'alpha': {
                                'barrels': [{
                                        'type': 2,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 1.5,
                                        'length': 1,
                                        'distance': 0
                                    }]
                            },
                            'beta': {
                                'barrels': [{
                                        'type': 2,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 1,
                                        'length': 1,
                                        'distance': 0
                                    }]
                            },
                            'pulsar': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 180,
                                        'offset': 0.3,
                                        'width': 0.2,
                                        'length': 0.4,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 180,
                                        'offset': -0.3,
                                        'width': 0.2,
                                        'length': 0.4,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 60,
                                        'offset': 0.3,
                                        'width': 0.2,
                                        'length': 0.4,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 60,
                                        'offset': -0.3,
                                        'width': 0.2,
                                        'length': 0.4,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -60,
                                        'offset': 0.3,
                                        'width': 0.2,
                                        'length': 0.4,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -60,
                                        'offset': -0.3,
                                        'width': 0.2,
                                        'length': 0.4,
                                        'distance': 0
                                    }
                                ]
                            },
                            'engineer': {
                                'barrels': [{
                                        'type': 8,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.75,
                                        'length': 0.95,
                                        'distance': 0
                                    }]
                            },
                            'raider': {
                                'barrels': [{
                                        'type': 8,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.9,
                                        'length': 0.85,
                                        'distance': 0
                                    }]
                            },
                            'mechanic': {
                                'barrels': [
                                    {
                                        'type': 8,
                                        'rot': 120,
                                        'offset': 0,
                                        'width': 0.55,
                                        'length': 0.85,
                                        'distance': 0
                                    },
                                    {
                                        'type': 8,
                                        'rot': -120,
                                        'offset': 0,
                                        'width': 0.55,
                                        'length': 0.85,
                                        'distance': 0
                                    },
                                    {
                                        'type': 8,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.55,
                                        'length': 0.85,
                                        'distance': 0
                                    }
                                ]
                            },
                            'arsenal': {
                                'barrels': [
                                    {
                                        'type': 8,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.6,
                                        'length': 0.95,
                                        'distance': 0.3
                                    },
                                    {
                                        'type': 8,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.6,
                                        'length': 0.95,
                                        'distance': -0.3
                                    }
                                ]
                            },
                            'shrapnel': {
                                'barrels': [
                                    {
                                        'type': 2,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.45,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 180,
                                        'offset': 0,
                                        'width': 0.45,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 90,
                                        'offset': 0,
                                        'width': 0.45,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': -90,
                                        'offset': 0,
                                        'width': 0.45,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 45,
                                        'offset': 0,
                                        'width': 0.45,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': -45,
                                        'offset': 0,
                                        'width': 0.45,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': 135,
                                        'offset': 0,
                                        'width': 0.45,
                                        'length': 0.75,
                                        'distance': 0
                                    },
                                    {
                                        'type': 2,
                                        'rot': -135,
                                        'offset': 0,
                                        'width': 0.45,
                                        'length': 0.75,
                                        'distance': 0
                                    }
                                ]
                            },
                            'emperor': {
                                'barrels': [
                                    {
                                        'type': 1,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': 90,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': -90,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': -180,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    }
                                ]
                            },
                            'overlord': {
                                'barrels': [
                                    {
                                        'type': 1,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': 120,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 1,
                                        'rot': -120,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 0.8,
                                        'distance': 0
                                    }
                                ]
                            },
                            'horizon': {
                                'barrels': [
                                    {
                                        'type': 0,
                                        'rot': 22.5,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -22.5,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 45,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -45,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 67.5,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -67.5,
                                        'offset': 0,
                                        'width': 0.2,
                                        'length': 0.8,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 90,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': -90,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    },
                                    {
                                        'type': 0,
                                        'rot': 0,
                                        'offset': 0,
                                        'width': 0.5,
                                        'length': 1,
                                        'distance': 0
                                    }
                                ]
                            }
                        }, 'disperse', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': -75,
                                    'offset': 0,
                                    'width': 0.25,
                                    'length': 0.7,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 75,
                                    'offset': 0,
                                    'width': 0.25,
                                    'length': 0.7,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -60,
                                    'offset': 0,
                                    'width': 0.25,
                                    'length': 0.8,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 60,
                                    'offset': 0,
                                    'width': 0.25,
                                    'length': 0.8,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -45,
                                    'offset': 0,
                                    'width': 0.25,
                                    'length': 0.9,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 45,
                                    'offset': 0,
                                    'width': 0.25,
                                    'length': 0.9,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -30,
                                    'offset': 0,
                                    'width': 0.25,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 30,
                                    'offset': 0,
                                    'width': 0.25,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 15,
                                    'offset': 0,
                                    'width': 0.25,
                                    'length': 1.1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -15,
                                    'offset': 0,
                                    'width': 0.25,
                                    'length': 1.1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1.2,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'gunner', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': -0.3,
                                    'width': 0.2,
                                    'length': 0.8,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0.3,
                                    'width': 0.2,
                                    'length': 0.8,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': -0.8,
                                    'width': 0.2,
                                    'length': 0.6,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0.8,
                                    'width': 0.2,
                                    'length': 0.6,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'riot', {
                            'barrels': [
                                {
                                    'type': 2,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0.5
                                },
                                {
                                    'type': 2,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': -0.5
                                }
                            ]
                        }), b2(hF, 'barricade', {
                            'barrels': [
                                {
                                    'type': 2,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0.1
                                },
                                {
                                    'type': 2,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': -0.4
                                }
                            ]
                        }), b2(hF, 'palisade', {
                            'barrels': [
                                {
                                    'type': 2,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': 90,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': -90,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': -180,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'blazar', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': 180,
                                    'offset': 0,
                                    'width': 0.35,
                                    'length': 0.5,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 60,
                                    'offset': 0,
                                    'width': 0.35,
                                    'length': 0.5,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -60,
                                    'offset': 0,
                                    'width': 0.35,
                                    'length': 0.5,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'quasar', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': 180,
                                    'offset': 0.4,
                                    'distance': 0.1,
                                    'width': 0.2,
                                    'length': 0.35000000000000003
                                },
                                {
                                    'type': 0,
                                    'rot': 180,
                                    'offset': -0.4,
                                    'distance': 0.1,
                                    'width': 0.2,
                                    'length': 0.35000000000000003
                                },
                                {
                                    'type': 0,
                                    'rot': 180,
                                    'offset': 0,
                                    'distance': 0.1,
                                    'width': 0.25,
                                    'length': 0.425
                                },
                                {
                                    'type': 0,
                                    'rot': 60,
                                    'offset': 0.4,
                                    'distance': 0.1,
                                    'width': 0.2,
                                    'length': 0.35000000000000003
                                },
                                {
                                    'type': 0,
                                    'rot': 60,
                                    'offset': -0.4,
                                    'distance': 0.1,
                                    'width': 0.2,
                                    'length': 0.35000000000000003
                                },
                                {
                                    'type': 0,
                                    'rot': 60,
                                    'offset': 0,
                                    'distance': 0.1,
                                    'width': 0.25,
                                    'length': 0.425
                                },
                                {
                                    'type': 0,
                                    'rot': -60,
                                    'offset': 0.4,
                                    'distance': 0.1,
                                    'width': 0.2,
                                    'length': 0.35000000000000003
                                },
                                {
                                    'type': 0,
                                    'rot': -60,
                                    'offset': -0.4,
                                    'distance': 0.1,
                                    'width': 0.2,
                                    'length': 0.35000000000000003
                                },
                                {
                                    'type': 0,
                                    'rot': -60,
                                    'offset': 0,
                                    'distance': 0.1,
                                    'width': 0.25,
                                    'length': 0.425
                                }
                            ]
                        }), b2(hF, 'moon', {
                            'barrels': [
                                {
                                    'type': 1,
                                    'rot': 180,
                                    'offset': 0,
                                    'width': 0.3,
                                    'length': 0.5,
                                    'distance': 0
                                },
                                {
                                    'type': 1,
                                    'rot': 180,
                                    'offset': 0.3,
                                    'width': 0.1,
                                    'length': 0.3,
                                    'distance': 0
                                },
                                {
                                    'type': 1,
                                    'rot': 180,
                                    'offset': -0.3,
                                    'width': 0.1,
                                    'length': 0.3,
                                    'distance': 0
                                },
                                {
                                    'type': 1,
                                    'rot': 60,
                                    'offset': 0,
                                    'width': 0.3,
                                    'length': 0.5,
                                    'distance': 0
                                },
                                {
                                    'type': 1,
                                    'rot': 60,
                                    'offset': 0.3,
                                    'width': 0.1,
                                    'length': 0.3,
                                    'distance': 0
                                },
                                {
                                    'type': 1,
                                    'rot': 60,
                                    'offset': -0.3,
                                    'width': 0.1,
                                    'length': 0.3,
                                    'distance': 0
                                },
                                {
                                    'type': 1,
                                    'rot': -60,
                                    'offset': 0,
                                    'width': 0.3,
                                    'length': 0.5,
                                    'distance': 0
                                },
                                {
                                    'type': 1,
                                    'rot': -60,
                                    'offset': 0.3,
                                    'width': 0.1,
                                    'length': 0.3,
                                    'distance': 0
                                },
                                {
                                    'type': 1,
                                    'rot': -60,
                                    'offset': -0.3,
                                    'width': 0.1,
                                    'length': 0.3,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'penta', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': -40,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 0.8,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 40,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 0.8,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 20,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 0.9,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -20,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 0.9,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'brokenpenta', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': 40,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 0.8,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -20,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 0.9,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -40,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 0.8,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 20,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 0.9,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'arc', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': 45,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -45,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 90,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -90,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'manager', {
                            'barrels': [{
                                    'type': 1,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 1,
                                    'length': 1,
                                    'distance': 0
                                }]
                        }), b2(hF, 'stockade', {
                            'barrels': [
                                {
                                    'type': 2,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': 120,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': -120,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'scrap', {
                            'barrels': [
                                {
                                    'type': 2,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.45,
                                    'length': 0.75,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': 180,
                                    'offset': 0,
                                    'width': 0.45,
                                    'length': 0.75,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': -60,
                                    'offset': 0,
                                    'width': 0.45,
                                    'length': 0.75,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': 60,
                                    'offset': 0,
                                    'width': 0.45,
                                    'length': 0.75,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': -120,
                                    'offset': 0,
                                    'width': 0.45,
                                    'length': 0.75,
                                    'distance': 0
                                },
                                {
                                    'type': 2,
                                    'rot': 120,
                                    'offset': 0,
                                    'width': 0.45,
                                    'length': 0.75,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'trio', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': -0.5,
                                    'width': 0.4,
                                    'length': 0.8,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0.5,
                                    'width': 0.4,
                                    'length': 0.8,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.4,
                                    'length': 1,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'duo', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': -0.5,
                                    'width': 0.4,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0.5,
                                    'width': 0.4,
                                    'length': 1,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'executive', {
                            'barrels': [{
                                    'type': 1,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 1.5,
                                    'length': 1,
                                    'distance': 0
                                }]
                        }), b2(hF, 'manufacturer', {
                            'barrels': [{
                                    'type': 3,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.8,
                                    'length': 1.1,
                                    'distance': 0
                                }]
                        }), b2(hF, 'factory', {
                            'barrels': [{
                                    'type': 3,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1.1,
                                    'distance': 0
                                }]
                        }), b2(hF, 'hatcher', {
                            'barrels': [
                                {
                                    'type': 3,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.35,
                                    'length': 0.9,
                                    'distance': 0
                                },
                                {
                                    'type': 3,
                                    'rot': 120,
                                    'offset': 0,
                                    'width': 0.35,
                                    'length': 0.9,
                                    'distance': 0
                                },
                                {
                                    'type': 3,
                                    'rot': -120,
                                    'offset': 0,
                                    'width': 0.35,
                                    'length': 0.9,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'industry', {
                            'barrels': [
                                {
                                    'type': 3,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.35,
                                    'length': 0.9,
                                    'distance': 0
                                },
                                {
                                    'type': 3,
                                    'rot': 120,
                                    'offset': 0,
                                    'width': 0.35,
                                    'length': 0.9,
                                    'distance': 0
                                },
                                {
                                    'type': 3,
                                    'rot': -120,
                                    'offset': 0,
                                    'width': 0.35,
                                    'length': 0.9,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'alloy', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 1,
                                    'rot': 180,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 0.8,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'trapper', {
                            'barrels': [{
                                    'type': 2,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.65,
                                    'length': 1,
                                    'distance': 0
                                }]
                        }), b2(hF, 'hex', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 180,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 60,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -60,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 120,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': -120,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1,
                                    'distance': 0
                                }
                            ]
                        }), b2(hF, 'machine', {
                            'barrels': [{
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.8,
                                    'length': 1,
                                    'distance': 0,
                                    'visualType': 1
                                }]
                        }), b2(hF, 'sprayer', {
                            'barrels': [
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.5,
                                    'length': 1.2,
                                    'distance': 0
                                },
                                {
                                    'type': 0,
                                    'rot': 0,
                                    'offset': 0,
                                    'width': 0.8,
                                    'length': 1,
                                    'distance': 0,
                                    'visualType': 1
                                }
                            ]
                        }), hF), b4 = {
                            'peacekeeper3': {
                                'sides': 3,
                                'outerSides': 3,
                                'outerSize': 0.4,
                                'layers': [{
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'rot': 0,
                                        'size': 0.7,
                                        'sides': 3,
                                        'outerSides': 0,
                                        'outerSize': 0
                                    }],
                                'gadgets': [{
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.3,
                                        'baseRot': 0
                                    }]
                            },
                            'peacekeeper2': {
                                'sides': 3,
                                'outerSides': 3,
                                'outerSize': 0.3,
                                'layers': [],
                                'gadgets': [{
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.4,
                                        'width': 0.25,
                                        'baseRot': 0
                                    }]
                            },
                            'peacekeeper1': {
                                'sides': 3,
                                'outerSides': 3,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.4,
                                        'width': 0.25,
                                        'baseRot': 0
                                    }]
                            },
                            'abyssling': {
                                'sides': 6,
                                'outerSides': 6,
                                'outerSize': 0.1,
                                'layers': [{
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'rot': 0,
                                        'size': 0.6,
                                        'sides': 6,
                                        'outerSides': 6,
                                        'outerSize': 0.1
                                    }],
                                'gadgets': [{
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.25,
                                        'baseRot': 0
                                    }]
                            },
                            'abyssguardian': {
                                'sides': 8,
                                'outerSides': 8,
                                'outerSize': 0.12,
                                'layers': [
                                    {
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'rot': 0,
                                        'size': 0.35,
                                        'sides': 8,
                                        'outerSides': 8,
                                        'outerSize': 0.06
                                    },
                                    {
                                        'offsetX': 0.48,
                                        'offsetY': -0.48,
                                        'rot': 0,
                                        'size': 0.15,
                                        'sides': 8,
                                        'outerSides': 8,
                                        'outerSize': 0.06
                                    },
                                    {
                                        'offsetX': 0.48,
                                        'offsetY': 0.48,
                                        'rot': 0,
                                        'size': 0.15,
                                        'sides': 8,
                                        'outerSides': 8,
                                        'outerSize': 0.06
                                    },
                                    {
                                        'offsetX': -0.48,
                                        'offsetY': 0.48,
                                        'rot': 0,
                                        'size': 0.15,
                                        'sides': 8,
                                        'outerSides': 8,
                                        'outerSize': 0.06
                                    },
                                    {
                                        'offsetX': -0.48,
                                        'offsetY': -0.48,
                                        'rot': 0,
                                        'size': 0.15,
                                        'sides': 8,
                                        'outerSides': 8,
                                        'outerSize': 0.06
                                    },
                                    {
                                        'offsetX': -0.68,
                                        'offsetY': 0,
                                        'rot': 0,
                                        'size': 0.15,
                                        'sides': 8,
                                        'outerSides': 8,
                                        'outerSize': 0.06
                                    },
                                    {
                                        'offsetX': 0.68,
                                        'offsetY': 0,
                                        'rot': 0,
                                        'size': 0.15,
                                        'sides': 8,
                                        'outerSides': 8,
                                        'outerSize': 0.06
                                    },
                                    {
                                        'offsetX': 0,
                                        'offsetY': -0.68,
                                        'rot': 0,
                                        'size': 0.15,
                                        'sides': 8,
                                        'outerSides': 8,
                                        'outerSize': 0.06
                                    },
                                    {
                                        'offsetX': 0,
                                        'offsetY': 0.68,
                                        'rot': 0,
                                        'size': 0.15,
                                        'sides': 8,
                                        'outerSides': 8,
                                        'outerSize': 0.06
                                    }
                                ],
                                'gadgets': [
                                    {
                                        'type': 3,
                                        'offsetX': 0,
                                        'offsetY': -0.68,
                                        'width': 0.1,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 0,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'anchored': 0,
                                        'team': 3
                                    },
                                    {
                                        'type': 3,
                                        'offsetX': 0,
                                        'offsetY': 0.68,
                                        'width': 0.1,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 180,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'anchored': 0,
                                        'team': 3
                                    },
                                    {
                                        'type': 3,
                                        'offsetX': -0.48,
                                        'offsetY': 0.48,
                                        'width': 0.1,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 225,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'anchored': 0,
                                        'team': 3
                                    },
                                    {
                                        'type': 3,
                                        'offsetX': 0.48,
                                        'offsetY': 0.48,
                                        'width': 0.1,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 135,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'anchored': 0,
                                        'team': 3
                                    },
                                    {
                                        'type': 3,
                                        'offsetX': 0.48,
                                        'offsetY': -0.48,
                                        'width': 0.1,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 45,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'anchored': 0,
                                        'team': 3
                                    },
                                    {
                                        'type': 3,
                                        'offsetX': -0.48,
                                        'offsetY': -0.48,
                                        'width': 0.1,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 315,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'anchored': 0,
                                        'team': 3
                                    },
                                    {
                                        'type': 3,
                                        'offsetX': -0.68,
                                        'offsetY': 0,
                                        'width': 0.1,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 270,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'anchored': 0,
                                        'team': 3
                                    },
                                    {
                                        'type': 3,
                                        'offsetX': 0.68,
                                        'offsetY': 0,
                                        'width': 0.1,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 90,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'anchored': 0,
                                        'team': 3
                                    },
                                    {
                                        'type': 3,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'width': 0.255,
                                        'tank': {
                                            'barrels': [{
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0,
                                                    'width': 0.65,
                                                    'length': 1.5,
                                                    'distance': 0
                                                }],
                                            'gadgets': [],
                                            'layers': []
                                        },
                                        'rotationType': 1,
                                        'baseRot': 0,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'anchored': 0,
                                        'team': 3
                                    },
                                    {
                                        'type': 2,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'width': 0.2,
                                        'rot': 0,
                                        'sides': 8,
                                        'backSides': 0,
                                        'subtype': 2,
                                        'radius': 0,
                                        'alpha': 0.3,
                                        'rotationType': 0,
                                        'showParticles': 0
                                    }
                                ]
                            },
                            'hyperion': {
                                'sides': 3,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [{
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'rot': 0,
                                        'size': 0.65,
                                        'sides': 3,
                                        'outerSides': 0,
                                        'outerSize': 0
                                    }],
                                'gadgets': [
                                    {
                                        'type': 1,
                                        'offsetX': 8.572527594031472e-17,
                                        'offsetY': -0.7,
                                        'width': 0.1,
                                        'rot': 0,
                                        'size': 1
                                    },
                                    {
                                        'type': 1,
                                        'offsetX': -0.606217782649107,
                                        'offsetY': 0.35000000000000003,
                                        'width': 0.1,
                                        'rot': 60,
                                        'size': 1
                                    },
                                    {
                                        'type': 1,
                                        'offsetX': 0.606217782649107,
                                        'offsetY': 0.35000000000000003,
                                        'width': 0.1,
                                        'rot': -60,
                                        'size': 1
                                    },
                                    {
                                        'type': 3,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'width': 0.35,
                                        'size': 1,
                                        'tank': {
                                            'barrels': [
                                                {
                                                    'type': 1,
                                                    'rot': -1.0472,
                                                    'offset': 0,
                                                    'width': 0.8571428571428572,
                                                    'length': 0.75,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 1,
                                                    'rot': 3.14159,
                                                    'offset': 0,
                                                    'width': 0.8571428571428572,
                                                    'length': 0.75,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 1,
                                                    'rot': 1.0472,
                                                    'offset': 0,
                                                    'width': 0.8571428571428572,
                                                    'length': 0.75,
                                                    'distance': 0
                                                }
                                            ],
                                            'gadgets': [],
                                            'layers': []
                                        },
                                        'rotationType': 1,
                                        'baseRot': 0,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'anchored': 1,
                                        'team': 3
                                    }
                                ]
                            },
                            'riotautocannon': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 3,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'width': 0.65,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 2,
                                                    'rot': 0,
                                                    'offset': 0,
                                                    'width': 0.65,
                                                    'length': 1,
                                                    'distance': 0.5
                                                },
                                                {
                                                    'type': 2,
                                                    'rot': 0,
                                                    'offset': 0,
                                                    'width': 0.65,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 2,
                                                    'rot': 0,
                                                    'offset': 0,
                                                    'width': 0.65,
                                                    'length': 1,
                                                    'distance': -0.5
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 0,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'idleBehavior': 0,
                                        'anchored': 0,
                                        'team': 3
                                    }]
                            },
                            'octoautocannon': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [
                                    {
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.25,
                                        'baseRot': 0
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.25,
                                        'baseRot': 0
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.25,
                                        'baseRot': 0
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.25,
                                        'baseRot': 0
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.25,
                                        'baseRot': 0
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.25,
                                        'baseRot': 0
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.25,
                                        'baseRot': 0
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.25,
                                        'baseRot': 0
                                    }
                                ]
                            },
                            'hexagonboss': {
                                'sides': 6,
                                'outerSides': 6,
                                'outerSize': 0.1,
                                'layers': [{
                                        'size': 0.5,
                                        'sides': 6,
                                        'outerSides': 6,
                                        'outerSize': 0.1,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }],
                                'gadgets': []
                            },
                            'base': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': []
                            },
                            'wall': {
                                'sides': 6,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': []
                            },
                            'thorn': {
                                'sides': 0,
                                'outerSides': 5,
                                'outerSize': 0.65,
                                'layers': [],
                                'gadgets': []
                            },
                            'spike': {
                                'sides': 0,
                                'outerSides': 4,
                                'outerSize': 0.6,
                                'layers': [],
                                'gadgets': []
                            },
                            'smasher': {
                                'sides': 0,
                                'outerSides': 6,
                                'outerSize': 0.3,
                                'layers': [],
                                'gadgets': []
                            },
                            'bastion': {
                                'sides': 8,
                                'outerSides': 5,
                                'outerSize': 0.55,
                                'layers': [{
                                        'size': 0.8,
                                        'sides': 6,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }],
                                'gadgets': [{
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.7,
                                        'width': 0.4,
                                        'speed': 1.3,
                                        'baseRot': 0,
                                        'size': 1
                                    }]
                            },
                            'saw': {
                                'sides': 0,
                                'outerSides': 4,
                                'outerSize': 0.85,
                                'layers': [],
                                'gadgets': []
                            },
                            'battleship': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [
                                    {
                                        'type': 1,
                                        'rot': 180,
                                        'offsetX': 9.797174393178826e-17,
                                        'offsetY': 0.8,
                                        'width': 0.5,
                                        'size': 1
                                    },
                                    {
                                        'type': 1,
                                        'rot': 60,
                                        'offsetX': 0.6928203230275509,
                                        'offsetY': -0.40000000000000013,
                                        'width': 0.5,
                                        'size': 1
                                    },
                                    {
                                        'type': 1,
                                        'rot': -60,
                                        'offsetX': -0.6928203230275509,
                                        'offsetY': -0.40000000000000013,
                                        'width': 0.5,
                                        'size': 1
                                    }
                                ]
                            },
                            'artillery': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.75,
                                        'width': 0.4,
                                        'speed': 1.3,
                                        'baseRot': 0,
                                        'size': 1
                                    }]
                            },
                            'heliosphere': {
                                'sides': 3,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [{
                                        'size': 0.6,
                                        'sides': 3,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }],
                                'gadgets': [
                                    {
                                        'type': 2,
                                        'sides': 0,
                                        'subtype': 0,
                                        'offsetX': 0,
                                        'offsetY': -0.7,
                                        'radius': 1.75,
                                        'width': 0.15,
                                        'alpha': 0.2,
                                        'rotationType': 1,
                                        'backSides': 0,
                                        'rot': 0
                                    },
                                    {
                                        'type': 2,
                                        'sides': 0,
                                        'subtype': 0,
                                        'offsetX': 0.6062177826491071,
                                        'offsetY': 0.3499999999999998,
                                        'radius': 1.75,
                                        'width': 0.15,
                                        'alpha': 0.2,
                                        'rotationType': 1,
                                        'backSides': 0,
                                        'rot': 0
                                    },
                                    {
                                        'type': 2,
                                        'sides': 0,
                                        'subtype': 0,
                                        'offsetX': -0.6062177826491071,
                                        'offsetY': 0.3499999999999998,
                                        'radius': 1.75,
                                        'width': 0.15,
                                        'alpha': 0.2,
                                        'rotationType': 1,
                                        'backSides': 0,
                                        'rot': 0
                                    },
                                    {
                                        'type': 2,
                                        'sides': 0,
                                        'subtype': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'radius': 2,
                                        'width': 0.1,
                                        'alpha': 0.2,
                                        'rotationType': 1,
                                        'backSides': 0,
                                        'rot': 0
                                    },
                                    {
                                        'type': 2,
                                        'sides': 0,
                                        'subtype': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'radius': 4,
                                        'width': 0.3,
                                        'rotationType': 1,
                                        'alpha': 0.3,
                                        'backSides': 0,
                                        'rot': 0
                                    }
                                ]
                            },
                            'galaxy': {
                                'sides': 3,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [{
                                        'size': 0.6,
                                        'sides': 3,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }],
                                'gadgets': [
                                    {
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': -0.7,
                                        'length': 0.15,
                                        'width': 0.075,
                                        'baseRot': 0,
                                        'idleBehavior': 1,
                                        'speed': 1,
                                        'size': 1
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 0.6062177826491071,
                                        'offsetY': 0.3499999999999998,
                                        'length': 0.15,
                                        'width': 0.075,
                                        'baseRot': 120,
                                        'idleBehavior': 1,
                                        'speed': 1,
                                        'size': 1
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': -0.6062177826491071,
                                        'offsetY': 0.3499999999999998,
                                        'length': 0.15,
                                        'width': 0.075,
                                        'baseRot': -120,
                                        'idleBehavior': 1,
                                        'speed': 1,
                                        'size': 1
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 0.3031088913245535,
                                        'offsetY': -0.17500000000000002,
                                        'length': 0.15,
                                        'width': 0.075,
                                        'baseRot': 60,
                                        'idleBehavior': 1,
                                        'speed': 1,
                                        'size': 1
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': -0.3031088913245535,
                                        'offsetY': -0.17500000000000002,
                                        'length': 0.15,
                                        'width': 0.075,
                                        'baseRot': -60,
                                        'idleBehavior': 1,
                                        'speed': 1,
                                        'size': 1
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 4.286263797015736e-17,
                                        'offsetY': 0.35,
                                        'length': 0.15,
                                        'width': 0.075,
                                        'baseRot': 180,
                                        'idleBehavior': 1,
                                        'speed': 1,
                                        'size': 1
                                    },
                                    {
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.35,
                                        'width': 0.2,
                                        'speed': 1.25,
                                        'baseRot': 0,
                                        'size': 1
                                    }
                                ]
                            },
                            'cygnus': {
                                'sides': 3,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [{
                                        'size': 0.6,
                                        'sides': 3,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }],
                                'gadgets': [{
                                        'type': 2,
                                        'sides': 8,
                                        'subtype': 1,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'radius': 6.5,
                                        'width': 0.5,
                                        'rotationType': 1,
                                        'alpha': 0.3,
                                        'backSides': 0,
                                        'rot': 0
                                    }]
                            },
                            'comet': {
                                'sides': 3,
                                'outerSides': 3,
                                'outerSize': 0.2,
                                'layers': [{
                                        'size': 0.35,
                                        'sides': 3,
                                        'outerSides': -3,
                                        'outerSize': 0.5,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }],
                                'gadgets': []
                            },
                            'ziggurat': {
                                'sides': 8,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [
                                    {
                                        'size': 0.7,
                                        'sides': 6,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    },
                                    {
                                        'size': 0.4,
                                        'sides': 4,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }
                                ],
                                'gadgets': []
                            },
                            'chasm': {
                                'sides': 3,
                                'outerSides': 3,
                                'outerSize': 0.3,
                                'layers': [
                                    {
                                        'size': 0.8,
                                        'sides': 3,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    },
                                    {
                                        'size': 0.4,
                                        'sides': 3,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }
                                ],
                                'gadgets': []
                            },
                            'andromeda': {
                                'sides': 3,
                                'outerSides': 3,
                                'outerSize': 0.15,
                                'layers': [
                                    {
                                        'size': 0.7,
                                        'sides': 3,
                                        'outerSides': 3,
                                        'outerSize': 0.15,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    },
                                    {
                                        'size': 0.3,
                                        'sides': 3,
                                        'outerSides': 3,
                                        'outerSize': 0.15,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }
                                ],
                                'gadgets': [{
                                        'type': 2,
                                        'sides': 3,
                                        'backSides': 3,
                                        'subtype': 2,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'radius': 3,
                                        'width': 0.3,
                                        'rotationType': 0,
                                        'alpha': 0.3,
                                        'rot': 0
                                    }]
                            },
                            'void': {
                                'sides': 3,
                                'outerSides': 3,
                                'outerSize': 0.5,
                                'layers': [
                                    {
                                        'size': 0.8,
                                        'sides': 3,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    },
                                    {
                                        'size': 0.4,
                                        'sides': 3,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }
                                ],
                                'gadgets': []
                            },
                            'mothership': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [
                                    {
                                        'type': 1,
                                        'rot': 45,
                                        'offsetX': 0.565685424949238,
                                        'offsetY': -0.5656854249492381,
                                        'width': 0.5,
                                        'speed': 1,
                                        'size': 1
                                    },
                                    {
                                        'type': 1,
                                        'rot': -45,
                                        'offsetX': -0.565685424949238,
                                        'offsetY': -0.5656854249492381,
                                        'width': 0.5,
                                        'speed': 1,
                                        'size': 1
                                    },
                                    {
                                        'type': 1,
                                        'rot': 135,
                                        'offsetX': 0.5656854249492381,
                                        'offsetY': 0.565685424949238,
                                        'width': 0.5,
                                        'speed': 1,
                                        'size': 1
                                    },
                                    {
                                        'type': 1,
                                        'rot': -135,
                                        'offsetX': -0.5656854249492381,
                                        'offsetY': 0.565685424949238,
                                        'width': 0.5,
                                        'speed': 1,
                                        'size': 1
                                    }
                                ]
                            },
                            'flare': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 2,
                                        'sides': 0,
                                        'subtype': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'radius': 7,
                                        'width': 0.8,
                                        'rotationType': 1,
                                        'alpha': 0.3,
                                        'backSides': 0,
                                        'rot': 0,
                                        'showParticles': 0
                                    }]
                            },
                            'bombard': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 1,
                                        'width': 0.5,
                                        'speed': 1.3,
                                        'baseRot': 0,
                                        'size': 1
                                    }]
                            },
                            'fabricator': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 2,
                                        'sides': 8,
                                        'subtype': 1,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'radius': 8,
                                        'width': 0.9,
                                        'rotationType': 1,
                                        'alpha': 0.3,
                                        'backSides': 0,
                                        'rot': 0,
                                        'showParticles': 0
                                    }]
                            },
                            'pollux': {
                                'sides': 3,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [{
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'rot': 0,
                                        'size': 0.75,
                                        'sides': 3,
                                        'outerSides': 0,
                                        'outerSize': 0
                                    }],
                                'gadgets': [{
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.4,
                                        'width': 0.25,
                                        'speed': 1.3,
                                        'size': 1,
                                        'baseRot': 0
                                    }]
                            },
                            'castle': {
                                'sides': 8,
                                'outerSides': 8,
                                'outerSize': 0.3,
                                'layers': [{
                                        'size': 0.7,
                                        'sides': 8,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'rot': 0,
                                        'offsetX': 0,
                                        'offsetY': 0
                                    }],
                                'gadgets': [{
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.6,
                                        'width': 0.35,
                                        'speed': 1,
                                        'baseRot': 0,
                                        'size': 1
                                    }]
                            },
                            'inferno': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 2,
                                        'sides': 0,
                                        'subtype': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'radius': 8,
                                        'width': 0.9,
                                        'rotationType': 1,
                                        'alpha': 0.3,
                                        'backSides': 0,
                                        'rot': 0,
                                        'showParticles': 0
                                    }]
                            },
                            'quadruplet': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 3,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'width': 0.65,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.65,
                                                    'width': 0.3,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.65,
                                                    'width': 0.3,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.3,
                                                    'width': 0.3,
                                                    'length': 0.8,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.3,
                                                    'width': 0.3,
                                                    'length': 0.8,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 0,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'idleBehavior': 0,
                                        'anchored': 0,
                                        'team': 3
                                    }]
                            },
                            'triplet': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 3,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'width': 0.6,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.5,
                                                    'width': 0.4,
                                                    'length': 0.8,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.5,
                                                    'width': 0.4,
                                                    'length': 0.8,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 0,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'idleBehavior': 0,
                                        'anchored': 0,
                                        'team': 3
                                    }]
                            },
                            'turret': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 3,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'width': 0.5,
                                        'tank': {
                                            'gadgets': [],
                                            'layers': [],
                                            'barrels': [
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': -0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                },
                                                {
                                                    'type': 0,
                                                    'rot': 0,
                                                    'offset': 0.5,
                                                    'width': 0.4,
                                                    'length': 1,
                                                    'distance': 0
                                                }
                                            ]
                                        },
                                        'rotationType': 1,
                                        'baseRot': 0,
                                        'sides': 0,
                                        'outerSides': 0,
                                        'outerSize': 0,
                                        'idleBehavior': 0,
                                        'anchored': 0,
                                        'team': 3
                                    }]
                            },
                            'sentry': {
                                'sides': 0,
                                'outerSides': 0,
                                'outerSize': 0,
                                'layers': [],
                                'gadgets': [{
                                        'type': 0,
                                        'offsetX': 0,
                                        'offsetY': 0,
                                        'length': 0.5,
                                        'width': 0.25,
                                        'baseRot': 0
                                    }]
                            },
                            'fortress': {
                                'sides': 6,
                                'outerSides': 6,
                                'outerSize': 0.3,
                                'layers': [],
                                'gadgets': []
                            }
                        }, b5 = 360 * Math.random(), b6 = {
                            'default': {
                                'tanks': [
                                    {
                                        'x': 0,
                                        'y': 0,
                                        'size': 40,
                                        'd': 135,
                                        'color': c8.a[0],
                                        'weapon': 'split',
                                        'body': 'wall'
                                    },
                                    {
                                        'x': 400,
                                        'y': 100,
                                        'size': 30,
                                        'd': -68,
                                        'color': c8.a[1],
                                        'weapon': 'mono',
                                        'body': 'base'
                                    },
                                    {
                                        'x': -700,
                                        'y': -100,
                                        'size': 60,
                                        'd': 74,
                                        'color': c8.a[2],
                                        'weapon': 'annihilator',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': 400,
                                        'y': -500,
                                        'size': 60,
                                        'd': 28,
                                        'color': c8.a[3],
                                        'weapon': 'octo',
                                        'body': 'bastion',
                                        'autoCannonRot': [-45]
                                    },
                                    {
                                        'x': -200,
                                        'y': 600,
                                        'size': 50,
                                        'd': 10,
                                        'color': '#c0c0c0',
                                        'weapon': 'spread',
                                        'body': 'artillery',
                                        'autoCannonRot': [170]
                                    },
                                    {
                                        'x': -900,
                                        'y': -800,
                                        'size': 60,
                                        'd': 69,
                                        'color': c8.a[1],
                                        'weapon': 'marksman',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': 900,
                                        'y': 200,
                                        'size': 100,
                                        'd': 69,
                                        'color': '#f177dd',
                                        'weapon': 'debris',
                                        'body': 'chasm'
                                    },
                                    {
                                        'x': -1100,
                                        'y': 1000,
                                        'size': 120,
                                        'd': 69,
                                        'color': '#f177dd',
                                        'weapon': 'satellite',
                                        'body': 'heliosphere'
                                    }
                                ],
                                'polygons': [
                                    {
                                        'x': 200,
                                        'y': -300,
                                        'level': 4,
                                        'd': 32
                                    },
                                    {
                                        'x': 500,
                                        'y': 750,
                                        'level': 4,
                                        'd': 89
                                    },
                                    {
                                        'x': -150,
                                        'y': -250,
                                        'level': 3,
                                        'd': 57
                                    },
                                    {
                                        'x': -170,
                                        'y': 800,
                                        'level': 3,
                                        'd': -57
                                    },
                                    {
                                        'x': -750,
                                        'y': -600,
                                        'level': 3,
                                        'd': -98
                                    },
                                    {
                                        'x': -690,
                                        'y': 100,
                                        'level': 2,
                                        'd': -23
                                    },
                                    {
                                        'x': -600,
                                        'y': 180,
                                        'level': 2,
                                        'd': 85
                                    },
                                    {
                                        'x': 420,
                                        'y': 520,
                                        'level': 2,
                                        'd': 85
                                    },
                                    {
                                        'x': 700,
                                        'y': 700,
                                        'level': 2,
                                        'd': -74
                                    },
                                    {
                                        'x': 650,
                                        'y': -700,
                                        'level': 2,
                                        'd': 40
                                    },
                                    {
                                        'x': 770,
                                        'y': -90,
                                        'level': 2,
                                        'd': 40
                                    },
                                    {
                                        'x': -630,
                                        'y': 670,
                                        'level': 1,
                                        'd': 40
                                    },
                                    {
                                        'x': -680,
                                        'y': 600,
                                        'level': 1,
                                        'd': 74
                                    },
                                    {
                                        'x': -250,
                                        'y': 1580,
                                        'level': 1,
                                        'd': -6
                                    },
                                    {
                                        'x': -200,
                                        'y': 1500,
                                        'level': 1,
                                        'd': -49
                                    },
                                    {
                                        'x': 910,
                                        'y': 40,
                                        'level': 1,
                                        'd': -49
                                    },
                                    {
                                        'x': -910,
                                        'y': 310,
                                        'level': 1,
                                        'd': 32
                                    },
                                    {
                                        'x': -160,
                                        'y': 400,
                                        'level': 1,
                                        'd': 74
                                    },
                                    {
                                        'x': -100,
                                        'y': 50,
                                        'level': 0,
                                        'd': 32
                                    },
                                    {
                                        'x': 500,
                                        'y': -870,
                                        'level': 0,
                                        'd': 79
                                    },
                                    {
                                        'x': -300,
                                        'y': -800,
                                        'level': 0,
                                        'd': -82
                                    },
                                    {
                                        'x': -500,
                                        'y': 800,
                                        'level': 0,
                                        'd': 4
                                    },
                                    {
                                        'x': 800,
                                        'y': 850,
                                        'level': 0,
                                        'd': 2
                                    },
                                    {
                                        'x': -200,
                                        'y': 200,
                                        'level': 0,
                                        'd': -32
                                    },
                                    {
                                        'x': -500,
                                        'y': 300,
                                        'level': 0,
                                        'd': -32
                                    },
                                    {
                                        'x': 500,
                                        'y': 280,
                                        'level': 0,
                                        'd': -84
                                    },
                                    {
                                        'x': -650,
                                        'y': -280,
                                        'level': 0,
                                        'd': -84
                                    },
                                    {
                                        'x': -600,
                                        'y': -270,
                                        'level': 0,
                                        'd': -24
                                    },
                                    {
                                        'x': 580,
                                        'y': -320,
                                        'level': 0,
                                        'd': -24
                                    }
                                ],
                                'dimension': {
                                    'visual': {
                                        'gridSize': 30,
                                        'backgroundColor': '#CDCDCD',
                                        'gridColor': '#C8C8C8',
                                        'particles': [{
                                                'spawnrate': 0,
                                                'speed': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'd': {
                                                    'min': 0,
                                                    'max': 360
                                                },
                                                'size': {
                                                    'min': 6,
                                                    'max': 6
                                                },
                                                'lifetime': {
                                                    'min': 30,
                                                    'max': 60
                                                },
                                                'sides': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'transparency': {
                                                    'min': 1,
                                                    'max': 1
                                                },
                                                'color': {
                                                    'min': '#CDCDCD',
                                                    'max': '#C8C8C8'
                                                }
                                            }]
                                    },
                                    'bases': [],
                                    'walls': [],
                                    'gates': [],
                                    'mapSize': 1500,
                                    'trueMapSize': 1
                                }
                            },
                            10: {
                                'polygons': [
                                    {
                                        'x': -680,
                                        'y': -220,
                                        'd': 23,
                                        'level': 2
                                    },
                                    {
                                        'x': 680,
                                        'y': 520,
                                        'd': 98,
                                        'level': 2
                                    },
                                    {
                                        'x': -820,
                                        'y': 500,
                                        'd': 5,
                                        'level': 0
                                    },
                                    {
                                        'x': -880,
                                        'y': -420,
                                        'd': 156,
                                        'level': 0
                                    },
                                    {
                                        'x': -680,
                                        'y': 1020,
                                        'd': 23,
                                        'level': 0
                                    },
                                    {
                                        'x': -780,
                                        'y': 1090,
                                        'd': 89,
                                        'level': 0
                                    },
                                    {
                                        'x': -780,
                                        'y': 890,
                                        'd': 156,
                                        'level': 1
                                    },
                                    {
                                        'x': 880,
                                        'y': -620,
                                        'd': 98,
                                        'level': 7
                                    },
                                    {
                                        'x': 180,
                                        'y': -920,
                                        'd': 8,
                                        'level': 6
                                    },
                                    {
                                        'x': 1280,
                                        'y': -120,
                                        'd': 49,
                                        'level': 5
                                    },
                                    {
                                        'x': 900,
                                        'y': 230,
                                        'd': 156,
                                        'level': 4
                                    },
                                    {
                                        'x': -200,
                                        'y': -220,
                                        'd': 8,
                                        'level': 3
                                    },
                                    {
                                        'x': 200,
                                        'y': -520,
                                        'd': 98,
                                        'level': 3
                                    },
                                    {
                                        'x': 600,
                                        'y': -1020,
                                        'd': 32,
                                        'level': 3
                                    },
                                    {
                                        'x': -200,
                                        'y': -720,
                                        'd': 156,
                                        'level': 2
                                    }
                                ],
                                'tanks': [{
                                        'x': 100,
                                        'y': -50,
                                        'size': 36,
                                        'd': -76,
                                        'color': c8.a[0],
                                        'weapon': 'split',
                                        'body': 'wall'
                                    }],
                                'dimension': {
                                    'visual': {
                                        'gridSize': 30,
                                        'backgroundColor': '#CDCDCD',
                                        'gridColor': '#C8C8C8',
                                        'particles': [{
                                                'spawnrate': 0,
                                                'speed': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'd': {
                                                    'min': 0,
                                                    'max': 360
                                                },
                                                'size': {
                                                    'min': 6,
                                                    'max': 6
                                                },
                                                'lifetime': {
                                                    'min': 30,
                                                    'max': 60
                                                },
                                                'sides': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'transparency': {
                                                    'min': 1,
                                                    'max': 1
                                                },
                                                'color': {
                                                    'min': '#CDCDCD',
                                                    'max': '#C8C8C8'
                                                }
                                            }]
                                    },
                                    'bases': [{
                                            'width': 0.4,
                                            'height': 0.4,
                                            'x': 0.2,
                                            'y': 0.2,
                                            'team': 24
                                        }],
                                    'walls': [],
                                    'gates': [],
                                    'mapSize': 9000,
                                    'trueMapSize': 1
                                }
                            },
                            3: {
                                'tanks': [
                                    {
                                        'x': -800,
                                        'y': -300,
                                        'size': 36,
                                        'd': 59,
                                        'color': c8.a[0],
                                        'weapon': 'split',
                                        'body': 'wall'
                                    },
                                    {
                                        'x': -350,
                                        'y': 20,
                                        'size': 34,
                                        'd': 97,
                                        'color': c8.a[0],
                                        'weapon': 'duo',
                                        'body': 'turret',
                                        'autoCannonRot': [95]
                                    },
                                    {
                                        'x': -630,
                                        'y': -450,
                                        'size': 46,
                                        'd': 52,
                                        'color': c8.a[0],
                                        'weapon': 'horizon',
                                        'body': 'fabricator'
                                    },
                                    {
                                        'x': -1030,
                                        'y': 1050,
                                        'size': 45,
                                        'd': 128,
                                        'color': c8.a[0],
                                        'weapon': 'engineer',
                                        'body': 'castle',
                                        'autoCannonRot': [-153]
                                    },
                                    {
                                        'x': -150,
                                        'y': -20,
                                        'size': 53,
                                        'd': 84,
                                        'color': c8.a[0],
                                        'weapon': 'streamliner',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': -200,
                                        'y': 180,
                                        'size': 48,
                                        'd': 96,
                                        'color': c8.a[0],
                                        'weapon': 'quadro',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': -190,
                                        'y': -200,
                                        'size': 51,
                                        'd': 79,
                                        'color': c8.a[0],
                                        'weapon': 'annihilator',
                                        'body': 'bastion',
                                        'autoCannonRot': [86]
                                    },
                                    {
                                        'x': -400,
                                        'y': -500,
                                        'size': 45,
                                        'd': 79,
                                        'color': c8.a[0],
                                        'weapon': 'emperor',
                                        'body': 'mothership'
                                    },
                                    {
                                        'x': -300,
                                        'y': 260,
                                        'size': 45,
                                        'd': 67,
                                        'color': c8.a[0],
                                        'weapon': 'manager',
                                        'body': 'castle',
                                        'autoCannonRot': [108]
                                    },
                                    {
                                        'x': -300,
                                        'y': 400,
                                        'size': 42,
                                        'd': 114,
                                        'color': c8.a[0],
                                        'weapon': 'wake',
                                        'body': 'thorn'
                                    },
                                    {
                                        'x': -600,
                                        'y': 500,
                                        'size': 53,
                                        'd': 114,
                                        'color': c8.a[0],
                                        'weapon': 'executive',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': -1000,
                                        'y': 400,
                                        'size': 48,
                                        'd': 112,
                                        'color': c8.a[0],
                                        'weapon': 'marksman',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': -1100,
                                        'y': -200,
                                        'size': 48,
                                        'd': 85,
                                        'color': c8.a[0],
                                        'weapon': 'assassin',
                                        'body': 'thorn'
                                    },
                                    {
                                        'x': -300,
                                        'y': -400,
                                        'size': 42,
                                        'd': 114,
                                        'color': c8.a[0],
                                        'weapon': 'gunner',
                                        'body': 'artillery',
                                        'autoCannonRot': [68]
                                    },
                                    {
                                        'x': -390,
                                        'y': -150,
                                        'size': 42,
                                        'd': 78,
                                        'color': c8.a[0],
                                        'weapon': 'beta',
                                        'body': 'thorn'
                                    },
                                    {
                                        'x': -590,
                                        'y': 20,
                                        'size': 46,
                                        'd': 99,
                                        'color': c8.a[0],
                                        'weapon': 'octo',
                                        'body': 'quadruplet',
                                        'autoCannonRot': [
                                            -153,
                                            -77,
                                            -9,
                                            -2
                                        ]
                                    },
                                    {
                                        'x': 1200,
                                        'y': -50,
                                        'size': 60,
                                        'd': -96,
                                        'color': c8.a[1],
                                        'weapon': 'riot',
                                        'body': 'inferno'
                                    },
                                    {
                                        'x': 150,
                                        'y': 20,
                                        'size': 53,
                                        'd': -96,
                                        'color': c8.a[1],
                                        'weapon': 'alpha',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': 150,
                                        'y': -180,
                                        'size': 53,
                                        'd': -79,
                                        'color': c8.a[1],
                                        'weapon': 'minigun',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': 190,
                                        'y': 180,
                                        'size': 53,
                                        'd': -98,
                                        'color': c8.a[1],
                                        'weapon': 'amalgam',
                                        'body': 'bastion'
                                    },
                                    {
                                        'x': 500,
                                        'y': 100,
                                        'size': 49,
                                        'd': -153,
                                        'color': c8.a[1],
                                        'weapon': 'palisade',
                                        'body': 'bombard',
                                        'autoCannonRot': [-102]
                                    },
                                    {
                                        'x': 500,
                                        'y': -200,
                                        'size': 39,
                                        'd': -93,
                                        'color': c8.a[1],
                                        'weapon': 'trio',
                                        'body': 'triplet',
                                        'autoCannonRot': [167]
                                    },
                                    {
                                        'x': 600,
                                        'y': 230,
                                        'size': 42,
                                        'd': -68,
                                        'color': c8.a[1],
                                        'weapon': 'stockade',
                                        'body': 'artillery',
                                        'autoCannonRot': [-116]
                                    },
                                    {
                                        'x': 300,
                                        'y': 400,
                                        'size': 48,
                                        'd': 79,
                                        'color': c8.a[1],
                                        'weapon': 'penta',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': 300,
                                        'y': -400,
                                        'size': 42,
                                        'd': -63,
                                        'color': c8.a[1],
                                        'weapon': 'arc',
                                        'body': 'artillery',
                                        'autoCannonRot': [-98]
                                    },
                                    {
                                        'x': 150,
                                        'y': -600,
                                        'size': 52,
                                        'd': -29,
                                        'color': c8.a[1],
                                        'weapon': 'marksman',
                                        'body': 'bombard',
                                        'autoCannonRot': [-73]
                                    },
                                    {
                                        'x': 1000,
                                        'y': 600,
                                        'size': 50,
                                        'd': -101,
                                        'color': c8.a[1],
                                        'weapon': 'marksman',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': 150,
                                        'y': 600,
                                        'size': 40,
                                        'd': -136,
                                        'color': c8.a[1],
                                        'weapon': 'assassin',
                                        'body': 'artillery',
                                        'autoCannonRot': [-119]
                                    }
                                ],
                                'polygons': [
                                    {
                                        'x': -680,
                                        'y': -220,
                                        'd': 98,
                                        'level': 2
                                    },
                                    {
                                        'x': -950,
                                        'y': -520,
                                        'd': 98,
                                        'level': 1
                                    },
                                    {
                                        'x': -1020,
                                        'y': -560,
                                        'd': 42,
                                        'level': 1
                                    },
                                    {
                                        'x': -1000,
                                        'y': -460,
                                        'd': 42,
                                        'level': 0
                                    },
                                    {
                                        'x': -950,
                                        'y': 100,
                                        'd': -101,
                                        'level': 5
                                    },
                                    {
                                        'x': -600,
                                        'y': 250,
                                        'd': 77,
                                        'level': 4
                                    },
                                    {
                                        'x': -400,
                                        'y': 1000,
                                        'd': 77,
                                        'level': 7
                                    },
                                    {
                                        'x': 1000,
                                        'y': 2000,
                                        'd': 77,
                                        'level': 10
                                    },
                                    {
                                        'x': 650,
                                        'y': -600,
                                        'd': -80,
                                        'level': 6
                                    },
                                    {
                                        'x': 580,
                                        'y': 650,
                                        'd': -80,
                                        'level': 4
                                    },
                                    {
                                        'x': -1050,
                                        'y': 720,
                                        'd': 98,
                                        'level': 1
                                    },
                                    {
                                        'x': -1080,
                                        'y': 820,
                                        'd': 161,
                                        'level': 1
                                    },
                                    {
                                        'x': -1120,
                                        'y': 760,
                                        'd': 42,
                                        'level': 0
                                    },
                                    {
                                        'x': -1100,
                                        'y': 660,
                                        'd': 42,
                                        'level': 0
                                    },
                                    {
                                        'x': -800,
                                        'y': -1500,
                                        'd': 77,
                                        'level': 9
                                    },
                                    {
                                        'x': 800,
                                        'y': -1500,
                                        'd': 149,
                                        'level': 8
                                    }
                                ],
                                'dimension': {
                                    'visual': {
                                        'gridSize': 30,
                                        'backgroundColor': '#CDCDCD',
                                        'gridColor': '#C8C8C8',
                                        'particles': [{
                                                'spawnrate': 0,
                                                'speed': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'd': {
                                                    'min': 0,
                                                    'max': 360
                                                },
                                                'size': {
                                                    'min': 6,
                                                    'max': 6
                                                },
                                                'lifetime': {
                                                    'min': 30,
                                                    'max': 60
                                                },
                                                'sides': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'transparency': {
                                                    'min': 1,
                                                    'max': 1
                                                },
                                                'color': {
                                                    'min': '#CDCDCD',
                                                    'max': '#C8C8C8'
                                                }
                                            }]
                                    },
                                    'bases': [],
                                    'walls': [],
                                    'gates': [],
                                    'mapSize': 1500,
                                    'trueMapSize': 1
                                }
                            },
                            2: {
                                'polygons': [
                                    {
                                        'x': -680,
                                        'y': -220,
                                        'd': 23,
                                        'level': 2
                                    },
                                    {
                                        'x': 680,
                                        'y': 520,
                                        'd': 98,
                                        'level': 2
                                    },
                                    {
                                        'x': -820,
                                        'y': 500,
                                        'd': 5,
                                        'level': 0
                                    },
                                    {
                                        'x': -880,
                                        'y': -420,
                                        'd': 156,
                                        'level': 0
                                    },
                                    {
                                        'x': -680,
                                        'y': 1020,
                                        'd': 23,
                                        'level': 0
                                    },
                                    {
                                        'x': -780,
                                        'y': 1090,
                                        'd': 89,
                                        'level': 0
                                    },
                                    {
                                        'x': -780,
                                        'y': 890,
                                        'd': 156,
                                        'level': 1
                                    },
                                    {
                                        'x': 880,
                                        'y': -620,
                                        'd': 98,
                                        'level': 7
                                    },
                                    {
                                        'x': 180,
                                        'y': -920,
                                        'd': 8,
                                        'level': 6
                                    },
                                    {
                                        'x': 1280,
                                        'y': -120,
                                        'd': 49,
                                        'level': 5
                                    },
                                    {
                                        'x': 900,
                                        'y': 230,
                                        'd': 156,
                                        'level': 4
                                    },
                                    {
                                        'x': -200,
                                        'y': -220,
                                        'd': 8,
                                        'level': 3
                                    },
                                    {
                                        'x': 200,
                                        'y': -520,
                                        'd': 98,
                                        'level': 3
                                    },
                                    {
                                        'x': 600,
                                        'y': -1020,
                                        'd': 32,
                                        'level': 3
                                    },
                                    {
                                        'x': -200,
                                        'y': -720,
                                        'd': 156,
                                        'level': 2
                                    }
                                ],
                                'tanks': [
                                    {
                                        'x': -1100,
                                        'y': -500,
                                        'size': 36,
                                        'd': -76,
                                        'color': c8.a[0],
                                        'weapon': 'split',
                                        'body': 'wall'
                                    },
                                    {
                                        'x': 1000,
                                        'y': -100,
                                        'size': 45,
                                        'd': 81,
                                        'color': '#c0c0c0',
                                        'weapon': 'hex',
                                        'body': 'base'
                                    },
                                    {
                                        'x': -200,
                                        'y': -1150,
                                        'size': 45,
                                        'd': 52,
                                        'color': '#c0c0c0',
                                        'weapon': 'sprayer',
                                        'body': 'base'
                                    },
                                    {
                                        'x': 900,
                                        'y': 650,
                                        'size': 30,
                                        'd': 95,
                                        'color': c8.a[0],
                                        'weapon': 'factory',
                                        'body': 'base'
                                    },
                                    {
                                        'x': 450,
                                        'y': -400,
                                        'size': 52,
                                        'd': 104,
                                        'color': c8.a[0],
                                        'weapon': 'riot',
                                        'body': 'riotautocannon',
                                        'autoCannonRot': [-107]
                                    },
                                    {
                                        'x': 0,
                                        'y': -0,
                                        'size': 30,
                                        'd': -25,
                                        'color': c8.a[0],
                                        'weapon': 'octo',
                                        'body': 'octoautocannon',
                                        'autoCannonRot': [
                                            75,
                                            165,
                                            255,
                                            345,
                                            210,
                                            120,
                                            300,
                                            30
                                        ]
                                    },
                                    {
                                        'x': -1500,
                                        'y': 1500,
                                        'size': 46,
                                        'd': 129,
                                        'color': c8.a[0],
                                        'weapon': 'brokenpenta',
                                        'body': 'base'
                                    },
                                    {
                                        'x': 1100,
                                        'y': -1150,
                                        'size': 132,
                                        'd': -50,
                                        'color': c8.c[3],
                                        'weapon': 'hexagonboss',
                                        'body': 'hexagonboss'
                                    }
                                ],
                                'dimension': {
                                    'visual': {
                                        'gridSize': 30,
                                        'backgroundColor': '#CDCDCD',
                                        'gridColor': '#C8C8C8',
                                        'particles': [{
                                                'spawnrate': 0,
                                                'speed': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'd': {
                                                    'min': 0,
                                                    'max': 360
                                                },
                                                'size': {
                                                    'min': 6,
                                                    'max': 6
                                                },
                                                'lifetime': {
                                                    'min': 30,
                                                    'max': 60
                                                },
                                                'sides': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'transparency': {
                                                    'min': 1,
                                                    'max': 1
                                                },
                                                'color': {
                                                    'min': '#CDCDCD',
                                                    'max': '#C8C8C8'
                                                }
                                            }]
                                    },
                                    'bases': [{
                                            'width': 0.5,
                                            'height': 0.5,
                                            'x': 0.2,
                                            'y': 0.2,
                                            'team': 10
                                        }],
                                    'walls': [],
                                    'gates': [],
                                    'mapSize': 9000,
                                    'trueMapSize': 1
                                }
                            },
                            1: {
                                'tanks': [
                                    {
                                        'x': 400,
                                        'y': -300,
                                        'size': 51,
                                        'd': -57,
                                        'color': c8.a[0],
                                        'weapon': 'arsenal',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': 300,
                                        'y': -330,
                                        'size': 42,
                                        'd': -44,
                                        'color': c8.a[0],
                                        'weapon': 'spread',
                                        'body': 'triplet',
                                        'autoCannonRot': [-44]
                                    },
                                    {
                                        'x': 700,
                                        'y': -200,
                                        'size': 51,
                                        'd': -83,
                                        'color': c8.a[0],
                                        'weapon': 'manufacturer',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': 600,
                                        'y': -500,
                                        'size': 36,
                                        'd': -156,
                                        'color': c8.a[0],
                                        'weapon': 'split',
                                        'body': 'wall'
                                    },
                                    {
                                        'x': 600,
                                        'y': -500,
                                        'size': 36,
                                        'd': -156,
                                        'color': c8.a[0],
                                        'weapon': 'split',
                                        'body': 'wall'
                                    },
                                    {
                                        'x': 1200,
                                        'y': -700,
                                        'size': 55,
                                        'd': -69,
                                        'color': c8.a[0],
                                        'weapon': 'marksman',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': -350,
                                        'y': -280,
                                        'size': 51,
                                        'd': 94,
                                        'color': c8.a[1],
                                        'weapon': 'palisade',
                                        'body': 'bombard',
                                        'autoCannonRot': [53]
                                    },
                                    {
                                        'x': -750,
                                        'y': -480,
                                        'size': 54,
                                        'd': -53,
                                        'color': c8.a[1],
                                        'weapon': 'penta',
                                        'body': 'saw',
                                        'autoCannonRot': [53]
                                    },
                                    {
                                        'x': -50,
                                        'y': -580,
                                        'size': 42,
                                        'd': 8,
                                        'color': c8.a[1],
                                        'weapon': 'assassin',
                                        'body': 'artillery',
                                        'autoCannonRot': [53]
                                    },
                                    {
                                        'x': -150,
                                        'y': -400,
                                        'size': 42,
                                        'd': 21,
                                        'color': c8.a[1],
                                        'weapon': 'trio',
                                        'body': 'castle',
                                        'autoCannonRot': [53]
                                    },
                                    {
                                        'x': -1100,
                                        'y': -500,
                                        'size': 56,
                                        'd': -111,
                                        'color': c8.a[1],
                                        'weapon': 'disperse',
                                        'body': 'bombard',
                                        'autoCannonRot': [-121]
                                    },
                                    {
                                        'x': 380,
                                        'y': 370,
                                        'size': 51,
                                        'd': 128,
                                        'color': c8.a[2],
                                        'weapon': 'shrapnel',
                                        'body': 'inferno',
                                        'autoCannonRot': [53]
                                    },
                                    {
                                        'x': 230,
                                        'y': 470,
                                        'size': 42,
                                        'd': 179,
                                        'color': c8.a[2],
                                        'weapon': 'overlord',
                                        'body': 'battleship',
                                        'autoCannonRot': [53]
                                    },
                                    {
                                        'x': 530,
                                        'y': 770,
                                        'size': 53,
                                        'd': -103,
                                        'color': c8.a[2],
                                        'weapon': 'wave',
                                        'body': 'saw',
                                        'autoCannonRot': [53]
                                    },
                                    {
                                        'x': 430,
                                        'y': 220,
                                        'size': 41,
                                        'd': -103,
                                        'color': c8.a[2],
                                        'weapon': 'gunner',
                                        'body': 'artillery',
                                        'autoCannonRot': [143]
                                    },
                                    {
                                        'x': 380,
                                        'y': 120,
                                        'size': 30,
                                        'd': -103,
                                        'color': c8.a[2],
                                        'weapon': 'trapper',
                                        'body': 'smasher',
                                        'autoCannonRot': [143]
                                    },
                                    {
                                        'x': 1100,
                                        'y': 780,
                                        'size': 60,
                                        'd': -23,
                                        'color': c8.a[2],
                                        'weapon': 'annihilator',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': -420,
                                        'y': 340,
                                        'size': 51,
                                        'd': 128,
                                        'color': c8.a[3],
                                        'weapon': 'riot',
                                        'body': 'saw',
                                        'autoCannonRot': [53]
                                    },
                                    {
                                        'x': -470,
                                        'y': 180,
                                        'size': 46,
                                        'd': 100,
                                        'color': c8.a[3],
                                        'weapon': 'annihilator',
                                        'body': 'bombard',
                                        'autoCannonRot': [163]
                                    },
                                    {
                                        'x': -670,
                                        'y': 780,
                                        'size': 56,
                                        'd': 100,
                                        'color': c8.a[3],
                                        'weapon': 'marksman',
                                        'body': 'bastion',
                                        'autoCannonRot': [163]
                                    },
                                    {
                                        'x': -220,
                                        'y': 380,
                                        'size': 36,
                                        'd': 124,
                                        'color': c8.a[3],
                                        'weapon': 'alloy',
                                        'body': 'fortress'
                                    },
                                    {
                                        'x': -820,
                                        'y': 120,
                                        'size': 31,
                                        'd': 168,
                                        'color': c8.a[3],
                                        'weapon': 'mono',
                                        'body': 'sentry',
                                        'autoCannonRot': [163]
                                    },
                                    {
                                        'x': -1080,
                                        'y': 520,
                                        'size': 52,
                                        'd': -73,
                                        'color': c8.a[3],
                                        'weapon': 'horizon',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': 1000,
                                        'y': 1100,
                                        'size': 122,
                                        'd': -131,
                                        'color': '#f177dd',
                                        'weapon': 'synope',
                                        'body': 'void'
                                    }
                                ],
                                'polygons': [
                                    {
                                        'x': 0,
                                        'y': 0,
                                        'd': 98,
                                        'level': 7
                                    },
                                    {
                                        'x': -800,
                                        'y': -50,
                                        'd': 98,
                                        'level': 4
                                    },
                                    {
                                        'x': 480,
                                        'y': -750,
                                        'd': 130,
                                        'level': 5
                                    },
                                    {
                                        'x': 250,
                                        'y': -810,
                                        'd': 130,
                                        'level': 2
                                    },
                                    {
                                        'x': 20,
                                        'y': 1050,
                                        'd': 72,
                                        'level': 6
                                    },
                                    {
                                        'x': -420,
                                        'y': -920,
                                        'd': -111,
                                        'level': 6
                                    },
                                    {
                                        'x': 920,
                                        'y': 650,
                                        'd': -111,
                                        'level': 3
                                    },
                                    {
                                        'x': 970,
                                        'y': 520,
                                        'd': 23,
                                        'level': 2
                                    },
                                    {
                                        'x': -100,
                                        'y': -900,
                                        'd': 86,
                                        'level': 3
                                    },
                                    {
                                        'x': -300,
                                        'y': 900,
                                        'd': 86,
                                        'level': 2
                                    },
                                    {
                                        'x': -340,
                                        'y': 1000,
                                        'd': 98,
                                        'level': 1
                                    },
                                    {
                                        'x': -440,
                                        'y': 950,
                                        'd': 123,
                                        'level': 0
                                    },
                                    {
                                        'x': -540,
                                        'y': 1010,
                                        'd': 23,
                                        'level': 0
                                    },
                                    {
                                        'x': 850,
                                        'y': 20,
                                        'd': 111,
                                        'level': 2
                                    }
                                ],
                                'dimension': {
                                    'visual': {
                                        'gridSize': 30,
                                        'backgroundColor': '#CDCDCD',
                                        'gridColor': '#C8C8C8',
                                        'particles': [{
                                                'spawnrate': 0,
                                                'speed': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'd': {
                                                    'min': 0,
                                                    'max': 360
                                                },
                                                'size': {
                                                    'min': 6,
                                                    'max': 6
                                                },
                                                'lifetime': {
                                                    'min': 30,
                                                    'max': 60
                                                },
                                                'sides': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'transparency': {
                                                    'min': 1,
                                                    'max': 1
                                                },
                                                'color': {
                                                    'min': '#CDCDCD',
                                                    'max': '#C8C8C8'
                                                }
                                            }]
                                    },
                                    'bases': [],
                                    'walls': [],
                                    'gates': [],
                                    'mapSize': 1500,
                                    'trueMapSize': 1
                                }
                            },
                            0: {
                                'tanks': [
                                    {
                                        'x': -800,
                                        'y': -500,
                                        'size': 36,
                                        'd': 59,
                                        'color': c8.a[1],
                                        'weapon': 'split',
                                        'body': 'wall'
                                    },
                                    {
                                        'x': -1000,
                                        'y': -650,
                                        'size': 42,
                                        'd': 59,
                                        'color': c8.a[1],
                                        'weapon': 'beta',
                                        'body': 'thorn'
                                    },
                                    {
                                        'x': -600,
                                        'y': 150,
                                        'size': 50,
                                        'd': 110,
                                        'color': c8.a[1],
                                        'weapon': 'alpha',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': -150,
                                        'y': -600,
                                        'size': 50,
                                        'd': 19,
                                        'color': c8.a[1],
                                        'weapon': 'annihilator',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': 500,
                                        'y': 300,
                                        'size': 45,
                                        'd': 19,
                                        'color': c8.a[1],
                                        'weapon': 'emperor',
                                        'body': 'mothership'
                                    },
                                    {
                                        'x': 850,
                                        'y': 200,
                                        'size': 53,
                                        'd': -70,
                                        'color': c8.a[1],
                                        'weapon': 'wave',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': 50,
                                        'y': 600,
                                        'size': 40,
                                        'd': 171,
                                        'color': c8.a[1],
                                        'weapon': 'barricade',
                                        'body': 'flare'
                                    },
                                    {
                                        'x': 450,
                                        'y': -500,
                                        'size': 53,
                                        'd': -102,
                                        'color': c8.a[1],
                                        'weapon': 'disperse',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': -900,
                                        'y': 600,
                                        'size': 53,
                                        'd': 118,
                                        'color': c8.a[1],
                                        'weapon': 'marksman',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': 1000,
                                        'y': 500,
                                        'size': 53,
                                        'd': -108,
                                        'color': c8.a[1],
                                        'weapon': 'marksman',
                                        'body': 'bastion',
                                        'autoCannonRot': [-153]
                                    },
                                    {
                                        'x': 1200,
                                        'y': -600,
                                        'size': 53,
                                        'd': -121,
                                        'color': c8.a[1],
                                        'weapon': 'palisade',
                                        'body': 'bombard',
                                        'autoCannonRot': [-61]
                                    },
                                    {
                                        'x': 0,
                                        'y': 0,
                                        'size': 100,
                                        'd': 10,
                                        'color': '#f177dd',
                                        'weapon': 'pulsar',
                                        'body': 'chasm'
                                    },
                                    {
                                        'x': -700,
                                        'y': -900,
                                        'size': 122,
                                        'd': 10,
                                        'color': '#f177dd',
                                        'weapon': 'blazar',
                                        'body': 'pollux',
                                        'autoCannonRot': [58]
                                    },
                                    {
                                        'x': -100,
                                        'y': -1100,
                                        'size': 122,
                                        'd': 47,
                                        'color': '#f177dd',
                                        'weapon': 'synope',
                                        'body': 'void'
                                    },
                                    {
                                        'x': 600,
                                        'y': -950,
                                        'size': 122,
                                        'd': 150,
                                        'color': '#f177dd',
                                        'weapon': 'charon',
                                        'body': 'comet'
                                    },
                                    {
                                        'x': 700,
                                        'y': 950,
                                        'size': 122,
                                        'd': 150,
                                        'color': '#f177dd',
                                        'weapon': 'moon',
                                        'body': 'void'
                                    },
                                    {
                                        'x': -300,
                                        'y': 900,
                                        'size': 122,
                                        'd': -35,
                                        'color': '#f177dd',
                                        'weapon': 'quasar',
                                        'body': 'galaxy',
                                        'autoCannonRot': [
                                            136,
                                            136,
                                            136,
                                            136,
                                            136,
                                            136,
                                            -21
                                        ]
                                    }
                                ],
                                'polygons': [
                                    {
                                        'x': -1200,
                                        'y': 100,
                                        'level': 7,
                                        'd': 127
                                    },
                                    {
                                        'x': 700,
                                        'y': -200,
                                        'level': 6,
                                        'd': 32
                                    },
                                    {
                                        'x': -650,
                                        'y': -150,
                                        'level': 5,
                                        'd': 172
                                    },
                                    {
                                        'x': -250,
                                        'y': -50,
                                        'level': 1,
                                        'd': 172
                                    },
                                    {
                                        'x': -300,
                                        'y': 10,
                                        'level': 0,
                                        'd': -120
                                    },
                                    {
                                        'x': -330,
                                        'y': -70,
                                        'level': 1,
                                        'd': 114
                                    },
                                    {
                                        'x': 250,
                                        'y': -200,
                                        'level': 3,
                                        'd': 18
                                    },
                                    {
                                        'x': 150,
                                        'y': 800,
                                        'level': 2,
                                        'd': 114
                                    },
                                    {
                                        'x': -450,
                                        'y': -550,
                                        'level': 4,
                                        'd': -64
                                    },
                                    {
                                        'x': -680,
                                        'y': -420,
                                        'level': 2,
                                        'd': -64
                                    }
                                ],
                                'dimension': {
                                    'visual': {
                                        'gridSize': 30,
                                        'backgroundColor': '#CDCDCD',
                                        'gridColor': '#C8C8C8',
                                        'particles': [{
                                                'spawnrate': 0,
                                                'speed': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'd': {
                                                    'min': 0,
                                                    'max': 360
                                                },
                                                'size': {
                                                    'min': 6,
                                                    'max': 6
                                                },
                                                'lifetime': {
                                                    'min': 30,
                                                    'max': 60
                                                },
                                                'sides': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'transparency': {
                                                    'min': 1,
                                                    'max': 1
                                                },
                                                'color': {
                                                    'min': '#CDCDCD',
                                                    'max': '#C8C8C8'
                                                }
                                            }]
                                    },
                                    'bases': [],
                                    'walls': [],
                                    'gates': [],
                                    'mapSize': 1500,
                                    'trueMapSize': 1
                                }
                            },
                            '-1': {
                                'polygons': [],
                                'tanks': [
                                    {
                                        'x': 0,
                                        'y': 0,
                                        'size': 400,
                                        'd': 135,
                                        'color': '#f177dd',
                                        'weapon': 'ganymede',
                                        'body': 'andromeda'
                                    },
                                    {
                                        'x': 900,
                                        'y': 200,
                                        'size': 100,
                                        'd': 69,
                                        'color': '#f177dd',
                                        'weapon': 'debris',
                                        'body': 'chasm'
                                    },
                                    {
                                        'x': -700,
                                        'y': -600,
                                        'size': 120,
                                        'd': 35,
                                        'color': '#f177dd',
                                        'weapon': 'satellite',
                                        'body': 'galaxy'
                                    },
                                    {
                                        'x': -840,
                                        'y': 400,
                                        'size': 120,
                                        'd': -72,
                                        'color': '#f177dd',
                                        'weapon': 'synope',
                                        'body': 'void'
                                    }
                                ],
                                'dimension': {
                                    'visual': {
                                        'gridSize': 30,
                                        'backgroundColor': '#595959',
                                        'gridColor': '#4E4D4D',
                                        'particles': [{
                                                'spawnrate': 8.680555555555556e-8,
                                                'speed': {
                                                    'min': 2,
                                                    'max': 5
                                                },
                                                'd': {
                                                    'min': 0 + b5,
                                                    'max': 90 + b5
                                                },
                                                'size': {
                                                    'min': 4,
                                                    'max': 8
                                                },
                                                'lifetime': {
                                                    'min': 30,
                                                    'max': 60
                                                },
                                                'sides': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'transparency': {
                                                    'min': 1,
                                                    'max': 1
                                                },
                                                'color': {
                                                    'min': '#595959',
                                                    'max': '#4E4D4D'
                                                }
                                            }]
                                    },
                                    'bases': [{
                                            'width': 0.5,
                                            'height': 0.5,
                                            'x': 0,
                                            'y': 0,
                                            'team': 2
                                        }],
                                    'walls': [],
                                    'gates': [],
                                    'mapSize': 3000,
                                    'trueMapSize': 1
                                }
                            },
                            '-2': {
                                'tanks': [
                                    {
                                        'x': 60,
                                        'y': -60,
                                        'size': 54,
                                        'd': 135,
                                        'color': c8.a[0],
                                        'weapon': 'disperse',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': -60,
                                        'y': 60,
                                        'size': 54,
                                        'd': 315,
                                        'color': c8.a[0],
                                        'weapon': 'minigun',
                                        'body': 'quadruplet',
                                        'autoCannonRot': [87]
                                    },
                                    {
                                        'x': 400,
                                        'y': 100,
                                        'size': 40,
                                        'd': -110,
                                        'color': c8.a[1],
                                        'weapon': 'assassin',
                                        'body': 'artillery',
                                        'autoCannonRot': [170]
                                    },
                                    {
                                        'x': -600,
                                        'y': -100,
                                        'size': 62,
                                        'd': 74,
                                        'color': c8.a[2],
                                        'weapon': 'annihilator',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': -100,
                                        'y': -450,
                                        'size': 50,
                                        'd': 10,
                                        'color': '#c0c0c0',
                                        'weapon': 'spread',
                                        'body': 'artillery',
                                        'autoCannonRot': [170]
                                    },
                                    {
                                        'x': 600,
                                        'y': -600,
                                        'size': 62,
                                        'd': 28,
                                        'color': c8.a[3],
                                        'weapon': 'octo',
                                        'body': 'bastion',
                                        'autoCannonRot': [-45]
                                    },
                                    {
                                        'x': 900,
                                        'y': -730,
                                        'size': 60,
                                        'd': -69,
                                        'color': c8.a[1],
                                        'weapon': 'marksman',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': 800,
                                        'y': 400,
                                        'size': 150,
                                        'd': 69,
                                        'color': '#f177dd',
                                        'weapon': 'charon',
                                        'body': 'comet'
                                    },
                                    {
                                        'x': -700,
                                        'y': -600,
                                        'size': 120,
                                        'd': 35,
                                        'color': '#f177dd',
                                        'weapon': 'satellite',
                                        'body': 'galaxy'
                                    },
                                    {
                                        'x': -840,
                                        'y': 400,
                                        'size': 120,
                                        'd': -72,
                                        'color': '#f177dd',
                                        'weapon': 'synope',
                                        'body': 'void'
                                    }
                                ],
                                'polygons': [],
                                'dimension': {
                                    'visual': {
                                        'gridSize': 120,
                                        'showMinimap': false,
                                        'backgroundColor': '#303030',
                                        'gridColor': '#232323',
                                        'wallColor': '#00000054',
                                        'particles': [{
                                                'spawnrate': 7.8125e-8,
                                                'speed': {
                                                    'min': 8,
                                                    'max': 15
                                                },
                                                'd': {
                                                    'min': 0 + b5,
                                                    'max': 90 + b5
                                                },
                                                'size': {
                                                    'min': 40,
                                                    'max': 150
                                                },
                                                'lifetime': {
                                                    'min': 30,
                                                    'max': 60
                                                },
                                                'sides': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'transparency': {
                                                    'min': 0.5,
                                                    'max': 0.8
                                                },
                                                'color': {
                                                    'min': '#595959',
                                                    'max': '#4E4D4D'
                                                }
                                            }],
                                        'darkness': {
                                            'intensity': 1,
                                            'alpha': 0.9,
                                            'color': '#000000'
                                        },
                                        'lights': [
                                            {
                                                'x': 0,
                                                'y': 0,
                                                'size': 300,
                                                'd': 0,
                                                'sides': 0,
                                                'transparency': 1
                                            },
                                            {
                                                'x': 800,
                                                'y': -400,
                                                'size': 180,
                                                'd': 0,
                                                'sides': 0,
                                                'transparency': 0.5
                                            },
                                            {
                                                'x': -700,
                                                'y': 600,
                                                'size': 180,
                                                'd': 0,
                                                'sides': 0,
                                                'transparency': 0.5
                                            },
                                            {
                                                'x': -840,
                                                'y': -400,
                                                'size': 225,
                                                'd': 0,
                                                'sides': 0,
                                                'transparency': 0.5
                                            },
                                            {
                                                'x': 600,
                                                'y': 600,
                                                'size': 180,
                                                'd': 0,
                                                'sides': 0,
                                                'transparency': 0.5
                                            }
                                        ]
                                    },
                                    'bases': [],
                                    'walls': [],
                                    'gates': [],
                                    'mapSize': 3000,
                                    'trueMapSize': 1
                                }
                            },
                            '-4': {
                                'tanks': [
                                    {
                                        'x': -350,
                                        'y': 300,
                                        'size': 54,
                                        'd': 135,
                                        'color': c8.a[0],
                                        'weapon': 'disperse',
                                        'body': 'ziggurat'
                                    },
                                    {
                                        'x': -100,
                                        'y': 500,
                                        'size': 54,
                                        'd': 145,
                                        'color': c8.a[0],
                                        'weapon': 'minigun',
                                        'body': 'quadruplet',
                                        'autoCannonRot': [87]
                                    },
                                    {
                                        'x': -550,
                                        'y': 50,
                                        'size': 45,
                                        'd': 128,
                                        'color': c8.a[0],
                                        'weapon': 'engineer',
                                        'body': 'castle',
                                        'autoCannonRot': [-153]
                                    },
                                    {
                                        'x': -1100,
                                        'y': -50,
                                        'size': 60,
                                        'd': 100,
                                        'color': c8.a[1],
                                        'weapon': 'riot',
                                        'body': 'saw'
                                    },
                                    {
                                        'x': -100,
                                        'y': 1000,
                                        'size': 150,
                                        'd': 260,
                                        'color': '#f177dd',
                                        'weapon': 'moon',
                                        'body': 'hyperion',
                                        'autoCannonRot': [
                                            0,
                                            0,
                                            0,
                                            30
                                        ]
                                    },
                                    {
                                        'x': -900,
                                        'y': 900,
                                        'size': 150,
                                        'd': 80,
                                        'color': '#f177dd',
                                        'weapon': 'quasar',
                                        'body': 'void'
                                    },
                                    {
                                        'x': 500,
                                        'y': 800,
                                        'size': 57,
                                        'd': 19,
                                        'color': c8.a[2],
                                        'weapon': 'emperor',
                                        'body': 'mothership'
                                    },
                                    {
                                        'x': 100,
                                        'y': -700,
                                        'size': 114,
                                        'd': -25,
                                        'radiant': 1,
                                        'color': c8.c[0],
                                        'weapon': 'abyssling',
                                        'body': 'abyssling',
                                        'autoCannonRot': [-5]
                                    },
                                    {
                                        'x': -1000,
                                        'y': -850,
                                        'size': 114,
                                        'd': -5,
                                        'radiant': 1,
                                        'color': c8.c[0],
                                        'weapon': 'abyssling',
                                        'body': 'abyssling',
                                        'autoCannonRot': [20]
                                    },
                                    {
                                        'x': 1000,
                                        'y': 50,
                                        'size': 114,
                                        'd': -80,
                                        'radiant': 1,
                                        'color': c8.c[0],
                                        'weapon': 'abyssling',
                                        'body': 'abyssling',
                                        'autoCannonRot': [-75]
                                    },
                                    {
                                        'x': 1100,
                                        'y': 450,
                                        'size': 73,
                                        'd': -92,
                                        'radiant': 1,
                                        'color': c8.c[0],
                                        'weapon': 'peacekeeper1',
                                        'body': 'peacekeeper1',
                                        'autoCannonRot': [-100]
                                    },
                                    {
                                        'x': -400,
                                        'y': -720,
                                        'size': 73,
                                        'd': -5,
                                        'radiant': 1,
                                        'color': c8.c[0],
                                        'weapon': 'peacekeeper1',
                                        'body': 'peacekeeper1',
                                        'autoCannonRot': [5]
                                    },
                                    {
                                        'x': -550,
                                        'y': -1200,
                                        'size': 84,
                                        'd': -10,
                                        'radiant': 1,
                                        'color': c8.c[0],
                                        'weapon': 'peacekeeper2',
                                        'body': 'peacekeeper2',
                                        'autoCannonRot': [-15]
                                    },
                                    {
                                        'x': 1250,
                                        'y': 1000,
                                        'size': 84,
                                        'd': -102,
                                        'radiant': 1,
                                        'color': c8.c[0],
                                        'weapon': 'peacekeeper2',
                                        'body': 'peacekeeper2',
                                        'autoCannonRot': [-93]
                                    },
                                    {
                                        'x': 1450,
                                        'y': 100,
                                        'size': 98,
                                        'd': -75,
                                        'radiant': 1,
                                        'color': c8.c[0],
                                        'weapon': 'peacekeeper3',
                                        'body': 'peacekeeper3',
                                        'autoCannonRot': [-345]
                                    },
                                    {
                                        'x': 200,
                                        'y': -1350,
                                        'size': 98,
                                        'd': -15,
                                        'radiant': 1,
                                        'color': c8.c[0],
                                        'weapon': 'peacekeeper3',
                                        'body': 'peacekeeper3',
                                        'autoCannonRot': [-35]
                                    },
                                    {
                                        'x': 1000,
                                        'y': -800,
                                        'size': 436,
                                        'd': -50,
                                        'radiant': 1,
                                        'color': c8.c[0],
                                        'weapon': 'abyssguardian',
                                        'body': 'abyssguardian',
                                        'autoCannonRot': [
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            -45
                                        ]
                                    }
                                ],
                                'polygons': [
                                    {
                                        'x': -850,
                                        'y': 300,
                                        'd': 98,
                                        'level': 3,
                                        'radiant': 1
                                    },
                                    {
                                        'x': 1100,
                                        'y': 800,
                                        'd': 41,
                                        'level': 5,
                                        'radiant': 2
                                    },
                                    {
                                        'x': -1400,
                                        'y': -450,
                                        'd': 98,
                                        'level': 6,
                                        'radiant': 1
                                    },
                                    {
                                        'x': -300,
                                        'y': 700,
                                        'd': -41,
                                        'level': 4,
                                        'radiant': 1
                                    },
                                    {
                                        'x': -1200,
                                        'y': 500,
                                        'd': -41,
                                        'level': 5,
                                        'radiant': 0
                                    },
                                    {
                                        'x': -670,
                                        'y': -200,
                                        'd': -23,
                                        'level': 2,
                                        'radiant': 1
                                    },
                                    {
                                        'x': 370,
                                        'y': 100,
                                        'd': -23,
                                        'level': 1,
                                        'radiant': 0
                                    },
                                    {
                                        'x': 450,
                                        'y': 150,
                                        'd': -41,
                                        'level': 1,
                                        'radiant': 1
                                    }
                                ],
                                'dimension': {
                                    'visual': {
                                        'gridSize': 160,
                                        'backgroundColor': '#141414',
                                        'gridColor': '#212121',
                                        'wallColor': '#00000098',
                                        'particles': [{
                                                'spawnrate': 1.7361111111111112e-7,
                                                'speed': {
                                                    'min': 3,
                                                    'max': 5
                                                },
                                                'd': {
                                                    'min': 175,
                                                    'max': 265
                                                },
                                                'size': {
                                                    'min': 4,
                                                    'max': 8
                                                },
                                                'lifetime': {
                                                    'min': 30,
                                                    'max': 60
                                                },
                                                'sides': {
                                                    'min': 0,
                                                    'max': 0
                                                },
                                                'transparency': {
                                                    'min': 1,
                                                    'max': 1
                                                },
                                                'color': {
                                                    'min': '#ffffff',
                                                    'max': '#0c0c0c'
                                                },
                                                'radiant': true
                                            }],
                                        'lights': [{
                                                'x': 0,
                                                'y': 0,
                                                'size': 1000,
                                                'd': 0,
                                                'sides': 0,
                                                'transparency': 1
                                            }]
                                    },
                                    'bases': [],
                                    'walls': [],
                                    'gates': [],
                                    'mapSize': 3000,
                                    'trueMapSize': 1
                                }
                            }
                        }, b7 = 0, b8 = Object.values(b3); b7 < b8.length; b7++) {
                    var b9, bO = b0(b8[b7].barrels);
                    try {
                        for (bO.s(); !(b9 = bO.n()).done;) {
                            var bY = b9.value;
                            bY.rot = C9(bY.rot);
                        }
                    } catch (WT) {
                        bO.e(WT);
                    } finally {
                        bO.f();
                    }
                }
                for (var bM = 0, bS = Object.values(b4); bM < bS.length; bM++) {
                    var bK, bC = b0(bS[bM].gadgets);
                    try {
                        for (bC.s(); !(bK = bC.n()).done;) {
                            var bE = bK.value;
                            bE.rot && (bE.rot = C9(bE.rot));
                            bE.baseRot && (bE.baseRot = C9(bE.baseRot));
                        }
                    } catch (Wj) {
                        bC.e(Wj);
                    } finally {
                        bC.f();
                    }
                }
                for (var bH = 0, bZ = Object.values(b6); bH < bZ.length; bH++) {
                    var bV, bT = bZ[bH], bj = b0(bT.tanks);
                    try {
                        for (bj.s(); !(bV = bj.n()).done;) {
                            var bJ = bV.value, bR = b3[bJ.weapon], bL = b4[bJ.body];
                            bJ.barrels = C8(bR.barrels);
                            bJ.sides = bL.sides;
                            bJ.outerSides = bL.outerSides;
                            bJ.outerSize = bL.outerSize;
                            bJ.layers = C8(bL.layers);
                            bJ.gadgets = C8(bL.gadgets);
                            bJ.d = C9(bJ.d);
                            bJ.autoCannonRot || (bJ.autoCannonRot = []);
                            for (var bA = 0; bA < bJ.gadgets.length; bA++) {
                                var bI = bJ.gadgets[bA];
                                0 != bI.type && 3 != bI.type || null != bJ.autoCannonRot[bA] && (bI.rot = C9(bJ.autoCannonRot[bA]));
                            }
                        }
                    } catch (WJ) {
                        bj.e(WJ);
                    } finally {
                        bj.f();
                    }
                    var bP, bN = b0(bT.polygons);
                    try {
                        for (bN.s(); !(bP = bN.n()).done;) {
                            var bW = bP.value;
                            bW.d = C9(bW.d);
                        }
                    } catch (WR) {
                        bN.e(WR);
                    } finally {
                        bN.f();
                    }
                    bT.rifts || (bT.rifts = []);
                    var bD, bQ = b0(bT.rifts);
                    try {
                        for (bQ.s(); !(bD = bQ.n()).done;) {
                            var bX = bD.value;
                            bX.d = C9(bX.d);
                            bX.y = -bX.y;
                        }
                    } catch (WL) {
                        bQ.e(WL);
                    } finally {
                        bQ.f();
                    }
                }
                function bG(WA) {
                    ;
                    return bG = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (WI) {
                        return typeof WI;
                    } : function (WI) {
                        ;
                        return WI && 'function' == typeof Symbol && WI.constructor === Symbol && WI !== Symbol.prototype ? 'symbol' : typeof WI;
                    }, bG(WA);
                }
                function bz() {
                    ;
                    bz = function () {
                        return WA;
                    };
                    var WA = { wrap: WG }, WI = Object.prototype, WP = WI.hasOwnProperty, WN = Object.defineProperty || function (dS, dK, dC) {
                            ;
                            dS[dK] = dC.value;
                        }, WW = 'function' == typeof Symbol ? Symbol : {}, WD = WW.iterator || '@@iterator', WQ = WW.asyncIterator || '@@asyncIterator', Wk = WW.toStringTag || '@@toStringTag';
                    function WX(dS, dK, dC) {
                        return Object.defineProperty(dS, dK, {
                            'value': dC,
                            'enumerable': true,
                            'configurable': true,
                            'writable': true
                        }), dS[dK];
                    }
                    try {
                        WX({}, '');
                    } catch (dS) {
                        WX = function (dK, dC, dE) {
                            return dK[dC] = dE;
                        };
                    }
                    function WG(dK, dC, dE, dH) {
                        var dZ = dC && dC.prototype instanceof Wq ? dC : Wq, dV = Object.create(dZ.prototype), dT = new dO(dH || []);
                        return WN(dV, '_invoke', { 'value': d6(dK, dE, dT) }), dV;
                    }
                    function Wz(dK, dC, dE) {
                        ;
                        try {
                            return {
                                'type': 'normal',
                                'arg': dK.call(dC, dE)
                            };
                        } catch (dH) {
                            return {
                                'type': 'throw',
                                'arg': dH
                            };
                        }
                    }
                    ;
                    var WF = {
                        id: 'tank-editor-title',
                        innerHTML: WI
                    };
                    function Wq() {
                    }
                    function WU() {
                    }
                    function WB() {
                    }
                    var d0 = { affectBullets: 2 };
                    WX(d0, WD, function () {
                        return this;
                    });
                    var d1 = Object.getPrototypeOf, d2 = d1 && d1(d1(dY([])));
                    d2 && d2 !== WI && WP.call(d2, WD) && (d0 = d2);
                    var d3 = WB.prototype = Wq.prototype = Object.create(d0);
                    function d4(dK) {
                        ;
                        [
                            'next',
                            'throw',
                            'return'
                        ].forEach(function (dC) {
                            WX(dK, dC, function (dE) {
                                ;
                                return this['_invoke'](dC, dE);
                            });
                        });
                    }
                    function d5(dK, dC) {
                        ;
                        function dE(dZ, dV, dT, dj) {
                            var dJ = Wz(dK[dZ], dK, dV);
                            if ('throw' !== dJ.type) {
                                var dR = dJ.arg, dL = dR.value;
                                return dL && 'object' == bG(dL) && WP.call(dL, '__await') ? dC.resolve(dL['__await']).then(function (dA) {
                                    dE('next', dA, dT, dj);
                                }, function (dA) {
                                    dE('throw', dA, dT, dj);
                                }) : dC.resolve(dL).then(function (dA) {
                                    dR.value = dA;
                                    dT(dR);
                                }, function (dA) {
                                    ;
                                    return dE('throw', dA, dT, dj);
                                });
                            }
                            dj(dJ.arg);
                        }
                        var dH;
                        WN(this, '_invoke', {
                            'value': function (dZ, dV) {
                                ;
                                function dT() {
                                    return new dC(function (dj, dJ) {
                                        dE(dZ, dV, dj, dJ);
                                    });
                                }
                                return dH = dH ? dH.then(dT, dT) : dT();
                            }
                        });
                    }
                    function d6(dK, dC, dE) {
                        var dH = 'suspendedStart';
                        return function (dZ, dV) {
                            ;
                            if ('executing' === dH) {
                                throw new Error('Generator is already running');
                            }
                            if ('completed' === dH) {
                                if ('throw' === dZ) {
                                    throw dV;
                                }
                                return dM();
                            }
                            for (dE.method = dZ, dE.arg = dV;;) {
                                var dT = dE.delegate;
                                if (dT) {
                                    var dj = d7(dT, dE);
                                    if (dj) {
                                        if (dj === WF) {
                                            continue;
                                        }
                                        return dj;
                                    }
                                }
                                if ('next' === dE.method) {
                                    dE.sent = dE['_sent'] = dE.arg;
                                } else {
                                    if ('throw' === dE.method) {
                                        if ('suspendedStart' === dH) {
                                            throw dH = 'completed', dE.arg;
                                        }
                                        dE.dispatchException(dE.arg);
                                    } else {
                                        'return' === dE.method && dE.abrupt('return', dE.arg);
                                    }
                                }
                                dH = 'executing';
                                var dJ = Wz(dK, dC, dE);
                                if ('normal' === dJ.type) {
                                    if (dH = dE.done ? 'completed' : 'suspendedYield', dJ.arg === WF) {
                                        continue;
                                    }
                                    return {
                                        'value': dJ.arg,
                                        'done': dE.done
                                    };
                                }
                                if ('throw' === dJ.type) {
                                    dH = 'completed';
                                    dE.method = 'throw';
                                    dE.arg = dJ.arg;
                                }
                            }
                        };
                    }
                    function d7(dK, dC) {
                        var dE = dC.method, dH = dK.iterator[dE];
                        if (void 0 === dH) {
                            return dC.delegate = null, 'throw' === dE && dK.iterator.return && (dC.method = 'return', dC.arg = void 0, d7(dK, dC), 'throw' === dC.method) || 'return' !== dE && (dC.method = 'throw', dC.arg = new TypeError('The iterator does not provide a \'' + dE + '\' method')), WF;
                        }
                        var dZ = Wz(dH, dK.iterator, dC.arg);
                        if ('throw' === dZ.type) {
                            return dC.method = 'throw', dC.arg = dZ.arg, dC.delegate = null, WF;
                        }
                        var dV = dZ.arg;
                        return dV ? dV.done ? (dC[dK.resultName] = dV.value, dC.next = dK.nextLoc, 'return' !== dC.method && (dC.method = 'next', dC.arg = void 0), dC.delegate = null, WF) : dV : (dC.method = 'throw', dC.arg = new TypeError('iterator result is not an object'), dC.delegate = null, WF);
                    }
                    function d8(dK) {
                        var dC = { 'tryLoc': dK[0] };
                        1 in dK && (dC.catchLoc = dK[1]);
                        if (2 in dK) {
                            dC.finallyLoc = dK[2];
                            dC.afterLoc = dK[3];
                        }
                        this.tryEntries.push(dC);
                    }
                    function d9(dK) {
                        var dC = dK.completion || {};
                        dC.type = 'normal';
                        delete dC.arg;
                        dK.completion = dC;
                    }
                    function dO(dK) {
                        ;
                        this.tryEntries = [{ 'tryLoc': 'root' }];
                        dK.forEach(d8, this);
                        this.reset(true);
                    }
                    function dY(dK) {
                        ;
                        if (dK) {
                            var dC = dK[WD];
                            if (dC) {
                                return dC.call(dK);
                            }
                            if ('function' == typeof dK.next) {
                                return dK;
                            }
                            if (!isNaN(dK.length)) {
                                var dE = -1, dH = function dZ() {
                                        ;
                                        for (; ++dE < dK.length;) {
                                            if (WP.call(dK, dE)) {
                                                return dZ.value = dK[dE], dZ.done = false, dZ;
                                            }
                                        }
                                        return dZ.value = void 0, dZ.done = true, dZ;
                                    };
                                return dH.next = dH;
                            }
                        }
                        return { 'next': dM };
                    }
                    function dM() {
                        return {
                            'value': void 0,
                            'done': true
                        };
                    }
                    return WU.prototype = WB, WN(d3, 'constructor', {
                        'value': WB,
                        'configurable': true
                    }), WN(WB, 'constructor', {
                        'value': WU,
                        'configurable': true
                    }), WU.displayName = WX(WB, Wk, 'GeneratorFunction'), WA.isGeneratorFunction = function (dK) {
                        var dC = 'function' == typeof dK && dK.constructor;
                        return !!dC && (dC === WU || 'GeneratorFunction' === (dC.displayName || dC.name));
                    }, WA.mark = function (dK) {
                        ;
                        return Object.setPrototypeOf ? Object.setPrototypeOf(dK, WB) : (dK['__proto__'] = WB, WX(dK, Wk, 'GeneratorFunction')), dK.prototype = Object.create(d3), dK;
                    }, WA.awrap = function (dK) {
                        return { '__await': dK };
                    }, d4(d5.prototype), WX(d5.prototype, WQ, function () {
                        return this;
                    }), WA.AsyncIterator = d5, WA.async = function (dK, dC, dE, dH, dZ) {
                        ;
                        void 0 === dZ && (dZ = Promise);
                        var dV = new d5(WG(dK, dC, dE, dH), dZ);
                        return WA.isGeneratorFunction(dC) ? dV : dV.next().then(function (dT) {
                            ;
                            return dT.done ? dT.value : dV.next();
                        });
                    }, d4(d3), WX(d3, Wk, 'Generator'), WX(d3, WD, function () {
                        return this;
                    }), WX(d3, 'toString', function () {
                        ;
                        return '[object Generator]';
                    }), WA.keys = function (dK) {
                        var dC = Object(dK), dE = [];
                        for (var dH in dC)
                            dE.push(dH);
                        return dE.reverse(), function dZ() {
                            ;
                            for (; dE.length;) {
                                var dV = dE.pop();
                                if (dV in dC) {
                                    return dZ.value = dV, dZ.done = false, dZ;
                                }
                            }
                            return dZ.done = true, dZ;
                        };
                    }, WA.values = dY, dO.prototype = {
                        'constructor': dO,
                        'reset': function (dK) {
                            ;
                            if (this.prev = 0, this.next = 0, this.sent = this['_sent'] = void 0, this.done = false, this.delegate = null, this.method = 'next', this.arg = void 0, this.tryEntries.forEach(d9), !dK) {
                                for (var dC in this)
                                    't' === dC.charAt(0) && WP.call(this, dC) && !isNaN(+dC.slice(1)) && (this[dC] = void 0);
                            }
                        },
                        'stop': function () {
                            ;
                            this.done = true;
                            var dK = this.tryEntries[0].completion;
                            if ('throw' === dK.type) {
                                throw dK.arg;
                            }
                            return this.rval;
                        },
                        'dispatchException': function (dK) {
                            ;
                            if (this.done) {
                                throw dK;
                            }
                            var dC = this;
                            function dE(dJ, dR) {
                                ;
                                return dV.type = 'throw', dV.arg = dK, dC.next = dJ, dR && (dC.method = 'next', dC.arg = void 0), !!dR;
                            }
                            for (var dH = this.tryEntries.length - 1; dH >= 0; --dH) {
                                var dZ = this.tryEntries[dH], dV = dZ.completion;
                                if ('root' === dZ.tryLoc) {
                                    return dE('end');
                                }
                                if (dZ.tryLoc <= this.prev) {
                                    var dT = WP.call(dZ, 'catchLoc'), dj = WP.call(dZ, 'finallyLoc');
                                    if (dT && dj) {
                                        if (this.prev < dZ.catchLoc) {
                                            return dE(dZ.catchLoc, true);
                                        }
                                        if (this.prev < dZ.finallyLoc) {
                                            return dE(dZ.finallyLoc);
                                        }
                                    } else {
                                        if (dT) {
                                            if (this.prev < dZ.catchLoc) {
                                                return dE(dZ.catchLoc, true);
                                            }
                                        } else {
                                            if (!dj) {
                                                throw new Error('try statement without catch or finally');
                                            }
                                            if (this.prev < dZ.finallyLoc) {
                                                return dE(dZ.finallyLoc);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        'abrupt': function (dK, dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.tryLoc <= this.prev && WP.call(dH, 'finallyLoc') && this.prev < dH.finallyLoc) {
                                    var dZ = dH;
                                    break;
                                }
                            }
                            dZ && ('break' === dK || 'continue' === dK) && dZ.tryLoc <= dC && dC <= dZ.finallyLoc && (dZ = null);
                            var dV = dZ ? dZ.completion : {};
                            return dV.type = dK, dV.arg = dC, dZ ? (this.method = 'next', this.next = dZ.finallyLoc, WF) : this.complete(dV);
                        },
                        'complete': function (dK, dC) {
                            ;
                            if ('throw' === dK.type) {
                                throw dK.arg;
                            }
                            return 'break' === dK.type || 'continue' === dK.type ? this.next = dK.arg : 'return' === dK.type ? (this.rval = this.arg = dK.arg, this.method = 'return', this.next = 'end') : 'normal' === dK.type && dC && (this.next = dC), WF;
                        },
                        'finish': function (dK) {
                            ;
                            for (var dC = this.tryEntries.length - 1; dC >= 0; --dC) {
                                var dE = this.tryEntries[dC];
                                if (dE.finallyLoc === dK) {
                                    return this.complete(dE.completion, dE.afterLoc), d9(dE), WF;
                                }
                            }
                        },
                        'catch': function (dK) {
                            ;
                            for (var dC = this.tryEntries.length - 1; dC >= 0; --dC) {
                                var dE = this.tryEntries[dC];
                                if (dE.tryLoc === dK) {
                                    var dH = dE.completion;
                                    if ('throw' === dH.type) {
                                        var dZ = dH.arg;
                                        d9(dE);
                                    }
                                    return dZ;
                                }
                            }
                            throw new Error('illegal catch attempt');
                        },
                        'delegateYield': function (dK, dC, dE) {
                            ;
                            return this.delegate = {
                                'iterator': dY(dK),
                                'resultName': dC,
                                'nextLoc': dE
                            }, 'next' === this.method && (this.arg = void 0), WF;
                        }
                    }, WA;
                }
                function bF(WA, WI) {
                    var WP = 'undefined' != typeof Symbol && WA[Symbol.iterator] || WA['@@iterator'];
                    if (!WP) {
                        if (Array.isArray(WA) || (WP = bU(WA)) || WI && WA && 'number' == typeof WA.length) {
                            WP && (WA = WP);
                            var WN = 0, WW = function () {
                                };
                            return {
                                's': WW,
                                'n': function () {
                                    ;
                                    return WN >= WA.length ? { 'done': true } : {
                                        'done': false,
                                        'value': WA[WN++]
                                    };
                                },
                                'e': function (WX) {
                                    throw WX;
                                },
                                'f': WW
                            };
                        }
                        throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }
                    var WD, WQ = true, Wk = false;
                    return {
                        's': function () {
                            ;
                            WP = WP.call(WA);
                        },
                        'n': function () {
                            var WX = WP.next();
                            return WQ = WX.done, WX;
                        },
                        'e': function (WX) {
                            Wk = true;
                            WD = WX;
                        },
                        'f': function () {
                            ;
                            try {
                                WQ || null == WP.return || WP.return();
                            } finally {
                                if (Wk) {
                                    throw WD;
                                }
                            }
                        }
                    };
                }
                function bq(WA, WI) {
                    return function (WP) {
                        if (Array.isArray(WP)) {
                            return WP;
                        }
                    }(WA) || function (WP, WN) {
                        var WW = null == WP ? null : 'undefined' != typeof Symbol && WP[Symbol.iterator] || WP['@@iterator'];
                        if (null != WW) {
                            var WD, WQ, Wk, WX, WG = [], Wz = true, WF = false;
                            try {
                                if (Wk = (WW = WW.call(WP)).next, 0 === WN) {
                                    if (Object(WW) !== WW) {
                                        return;
                                    }
                                    Wz = false;
                                } else {
                                    for (; !(Wz = (WD = Wk.call(WW)).done) && (WG.push(WD.value), WG.length !== WN); Wz = true) {
                                        ;
                                    }
                                }
                            } catch (Wq) {
                                WF = true;
                                WQ = Wq;
                            } finally {
                                try {
                                    if (!Wz && null != WW.return && (WX = WW.return(), Object(WX) !== WX)) {
                                        return;
                                    }
                                } finally {
                                    if (WF) {
                                        throw WQ;
                                    }
                                }
                            }
                            return WG;
                        }
                    }(WA, WI) || bU(WA, WI) || (function () {
                        ;
                        throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }());
                }
                function bU(WA, WI) {
                    ;
                    if (WA) {
                        if ('string' == typeof WA) {
                            return bB(WA, WI);
                        }
                        var WP = Object.prototype.toString.call(WA).slice(8, -1);
                        return 'Object' === WP && WA.constructor && (WP = WA.constructor.name), 'Map' === WP || 'Set' === WP ? Array.from(WA) : 'Arguments' === WP || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(WP) ? bB(WA, WI) : void 0;
                    }
                }
                function bB(WA, WI) {
                    ;
                    (null == WI || WI > WA.length) && (WI = WA.length);
                    for (var WP = 0, WN = new Array(WI); WP < WI; WP++) {
                        ;
                    }
                    return WN;
                }
                function g0(WA, WI, WP, WN, WW, WD, WQ) {
                    ;
                    try {
                        var Wk = WA[WD](WQ), WX = Wk.value;
                    } catch (WG) {
                        return void WP(WG);
                    }
                    Wk.done ? WI(WX) : Promise.resolve(WX).then(WN, WW);
                }
                function g1(WA) {
                    return function () {
                        var WI = this, WP = arguments;
                        return new Promise(function (WN, WW) {
                            var WD = WA.apply(WI, WP);
                            function WQ(WX) {
                                ;
                                g0(WD, WN, WW, WQ, Wk, 'next', WX);
                            }
                            function Wk(WX) {
                                g0(WD, WN, WW, WQ, Wk, 'throw', WX);
                            }
                            WQ(void 0);
                        });
                    };
                }
                var g2 = document.getElementById('achievement-popup'), g3 = document.getElementById('button-achievements'), g4 = document.getElementById('exit-achievements'), g5 = document.getElementById('achievements-scroll');
                g3.onclick = g7;
                g4.onclick = g8;
                document.fonts.ready.then(function () {
                    gM();
                });
                var g6 = false;
                function g7() {
                    ;
                    g2.classList.remove('hide');
                    PM(true);
                    W2('achievements');
                    W5('achievements');
                    g6 = true;
                }
                function g8() {
                    ;
                    g2.classList.add('hide');
                    PM(false);
                    W3();
                    W4();
                    g6 = false;
                }
                var g9, gO, gY = false;
                function gM() {
                    return gS.apply(this, arguments);
                }
                function gS() {
                    ;
                    return gS = g1(bz().mark(function WA() {
                        var WI, WP, WN, WW, WD, WQ, Wk, WX, WG, Wz, WF;
                        return bz().wrap(function (Wq) {
                            ;
                            for (;;) {
                                switch (Wq.prev = Wq.next) {
                                case 0:
                                    if (WI = Math.random() + 1, gY = WI, WP = Object.entries(c8.i).map(function (WU) {
                                            var WB = bq(WU, 2), d0 = WB[0];
                                            return {
                                                'key': d0,
                                                'value': WB[1],
                                                'data': gO[d0]
                                            };
                                        }).sort(function (WU, WB) {
                                            ;
                                            return WU.value.rarity - WB.value.rarity || WU.value.stars - WB.value.stars;
                                        }), g9 = {}, CD(g5), !v8) {
                                        ;
                                        break;
                                    }
                                    return WN = performance.now(), Wq.next = 9, new Promise(function (WU) {
                                        return setTimeout(WU, 0);
                                    });
                                case 9:
                                    if (WI === gY) {
                                        ;
                                        break;
                                    }
                                    return Wq.abrupt('return');
                                case 11:
                                    WW = bF(WP), Wq.prev = 12, WW.s();
                                case 14:
                                    if ((WD = WW.n()).done) {
                                        ;
                                        break;
                                    }
                                    return WQ = WD.value, (Wk = HN(g5, 'canvas', 'achievement')).width = 600, Wk.height = 200, WX = L6(WQ.value.name, WQ.value.description, WQ.value.rarity, WQ.value.stars, WQ.data.completed, WQ.data.completed ? 'Completed '.concat(CQ(WQ.data.completionDate)) : WQ.value.max ? ''.concat(WQ.data.progress, '/').concat(WQ.value.max) : void 0), L5(Wk, WX, 2), g9[WQ.key] = Wk, Wq.next = 24, new Promise(function (WU) {
                                        return setTimeout(WU, 0);
                                    });
                                case 24:
                                    if (WI === gY) {
                                        ;
                                        break;
                                    }
                                    return Wq.abrupt('return');
                                case 26:
                                    ;
                                    break;
                                case 28:
                                    ;
                                    break;
                                case 30:
                                    Wq.prev = 30, Wq.t0 = Wq.catch(12), WW.e(Wq.t0);
                                case 33:
                                    return Wq.prev = 33, WW.f(), Wq.finish(33);
                                case 36:
                                    console.log('Rendered '.concat(WP.length, ' achievements in ').concat(CS((performance.now() - WN) / 1000, true))), Wq.next = 50;
                                    break;
                                case 39:
                                    WG = HN(g5, 'p'), (Wz = HN(WG, 'a')).href = '#log-in', Wz.innerText = 'Log In', Wz.onclick = function () {
                                        return g8(), vU(), false;
                                    }, HN(WG, 'span').innerText = ' or ', (WF = HN(WG, 'a')).href = '#sign-up', WF.innerText = 'Sign Up', WF.onclick = function () {
                                        return g8(), vB(), false;
                                    }, HN(WG, 'span').innerText = ' to earn achievements';
                                case 50:
                                    gY = false;
                                case 51:
                                case 'end':
                                    return Wq.stop();
                                }
                            }
                        }, WA, null, [[
                                12,
                                30,
                                33,
                                36
                            ]]);
                    })), gS.apply(this, arguments);
                }
                var gK = false;
                function gC(WA, WI) {
                    ;
                    return gE.apply(this, arguments);
                }
                function gE() {
                    ;
                    return gE = g1(bz().mark(function WA(WI, WP) {
                        var WN, WW, WD, WQ, Wk, WX, WG, Wz, WF;
                        return bz().wrap(function (Wq) {
                            ;
                            for (;;) {
                                switch (Wq.prev = Wq.next) {
                                case 0:
                                    return WN = Math.random() + 1, gK = WN, WW = gZ(WP), WD = Object.entries(c8.i).map(function (WU) {
                                        var WB = bq(WU, 2), d0 = WB[0];
                                        return {
                                            'key': d0,
                                            'value': WB[1],
                                            'data': WW[d0]
                                        };
                                    }).sort(function (WU, WB) {
                                        ;
                                        return Number(WB.data.completed) - Number(WU.data.completed) || (WU.data.completed ? WB.value.rarity - WU.value.rarity || WB.value.stars - WU.value.stars : (WB.value.max ? WB.data.progress / WB.value.max : 0) - (WU.value.max ? WU.data.progress / WU.value.max : 0) || WU.value.rarity - WB.value.rarity || WU.value.stars - WB.value.stars);
                                    }), CD(WI), WQ = performance.now(), Wq.next = 8, new Promise(function (WU) {
                                        return setTimeout(WU, 0);
                                    });
                                case 8:
                                    if (WN === gK) {
                                        ;
                                        break;
                                    }
                                    return Wq.abrupt('return');
                                case 10:
                                    Wk = bF(WD), Wq.prev = 11, Wk.s();
                                case 13:
                                    if ((WX = Wk.n()).done) {
                                        ;
                                        break;
                                    }
                                    return WG = WX.value, (Wz = HN(WI, 'canvas', 'achievement')).width = 600, Wz.height = 200, WF = L6(WG.value.name, WG.value.description, WG.value.rarity, WG.value.stars, WG.data.completed, WG.data.completed ? 'Completed '.concat(CQ(WG.data.completionDate)) : WG.value.max ? ''.concat(WG.data.progress, '/').concat(WG.value.max) : void 0), L5(Wz, WF, 2), WP[WG.key] = Wz, Wq.next = 23, new Promise(function (WU) {
                                        return setTimeout(WU, 0);
                                    });
                                case 23:
                                    if (WN === gK) {
                                        ;
                                        break;
                                    }
                                    return Wq.abrupt('return');
                                case 25:
                                    ;
                                    break;
                                case 27:
                                    ;
                                    break;
                                case 29:
                                    Wq.prev = 29, Wq.t0 = Wq.catch(11), Wk.e(Wq.t0);
                                case 32:
                                    return Wq.prev = 32, Wk.f(), Wq.finish(32);
                                case 35:
                                    console.log('Rendered '.concat(WD.length, ' achievements in ').concat(CS((performance.now() - WQ) / 1000, true))), gK = false;
                                case 37:
                                case 'end':
                                    return Wq.stop();
                                }
                            }
                        }, WA, null, [[
                                11,
                                29,
                                32,
                                35
                            ]]);
                    })), gE.apply(this, arguments);
                }
                function gH(WA) {
                    gO = gZ(WA);
                    gM();
                }
                function gZ(WA) {
                    ;
                    for (var WI = { WD: { 'completed': false } }, WP = 0, WN = Object.entries(c8.i); WP < WN.length; WP++) {
                        var WW = bq(WN[WP], 2), WD = WW[0], WQ = WW[1];
                        ;
                        WQ.max && (WI[WD].progress = 0);
                        WA[WD] && (WI[WD].completed = WA[WD].completed, WQ.max && (WI[WD].progress = WA[WD].progress || 0), WA[WD].completed && (WI[WD].completionDate = WA[WD].completionDate));
                    }
                    return WI;
                }
                function gV(WA) {
                    ;
                    L5(g9[WA], L6(c8.i[WA].name, c8.i[WA].description, c8.i[WA].rarity, c8.i[WA].stars, gO[WA].completed, c8.i[WA].max ? ''.concat(gO[WA].progress, '/').concat(c8.i[WA].max) : void 0), 2);
                }
                function gT(WA) {
                    ;
                    gO[WA].completed = true;
                    c8.i[WA].max && (gO[WA].progress = c8.i[WA].max);
                    gV(WA);
                }
                function gj() {
                    ;
                    gj = function () {
                        return WA;
                    };
                    var WA = { wrap: WG }, WI = Object.prototype, WP = WI.hasOwnProperty, WN = Object.defineProperty || function (dS, dK, dC) {
                            ;
                            dS[dK] = dC.value;
                        }, WW = 'function' == typeof Symbol ? Symbol : {}, WD = WW.iterator || '@@iterator', WQ = WW.asyncIterator || '@@asyncIterator', Wk = WW.toStringTag || '@@toStringTag';
                    function WX(dS, dK, dC) {
                        ;
                        return Object.defineProperty(dS, dK, {
                            'value': dC,
                            'enumerable': true,
                            'configurable': true,
                            'writable': true
                        }), dS[dK];
                    }
                    try {
                        WX({}, '');
                    } catch (dS) {
                        WX = function (dK, dC, dE) {
                            return dK[dC] = dE;
                        };
                    }
                    function WG(dK, dC, dE, dH) {
                        var dZ = dC && dC.prototype instanceof Wq ? dC : Wq, dV = Object.create(dZ.prototype), dT = new dO(dH || []);
                        return WN(dV, '_invoke', { 'value': d6(dK, dE, dT) }), dV;
                    }
                    function Wz(dK, dC, dE) {
                        ;
                        try {
                            return {
                                'type': 'normal',
                                'arg': dK.call(dC, dE)
                            };
                        } catch (dH) {
                            return {
                                'type': 'throw',
                                'arg': dH
                            };
                        }
                    }
                    ;
                    var WF = {};
                    function Wq() {
                    }
                    function WU() {
                    }
                    function WB() {
                    }
                    var d0 = {};
                    WX(d0, WD, function () {
                        return this;
                    });
                    var d1 = Object.getPrototypeOf, d2 = d1 && d1(d1(dY([])));
                    d2 && d2 !== WI && WP.call(d2, WD) && (d0 = d2);
                    var d3 = WB.prototype = Wq.prototype = Object.create(d0);
                    function d4(dK) {
                        ;
                        [
                            'next',
                            'throw',
                            'return'
                        ].forEach(function (dC) {
                            WX(dK, dC, function (dE) {
                                ;
                                return this['_invoke'](dC, dE);
                            });
                        });
                    }
                    function d5(dK, dC) {
                        function dE(dZ, dV, dT, dj) {
                            var dJ = Wz(dK[dZ], dK, dV);
                            if ('throw' !== dJ.type) {
                                var dR = dJ.arg, dL = dR.value;
                                return dL && 'object' == gJ(dL) && WP.call(dL, '__await') ? dC.resolve(dL['__await']).then(function (dA) {
                                    ;
                                    dE('next', dA, dT, dj);
                                }, function (dA) {
                                    ;
                                    dE('throw', dA, dT, dj);
                                }) : dC.resolve(dL).then(function (dA) {
                                    ;
                                    dR.value = dA;
                                    dT(dR);
                                }, function (dA) {
                                    return dE('throw', dA, dT, dj);
                                });
                            }
                            dj(dJ.arg);
                        }
                        var dH;
                        WN(this, '_invoke', {
                            'value': function (dZ, dV) {
                                ;
                                function dT() {
                                    return new dC(function (dj, dJ) {
                                        dE(dZ, dV, dj, dJ);
                                    });
                                }
                                return dH = dH ? dH.then(dT, dT) : dT();
                            }
                        });
                    }
                    function d6(dK, dC, dE) {
                        var dH = 'suspendedStart';
                        return function (dZ, dV) {
                            ;
                            if ('executing' === dH) {
                                throw new Error('Generator is already running');
                            }
                            if ('completed' === dH) {
                                if ('throw' === dZ) {
                                    throw dV;
                                }
                                return dM();
                            }
                            for (dE.method = dZ, dE.arg = dV;;) {
                                var dT = dE.delegate;
                                if (dT) {
                                    var dj = d7(dT, dE);
                                    if (dj) {
                                        if (dj === WF) {
                                            continue;
                                        }
                                        return dj;
                                    }
                                }
                                if ('next' === dE.method) {
                                    dE.sent = dE['_sent'] = dE.arg;
                                } else {
                                    if ('throw' === dE.method) {
                                        if ('suspendedStart' === dH) {
                                            throw dH = 'completed', dE.arg;
                                        }
                                        dE.dispatchException(dE.arg);
                                    } else {
                                        'return' === dE.method && dE.abrupt('return', dE.arg);
                                    }
                                }
                                dH = 'executing';
                                var dJ = Wz(dK, dC, dE);
                                if ('normal' === dJ.type) {
                                    if (dH = dE.done ? 'completed' : 'suspendedYield', dJ.arg === WF) {
                                        continue;
                                    }
                                    return {
                                        'value': dJ.arg,
                                        'done': dE.done
                                    };
                                }
                                if ('throw' === dJ.type) {
                                    dH = 'completed';
                                    dE.method = 'throw';
                                    dE.arg = dJ.arg;
                                }
                            }
                        };
                    }
                    function d7(dK, dC) {
                        var dE = dC.method, dH = dK.iterator[dE];
                        if (void 0 === dH) {
                            return dC.delegate = null, 'throw' === dE && dK.iterator.return && (dC.method = 'return', dC.arg = void 0, d7(dK, dC), 'throw' === dC.method) || 'return' !== dE && (dC.method = 'throw', dC.arg = new TypeError('The iterator does not provide a \'' + dE + '\' method')), WF;
                        }
                        var dZ = Wz(dH, dK.iterator, dC.arg);
                        if ('throw' === dZ.type) {
                            return dC.method = 'throw', dC.arg = dZ.arg, dC.delegate = null, WF;
                        }
                        var dV = dZ.arg;
                        return dV ? dV.done ? (dC[dK.resultName] = dV.value, dC.next = dK.nextLoc, 'return' !== dC.method && (dC.method = 'next', dC.arg = void 0), dC.delegate = null, WF) : dV : (dC.method = 'throw', dC.arg = new TypeError('iterator result is not an object'), dC.delegate = null, WF);
                    }
                    function d8(dK) {
                        var dC = { 'tryLoc': dK[0] };
                        1 in dK && (dC.catchLoc = dK[1]);
                        if (2 in dK) {
                            dC.finallyLoc = dK[2];
                            dC.afterLoc = dK[3];
                        }
                        this.tryEntries.push(dC);
                    }
                    function d9(dK) {
                        var dC = dK.completion || {};
                        dC.type = 'normal';
                        delete dC.arg;
                        dK.completion = dC;
                    }
                    function dO(dK) {
                        ;
                        this.tryEntries = [{ 'tryLoc': 'root' }];
                        dK.forEach(d8, this);
                        this.reset(true);
                    }
                    function dY(dK) {
                        ;
                        if (dK) {
                            var dC = dK[WD];
                            if (dC) {
                                return dC.call(dK);
                            }
                            if ('function' == typeof dK.next) {
                                return dK;
                            }
                            if (!isNaN(dK.length)) {
                                var dE = -1, dH = function dZ() {
                                        ;
                                        for (; ++dE < dK.length;) {
                                            if (WP.call(dK, dE)) {
                                                return dZ.value = dK[dE], dZ.done = false, dZ;
                                            }
                                        }
                                        return dZ.value = void 0, dZ.done = true, dZ;
                                    };
                                return dH.next = dH;
                            }
                        }
                        return { 'next': dM };
                    }
                    function dM() {
                        return {
                            'value': void 0,
                            'done': true
                        };
                    }
                    return WU.prototype = WB, WN(d3, 'constructor', {
                        'value': WB,
                        'configurable': true
                    }), WN(WB, 'constructor', {
                        'value': WU,
                        'configurable': true
                    }), WU.displayName = WX(WB, Wk, 'GeneratorFunction'), WA.isGeneratorFunction = function (dK) {
                        var dC = 'function' == typeof dK && dK.constructor;
                        return !!dC && (dC === WU || 'GeneratorFunction' === (dC.displayName || dC.name));
                    }, WA.mark = function (dK) {
                        ;
                        return Object.setPrototypeOf ? Object.setPrototypeOf(dK, WB) : (dK['__proto__'] = WB, WX(dK, Wk, 'GeneratorFunction')), dK.prototype = Object.create(d3), dK;
                    }, WA.awrap = function (dK) {
                        return { '__await': dK };
                    }, d4(d5.prototype), WX(d5.prototype, WQ, function () {
                        return this;
                    }), WA.AsyncIterator = d5, WA.async = function (dK, dC, dE, dH, dZ) {
                        ;
                        void 0 === dZ && (dZ = Promise);
                        var dV = new d5(WG(dK, dC, dE, dH), dZ);
                        return WA.isGeneratorFunction(dC) ? dV : dV.next().then(function (dT) {
                            ;
                            return dT.done ? dT.value : dV.next();
                        });
                    }, d4(d3), WX(d3, Wk, 'Generator'), WX(d3, WD, function () {
                        return this;
                    }), WX(d3, 'toString', function () {
                        ;
                        return '[object Generator]';
                    }), WA.keys = function (dK) {
                        var dC = Object(dK), dE = [];
                        for (var dH in dC)
                            dE.push(dH);
                        return dE.reverse(), function dZ() {
                            ;
                            for (; dE.length;) {
                                var dV = dE.pop();
                                if (dV in dC) {
                                    return dZ.value = dV, dZ.done = false, dZ;
                                }
                            }
                            return dZ.done = true, dZ;
                        };
                    }, WA.values = dY, dO.prototype = {
                        'constructor': dO,
                        'reset': function (dK) {
                            ;
                            if (this.prev = 0, this.next = 0, this.sent = this['_sent'] = void 0, this.done = false, this.delegate = null, this.method = 'next', this.arg = void 0, this.tryEntries.forEach(d9), !dK) {
                                for (var dC in this)
                                    't' === dC.charAt(0) && WP.call(this, dC) && !isNaN(+dC.slice(1)) && (this[dC] = void 0);
                            }
                        },
                        'stop': function () {
                            ;
                            this.done = true;
                            var dK = this.tryEntries[0].completion;
                            if ('throw' === dK.type) {
                                throw dK.arg;
                            }
                            return this.rval;
                        },
                        'dispatchException': function (dK) {
                            ;
                            if (this.done) {
                                throw dK;
                            }
                            var dC = this;
                            function dE(dJ, dR) {
                                ;
                                return dV.type = 'throw', dV.arg = dK, dC.next = dJ, dR && (dC.method = 'next', dC.arg = void 0), !!dR;
                            }
                            for (var dH = this.tryEntries.length - 1; dH >= 0; --dH) {
                                var dZ = this.tryEntries[dH], dV = dZ.completion;
                                if ('root' === dZ.tryLoc) {
                                    return dE('end');
                                }
                                if (dZ.tryLoc <= this.prev) {
                                    var dT = WP.call(dZ, 'catchLoc'), dj = WP.call(dZ, 'finallyLoc');
                                    if (dT && dj) {
                                        if (this.prev < dZ.catchLoc) {
                                            return dE(dZ.catchLoc, true);
                                        }
                                        if (this.prev < dZ.finallyLoc) {
                                            return dE(dZ.finallyLoc);
                                        }
                                    } else {
                                        if (dT) {
                                            if (this.prev < dZ.catchLoc) {
                                                return dE(dZ.catchLoc, true);
                                            }
                                        } else {
                                            if (!dj) {
                                                throw new Error('try statement without catch or finally');
                                            }
                                            if (this.prev < dZ.finallyLoc) {
                                                return dE(dZ.finallyLoc);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        'abrupt': function (dK, dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.tryLoc <= this.prev && WP.call(dH, 'finallyLoc') && this.prev < dH.finallyLoc) {
                                    var dZ = dH;
                                    break;
                                }
                            }
                            dZ && ('break' === dK || 'continue' === dK) && dZ.tryLoc <= dC && dC <= dZ.finallyLoc && (dZ = null);
                            var dV = dZ ? dZ.completion : {};
                            return dV.type = dK, dV.arg = dC, dZ ? (this.method = 'next', this.next = dZ.finallyLoc, WF) : this.complete(dV);
                        },
                        'complete': function (dK, dC) {
                            ;
                            if ('throw' === dK.type) {
                                throw dK.arg;
                            }
                            return 'break' === dK.type || 'continue' === dK.type ? this.next = dK.arg : 'return' === dK.type ? (this.rval = this.arg = dK.arg, this.method = 'return', this.next = 'end') : 'normal' === dK.type && dC && (this.next = dC), WF;
                        },
                        'finish': function (dK) {
                            ;
                            for (var dC = this.tryEntries.length - 1; dC >= 0; --dC) {
                                var dE = this.tryEntries[dC];
                                if (dE.finallyLoc === dK) {
                                    return this.complete(dE.completion, dE.afterLoc), d9(dE), WF;
                                }
                            }
                        },
                        'catch': function (dK) {
                            ;
                            for (var dC = this.tryEntries.length - 1; dC >= 0; --dC) {
                                var dE = this.tryEntries[dC];
                                if (dE.tryLoc === dK) {
                                    var dH = dE.completion;
                                    if ('throw' === dH.type) {
                                        var dZ = dH.arg;
                                        d9(dE);
                                    }
                                    return dZ;
                                }
                            }
                            throw new Error('illegal catch attempt');
                        },
                        'delegateYield': function (dK, dC, dE) {
                            ;
                            return this.delegate = {
                                'iterator': dY(dK),
                                'resultName': dC,
                                'nextLoc': dE
                            }, 'next' === this.method && (this.arg = void 0), WF;
                        }
                    }, WA;
                }
                function gJ(WA) {
                    ;
                    return gJ = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (WI) {
                        return typeof WI;
                    } : function (WI) {
                        ;
                        return WI && 'function' == typeof Symbol && WI.constructor === Symbol && WI !== Symbol.prototype ? 'symbol' : typeof WI;
                    }, gJ(WA);
                }
                function gR(WA, WI) {
                    var WP = 'undefined' != typeof Symbol && WA[Symbol.iterator] || WA['@@iterator'];
                    if (!WP) {
                        if (Array.isArray(WA) || (WP = gA(WA)) || WI && WA && 'number' == typeof WA.length) {
                            WP && (WA = WP);
                            var WN = 0, WW = function () {
                                };
                            return {
                                's': WW,
                                'n': function () {
                                    return WN >= WA.length ? { 'done': true } : {
                                        'done': false,
                                        'value': WA[WN++]
                                    };
                                },
                                'e': function (WX) {
                                    throw WX;
                                },
                                'f': WW
                            };
                        }
                        throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }
                    var WD, WQ = true, Wk = false;
                    return {
                        's': function () {
                            ;
                            WP = WP.call(WA);
                        },
                        'n': function () {
                            var WX = WP.next();
                            return WQ = WX.done, WX;
                        },
                        'e': function (WX) {
                            Wk = true;
                            WD = WX;
                        },
                        'f': function () {
                            ;
                            try {
                                WQ || null == WP.return || WP.return();
                            } finally {
                                if (Wk) {
                                    throw WD;
                                }
                            }
                        }
                    };
                }
                function gL(WA, WI) {
                    return function (WP) {
                        ;
                        if (Array.isArray(WP)) {
                            return WP;
                        }
                    }(WA) || function (WP, WN) {
                        var WW = null == WP ? null : 'undefined' != typeof Symbol && WP[Symbol.iterator] || WP['@@iterator'];
                        if (null != WW) {
                            var WD, WQ, Wk, WX, WG = [], Wz = true, WF = false;
                            try {
                                if (Wk = (WW = WW.call(WP)).next, 0 === WN) {
                                    if (Object(WW) !== WW) {
                                        return;
                                    }
                                    Wz = false;
                                } else {
                                    for (; !(Wz = (WD = Wk.call(WW)).done) && (WG.push(WD.value), WG.length !== WN); Wz = true) {
                                        ;
                                    }
                                }
                            } catch (Wq) {
                                WF = true;
                                WQ = Wq;
                            } finally {
                                try {
                                    if (!Wz && null != WW.return && (WX = WW.return(), Object(WX) !== WX)) {
                                        return;
                                    }
                                } finally {
                                    if (WF) {
                                        throw WQ;
                                    }
                                }
                            }
                            return WG;
                        }
                    }(WA, WI) || gA(WA, WI) || (function () {
                        ;
                        throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }());
                }
                function gA(WA, WI) {
                    ;
                    if (WA) {
                        if ('string' == typeof WA) {
                            return gI(WA, WI);
                        }
                        var WP = Object.prototype.toString.call(WA).slice(8, -1);
                        return 'Object' === WP && WA.constructor && (WP = WA.constructor.name), 'Map' === WP || 'Set' === WP ? Array.from(WA) : 'Arguments' === WP || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(WP) ? gI(WA, WI) : void 0;
                    }
                }
                function gI(WA, WI) {
                    ;
                    (null == WI || WI > WA.length) && (WI = WA.length);
                    for (var WP = 0, WN = new Array(WI); WP < WI; WP++) {
                        ;
                    }
                    return WN;
                }
                function gP(WA, WI, WP, WN, WW, WD, WQ) {
                    ;
                    try {
                        var Wk = WA[WD](WQ), WX = Wk.value;
                    } catch (WG) {
                        return void WP(WG);
                    }
                    Wk.done ? WI(WX) : Promise.resolve(WX).then(WN, WW);
                }
                function gN(WA) {
                    return function () {
                        var WI = this, WP = arguments;
                        return new Promise(function (WN, WW) {
                            var WD = WA.apply(WI, WP);
                            function WQ(WX) {
                                ;
                                gP(WD, WN, WW, WQ, Wk, 'next', WX);
                            }
                            function Wk(WX) {
                                ;
                                gP(WD, WN, WW, WQ, Wk, 'throw', WX);
                            }
                            WQ(void 0);
                        });
                    };
                }
                var gW = document.getElementById('profile-screen'), gD = document.getElementById('profile-screen-achievements'), gQ = document.getElementById('profile-screen-achievements-collapse'), gX = document.getElementById('profile-screen-profile-name'), gG = document.getElementById('profile-screen-description'), gz = document.getElementById('profile-screen-profile-star-counter').children[1], gF = document.getElementById('profile-screen-profile-icon'), gq = document.getElementById('stat-joined'), gU = document.getElementById('stat-last-online'), gB = document.getElementById('stat-achievements'), m0 = document.getElementById('stat-high-score'), m1 = document.getElementById('edit-profile-popup'), m2 = document.getElementById('edit-profile-apply-button'), m3 = document.getElementById('edit-profile-cancel-button'), m4 = document.getElementById('edit-profile-loading'), m5 = document.getElementById('edit-profile-description'), m6 = document.getElementById('edit-profile-error'), m7 = document.getElementById('edit-profile-change-username'), m8 = document.getElementById('edit-profile-change-password'), m9 = document.getElementById('edit-profile-change-icon'), mO = document.getElementById('edit-profile-value-popup'), mY = document.getElementById('edit-profile-value'), mM = document.getElementById('edit-profile-value-password'), mS = document.getElementById('edit-profile-value-show-password'), mK = document.getElementById('edit-profile-value-apply-button'), mC = document.getElementById('edit-profile-value-cancel-button'), mE = document.getElementById('edit-profile-value-loading'), mH = document.getElementById('edit-profile-value-error'), mZ = document.getElementById('edit-icon-attributes-scroll'), mV = document.getElementById('edit-icon-preview'), mT = document.getElementById('edit-icon-popup'), mj = document.getElementById('edit-icon-apply-button'), mJ = document.getElementById('edit-icon-cancel-button'), mR = document.getElementById('edit-icon-loading'), mL = document.getElementById('edit-icon-error'), mA = document.getElementById('profile-screen-search-input'), mI = document.getElementById('profile-screen-search-button'), mP = document.getElementById('profile-screen-search-content'), mN = false;
                mj.onclick = function () {
                    !(function () {
                        ;
                        ZQ.apply(this, arguments);
                    }());
                };
                mJ.onclick = function () {
                    mN || ZW();
                };
                m2.onclick = function () {
                    !(function () {
                        ;
                        Z4.apply(this, arguments);
                    }());
                };
                m3.onclick = function () {
                    ;
                    mN || (Z3(), gX.innerHTML = Z6(mz), gG.innerHTML = Z6(mF));
                };
                m7.onclick = function () {
                    Z9(0);
                };
                m8.onclick = function () {
                    Z9(1);
                };
                m9.onclick = function () {
                    Z3();
                    ZD();
                };
                mK.onclick = function () {
                    !(function () {
                        ZY.apply(this, arguments);
                    }());
                };
                mC.onclick = function () {
                    Z7 || ZM();
                };
                mY.oninput = function () {
                    ZO();
                };
                mM.oninput = function () {
                    ZO();
                };
                m5.oninput = function () {
                    ;
                    gG.innerHTML = Z6(m5.value.trim());
                    Z5();
                };
                document.getElementById('profile-screen-back-button').onclick = function () {
                    Z0();
                };
                var mW = document.getElementById('profile-screen-edit-button');
                mW.onclick = function () {
                    ;
                    v8 && v8.id == mX && (m1.classList.remove('hide'), m5.value = mF, m5.classList.remove('error'), m6.textContent = '');
                };
                var mD = document.getElementById('profile-screen-logout-button');
                mD.onclick = function () {
                    v8 && v8.id == mX && (Z0(), e4());
                };
                gQ.onclick = function () {
                    Z2();
                };
                var mQ, mX = 0, mG = 0, mz = '', mF = '', mq = 0;
                function mU(WA) {
                    ;
                    null != WA && (mX = WA);
                    console.log('Loading profile '.concat(mX));
                    N7(3);
                    PB.classList.add('hidden');
                    Pz.classList.add('hidden');
                    gF.classList.remove('clickable');
                    gF.onclick = function () {
                    };
                    JE(gF, ZX);
                    mA.value = '';
                    mA.blur();
                    gW.classList.remove('hidden');
                    mW.classList.add('hidden');
                    mD.classList.add('hidden');
                    Z3();
                    CD(gD);
                    gX.innerText = '-';
                    gG.innerText = '';
                    gz.innerText = '-';
                    gq.children[1].children[0].innerText = '-';
                    gq.children[0].innerText = '-';
                    gU.children[1].children[0].innerText = '-';
                    gU.children[0].innerText = '-';
                    gB.children[1].children[0].innerText = '-';
                    gB.children[0].innerText = '-';
                    m0.children[1].children[0].innerText = '-';
                    m0.children[0].innerText = '-';
                    Z2(false);
                    (function (WI) {
                        ;
                        mB.apply(this, arguments);
                    }(mX));
                    W2('profile');
                    W5('profile/' + mX);
                }
                function mB() {
                    ;
                    return mB = gN(gj().mark(function WA(WI) {
                        var WP;
                        return gj().wrap(function (WN) {
                            ;
                            for (;;) {
                                switch (WN.prev = WN.next) {
                                case 0:
                                    return mG++, WP = mG, WN.next = 4, eO('/getuser', { 'id': WI }, function (WW) {
                                        ;
                                        WP === mG && (gX.innerText = 'Invalid User');
                                    }, function (WW) {
                                        ;
                                        if (WP === mG) {
                                            if (WW.error) {
                                                gX.innerText = WW.error;
                                            } else {
                                                for (var WD = JSON.parse(CW(WW.achievements)), WQ = 0, Wk = 0, WX = Object.entries(WD); Wk < WX.length; Wk++) {
                                                    var WG = gL(WX[Wk], 2);
                                                    WG[0];
                                                    WG[1].completed && WQ++;
                                                }
                                                W2(WW.username);
                                                v8 && v8.id == mX && (mW.classList.remove('hidden'), mD.classList.remove('hidden'), gF.classList.add('clickable'), gF.onclick = function () {
                                                    ZD();
                                                });
                                                mQ = JSON.parse(CW(WW.profilePicture));
                                                JE(gF, mQ);
                                                gX.innerHTML = Z6(WW.username);
                                                mz = WW.username;
                                                gG.innerHTML = Z6(WW.description);
                                                mF = WW.description;
                                                gz.innerText = CP(WW.stars);
                                                mq = WW.stars;
                                                gq.children[0].innerText = CX(Date.now() - WW.joinDate);
                                                gq.children[1].children[0].innerText = CQ(WW.joinDate, true);
                                                gU.children[0].innerText = CX(Date.now() - WW.lastOnline);
                                                gU.children[1].children[0].innerText = CQ(WW.lastOnline, true);
                                                gB.children[0].innerText = WQ + '/' + Object.keys(c8.i).length;
                                                gB.children[1].children[0].innerText = ''.concat(CK(WQ / Object.keys(c8.i).length * 100), '%');
                                                m0.children[0].innerText = WS(WW.highScore);
                                                m0.children[1].children[0].innerText = CP(CK(WW.highScore));
                                                gC(gD, WD);
                                            }
                                        }
                                    });
                                case 4:
                                case 'end':
                                    return WN.stop();
                                }
                            }
                        }, WA);
                    })), mB.apply(this, arguments);
                }
                function Z0() {
                    ;
                    N7(2);
                    PB.classList.remove('hidden');
                    Pz.classList.remove('hidden');
                    gW.classList.add('hidden');
                    Z3();
                    ZW();
                    W3();
                    W4();
                }
                var Z1 = false;
                function Z2(WA) {
                    ;
                    (Z1 = null == WA ? !Z1 : WA) ? (gD.classList.add('collapsed'), gQ.children[0].innerText = '+') : (gD.classList.remove('collapsed'), gQ.children[0].innerText = '-');
                }
                function Z3() {
                    ;
                    ZM();
                    m1.classList.add('hide');
                    m4.classList.add('hide');
                    mN = false;
                }
                function Z4() {
                    ;
                    return Z4 = gN(gj().mark(function WA() {
                        ;
                        return gj().wrap(function (WI) {
                            ;
                            for (;;) {
                                switch (WI.prev = WI.next) {
                                case 0:
                                    if (!mN && Z5()) {
                                        WI.next = 2;
                                        break;
                                    }
                                    return WI.abrupt('return');
                                case 2:
                                    return m6.textContent = '', mN = true, m4.classList.remove('hide'), WI.next = 7, eO('/editprofile', {
                                        'sessionID': eE,
                                        'description': m5.value.trim()
                                    }, function (WP) {
                                        ;
                                        m6.textContent = WP;
                                        mN = false;
                                        m4.classList.add('hide');
                                    }, function (WP) {
                                        ;
                                        mN = false;
                                        m4.classList.add('hide');
                                        WP.error ? m6.textContent = WP.error : (mF = m5.value.trim(), gG.innerHTML = Z6(mF), Z3());
                                    });
                                case 7:
                                case 'end':
                                    return WI.stop();
                                }
                            }
                        }, WA);
                    })), Z4.apply(this, arguments);
                }
                function Z5() {
                    ;
                    m5.classList.remove('error');
                    m6.textContent = '';
                    var WA = [];
                    return m5.value.trim().split(/\r\n|\r|\n/).length > 15 && (WA.push('Description must not have more than 15 newlines.'), m5.classList.add('error')), m5.value.length > 600 && (WA.push('Description must not contain more than 600 characters.'), m5.classList.add('error')), m6.innerHTML = WA.join('<br />'), 0 == WA.length;
                }
                function Z6(WA) {
                    ;
                    WA = W1(WA);
                    var WI = Math.random(), WP = (WA = WA.replace(/&amp;(#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})|[0-9]*)\$/g, ''.concat(WI, '$1').concat(WI))).split(WI), WN = 0;
                    WA = '';
                    for (var WW = 0; WW < WP.length; WW++) {
                        var WD = WP[WW];
                        if (WW % 2 == 0) {
                            WA += WD;
                        } else {
                            for (; WN > 0;) {
                                WA += '</span>';
                                WN--;
                            }
                            var WQ = '#ffffff';
                            if ('' == WD) {
                                continue;
                            }
                            WQ = isNaN(+WD) ? WD : jN(0, +WD);
                            WA += '<span style="color: '.concat(WQ, '">');
                            WN++;
                        }
                    }
                    for (var Wk = 0; Wk < WN; Wk++) {
                        WA += '</span>';
                    }
                    return WA = WA.replace(/(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim, '<a target="_blank" href="$1">$1</a>');
                }
                var Z7 = false, Z8 = 0;
                function Z9() {
                    var WA = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                    switch (m1.classList.add('hide'), Z8 = WA, mO.classList.remove('hide'), mY.value = '', mM.value = '', mE.classList.add('hide'), Z7 = false, mS.checked = false, mH.textContent = '', mY.classList.remove('error'), mM.classList.remove('error'), WA) {
                    case 0:
                        mO.children[0].children[0].textContent = 'Change Username', mY.previousElementSibling.textContent = 'New Username', mY.placeholder = 'Username', mY.type = 'text', mM.previousElementSibling.textContent = 'Current Password', mM.placeholder = 'Password', mM.type = 'password', mS.onchange = function () {
                            ;
                            mS.checked ? mM.type = 'text' : mM.type = 'password';
                        };
                        break;
                    case 1:
                        mO.children[0].children[0].textContent = 'Change Password', mY.previousElementSibling.textContent = 'New Password', mY.placeholder = 'Password', mY.type = 'password', mM.previousElementSibling.textContent = 'Current Password', mM.placeholder = 'Password', mM.type = 'password', mS.onchange = function () {
                            ;
                            mS.checked ? (mY.type = 'text', mM.type = 'text') : (mY.type = 'password', mM.type = 'password');
                        };
                    }
                }
                function ZO() {
                    ;
                    mY.classList.remove('error');
                    mM.classList.remove('error');
                    mH.textContent = '';
                    mY.value = mY.value.trim();
                    mM.value = mM.value.trim();
                    var WA = mY.value, WI = mM.value, WP = [];
                    switch (Z8) {
                    case 0:
                        WA.length < 1 ? (WP.push('Provide a username.'), mY.classList.add('error')) : WA.length < 3 ? (WP.push('Username must be at least 3 characters long.'), mY.classList.add('error')) : /^[0-9a-zA-Z_-]+$/.test(WA) || (WP.push('Username must only contain letters, numbers, underscores, and dashes.'), mY.classList.add('error')), WA.length > 20 && (WP.push('Username must not be longer than 20 characters.'), mY.classList.add('error')), mz == WA && (WP.push('New username can\'t be the same as old username.'), mY.classList.add('error')), WI.length < 1 && (WP.push('Incorrect password.'), mM.classList.add('error'));
                        break;
                    case 1:
                        WA.length < 1 ? (WP.push('Provide a password.'), mY.classList.add('error')) : /^[0-9a-zA-Z_\-!@#$%^&*+=?;:\(\)\[\]`]+$/.test(WA) || (WP.push('Password must only contain letters, numbers, and symbols.'), mY.classList.add('error')), WA.length > 256 && (WP.push('Password must not be longer than 256 characters.'), mY.classList.add('error')), WI.length < 1 && (WP.push('Incorrect password.'), mM.classList.add('error')), WA == WI && (WP.push('New password can not be the same as current password.'), mY.classList.add('error'));
                    }
                    return mH.innerHTML = WP.join('<br />'), 0 == WP.length;
                }
                function ZY() {
                    ;
                    return ZY = gN(gj().mark(function WA() {
                        ;
                        return gj().wrap(function (WI) {
                            ;
                            for (;;) {
                                switch (WI.prev = WI.next) {
                                case 0:
                                    if (!Z7 && ZO()) {
                                        WI.next = 2;
                                        break;
                                    }
                                    return WI.abrupt('return');
                                case 2:
                                    return mH.textContent = '', Z7 = true, mE.classList.remove('hide'), WI.next = 7, eO({
                                        0: '/changeusername',
                                        1: '/changepassword'
                                    }[Z8], {
                                        0: {
                                            'sessionID': eE,
                                            'username': mY.value.trim(),
                                            'password': mM.value.trim()
                                        },
                                        1: {
                                            'sessionID': eE,
                                            'newPassword': mY.value.trim(),
                                            'password': mM.value.trim()
                                        }
                                    }[Z8], function (WP) {
                                        ;
                                        mH.textContent = WP;
                                        Z7 = false;
                                        mE.classList.add('hide');
                                    }, function (WP) {
                                        ;
                                        if (Z7 = false, mE.classList.add('hide'), WP.error) {
                                            mH.textContent = WP.error;
                                        } else {
                                            switch (Z8) {
                                            case 0:
                                                mz = mY.value.trim(), gX.textContent = mz, v8.username = mz;
                                                break;
                                            case 1:
                                                eH(WP.sessionID);
                                            }
                                            ZM();
                                        }
                                    });
                                case 7:
                                case 'end':
                                    return WI.stop();
                                }
                            }
                        }, WA);
                    })), ZY.apply(this, arguments);
                }
                function ZM() {
                    ;
                    m1.classList.remove('hide');
                    mO.classList.add('hide');
                }
                var ZS = [
                        {
                            'name': 'X Offset',
                            'key': 'offsetX',
                            'min': -2,
                            'max': 2,
                            'multiplier': -1,
                            'step': 0.05,
                            'digits': 2
                        },
                        {
                            'name': 'Y Offset',
                            'key': 'offsetY',
                            'min': -2,
                            'max': 2,
                            'multiplier': -1,
                            'step': 0.05,
                            'digits': 2
                        },
                        {
                            'name': 'Size',
                            'key': 'size',
                            'min': 0.25,
                            'max': 2,
                            'multiplier': 30,
                            'step': 0.05,
                            'digits': 2
                        },
                        {
                            'name': 'Zoom',
                            'key': 'scale',
                            'min': 0.25,
                            'max': 2.5,
                            'step': 0.05,
                            'digits': 2
                        },
                        {
                            'name': 'Grid Scale',
                            'key': 'gridScale',
                            'min': 0.5,
                            'max': 2,
                            'step': 0.1,
                            'digits': 1,
                            'default': 1
                        },
                        {
                            'name': 'Rotation',
                            'key': 'rot',
                            'min': 0,
                            'max': 360,
                            'suffix': '\xB0',
                            'multiplier': Math.PI / 180,
                            'step': 15,
                            'digits': 0
                        }
                    ], ZK = {
                        0: {
                            'name': 'Team Colors',
                            'data': [
                                10,
                                11,
                                12,
                                13
                            ],
                            'stars': 0
                        },
                        1: {
                            'name': 'Special Colors',
                            'data': [
                                2,
                                -1,
                                3,
                                7,
                                5,
                                6
                            ],
                            'stars': 200
                        },
                        2: {
                            'name': 'Polygon Colors',
                            'data': [
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30
                            ],
                            'stars': 350
                        }
                    }, ZC = {
                        0: {
                            'name': 'Default Background',
                            'data': {
                                'default': {
                                    'name': 'Default',
                                    'gridSize': 1,
                                    'backgroundColor': '#CDCDCD',
                                    'gridColor': '#afafaf',
                                    'borderColor': '#afafaf'
                                }
                            },
                            'stars': 0
                        },
                        1: {
                            'name': 'Dimension Backgrounds',
                            'data': {
                                'crossroads': {
                                    'name': 'Crossroads',
                                    'gridSize': 1,
                                    'backgroundColor': '#474747',
                                    'gridColor': '#292929',
                                    'borderColor': '#292929'
                                },
                                'sanctuary': {
                                    'name': 'Sanctuary',
                                    'gridSize': 1,
                                    'backgroundColor': '#595959',
                                    'gridColor': '#3b3b3b',
                                    'borderColor': '#3b3b3b'
                                },
                                'abyss': {
                                    'name': 'Abyss',
                                    'gridSize': 1,
                                    'backgroundColor': '#141414',
                                    'gridColor': '#000000',
                                    'borderColor': '#000000'
                                }
                            },
                            'stars': 150
                        },
                        2: {
                            'name': 'Accurate Dimension Backgrounds',
                            'data': {
                                'accurateDefault': {
                                    'name': 'Default',
                                    'gridSize': 2,
                                    'backgroundColor': '#CDCDCD',
                                    'gridColor': '#C8C8C8',
                                    'borderColor': '#afafaf'
                                },
                                'accurateCrossroads': {
                                    'name': 'Crossroads',
                                    'gridSize': 0.5,
                                    'backgroundColor': '#474747',
                                    'gridColor': '#3D3D3D',
                                    'borderColor': '#292929'
                                },
                                'accurateSanctuary': {
                                    'name': 'Sanctuary',
                                    'gridSize': 2,
                                    'backgroundColor': '#595959',
                                    'gridColor': '#4E4D4D',
                                    'borderColor': '#3b3b3b'
                                },
                                'accurateAbyss': {
                                    'name': 'Abyss',
                                    'gridSize': 0.5,
                                    'backgroundColor': '#141414',
                                    'gridColor': '#212121',
                                    'borderColor': '#000000'
                                }
                            },
                            'stars': 150
                        }
                    }, ZE = [
                        0,
                        0,
                        0,
                        50,
                        150,
                        400,
                        400,
                        600
                    ], ZH = 0, ZZ = document.getElementById('edit-icon-tabs').children, ZV = document.getElementById('edit-icon-tab-content').children;
                function ZT(WA) {
                    ;
                    ZZ[ZH].classList.remove('selected');
                    ZV[ZH].classList.add('hidden');
                    ZZ[WA].classList.add('selected');
                    ZV[WA].classList.remove('hidden');
                    ZH = WA;
                }
                var Zj, ZJ = [], ZR = {}, ZL = {}, ZA = { dS: dK }, ZI = { dC: dH }, ZP = [];
                function ZN() {
                    ;
                    Zj = ZG(Zj.weaponID, Zj.bodyID, Zj.team, Zj.offsetX, Zj.offsetY, Zj.scale, Zj.gridScale, Zj.size, Zj.rot, Zj.tankType, Zj.background, Zj.backgroundColor, Zj.gridColor, Zj.borderColor, Zj.gridSize);
                    JE(mV, Zj);
                    var WA, WI = gR(ZS);
                    try {
                        for (WI.s(); !(WA = WI.n()).done;) {
                            var WP = WA.value, WN = WP.input;
                            ;
                            WN.oninput({
                                'target': WN,
                                'fake': true
                            });
                        }
                    } catch (d1) {
                        WI.e(d1);
                    } finally {
                        WI.f();
                    }
                    for (var WW = 0, WD = Object.values(ZR); WW < WD.length; WW++) {
                        WD[WW].classList.remove('selected');
                    }
                    for (var WQ = 0, Wk = Object.values(ZL); WQ < Wk.length; WQ++) {
                        Wk[WQ].classList.remove('selected');
                    }
                    for (var WX = 0, WG = Object.values(ZA); WX < WG.length; WX++) {
                        WG[WX].classList.remove('selected');
                    }
                    for (var Wz = 0, WF = Object.values(ZI); Wz < WF.length; Wz++) {
                        WF[Wz].classList.remove('selected');
                    }
                    var Wq = ZR[Zj.weaponID];
                    Wq && Wq.classList.add('selected');
                    var WU = ZL[Zj.bodyID];
                    WU && WU.classList.add('selected');
                    var WB = ZA[Zj.team];
                    WB && WB.classList.add('selected');
                    var d0 = ZI[Zj.background || 'default'];
                    d0 && d0.classList.add('selected');
                }
                function ZW() {
                    ;
                    mT.classList.add('hide');
                    mR.classList.add('hide');
                    mN = false;
                }
                function ZD() {
                    ;
                    if (mT.classList.remove('hide'), mL.textContent = '', Zj = mQ, ZN(), ZJ.length > 0) {
                        for (var WA = function () {
                                    var Wk = gL(ZJ[WI], 5), WX = Wk[0], WG = Wk[1], Wz = Wk[2], WF = Wk[3], Wq = Wk[4];
                                    setTimeout(function () {
                                        switch (WX) {
                                        case 0:
                                            !function (WU, WB, d0, d1) {
                                                var d2 = TL, d3 = 0.1 * WU.width, d4 = d3 / (0 == d1 ? 50 : 100), d5 = jN(0, 0 == d1 ? 10 : 2), d6 = C9(135), d8 = document.createElement('canvas');
                                                d8.width = WU.width / 2;
                                                d8.height = WU.height / 2;
                                                TL = d8.getContext('2d');
                                                JS(WU.width / 2 / 2, WU.height / 2 / 2, d3 / 2, d6, d5, WB, d0, d4 / 2, d1);
                                                var d9 = LW(TL.getImageData(0, 0, d8.width, d8.height)), dO = 1 / Math.max((d9.right - d9.left) / d8.width, (d9.bottom - d9.top) / d8.height) * 0.9, dY = WU.width / 2 - (d9.left - (d8.width - d9.right)) * dO, dM = WU.height / 2 - (d9.top - (d8.height - d9.bottom)) * dO;
                                                (TL = WU.getContext('2d')).clearRect(0, 0, WU.width, WU.height);
                                                JS(dY, dM, d3 * dO, d6, d5, WB, d0, d4 * dO, d1);
                                                TL = d2;
                                            }(WG, Wz, WF, Wq);
                                            break;
                                        case 1:
                                            !function (WU, WB) {
                                                var d0 = TL, d1 = WU.width / 2, d2 = 0.0510204081632653 * WU.width / 2, d3 = 0.0510204081632653 * WU.width, d4 = WB.backgroundColor, d5 = WB.gridColor, d6 = WB.borderColor;
                                                (TL = WU.getContext('2d')).fillStyle = d4;
                                                TL.fillRect(0, 0, WU.width, WU.height);
                                                TL.lineWidth = d3;
                                                TL.strokeStyle = d5;
                                                TL.beginPath();
                                                TL.moveTo(d1, d1 + d1);
                                                TL.lineTo(d1, d1 - d1);
                                                TL.moveTo(d1 + d1, d1);
                                                TL.lineTo(d1 - d1, d1);
                                                for (var d7 = Math.ceil(WB.gridSize - 1), d8 = WU.width / WB.gridSize / 2, d9 = 1; d9 < d7 + 1; d9++) {
                                                    TL.moveTo(d1 + d8 * d9, d1 + d1);
                                                    TL.lineTo(d1 + d8 * d9, d1 - d1);
                                                    TL.moveTo(d1 - d8 * d9, d1 + d1);
                                                    TL.lineTo(d1 - d8 * d9, d1 - d1);
                                                    TL.moveTo(d1 + d1, d1 + d8 * d9);
                                                    TL.lineTo(d1 - d1, d1 + d8 * d9);
                                                    TL.moveTo(d1 + d1, d1 - d8 * d9);
                                                    TL.lineTo(d1 - d1, d1 - d8 * d9);
                                                }
                                                TL.stroke();
                                                TL.strokeStyle = d6;
                                                sY(d1, d1, WU.width - d3, WU.height - d3, d2);
                                                TL.stroke();
                                                TL = d0;
                                            }(WG, Wz);
                                        }
                                    }, 10 * WI);
                                }, WI = 0; WI < ZJ.length; WI++) {
                            WA();
                        }
                        ZJ = [];
                    }
                    var WP, WN = gR(ZP);
                    try {
                        for (WN.s(); !(WP = WN.n()).done;) {
                            var WW = gL(WP.value, 2), WD = WW[0], WQ = WW[1];
                            WD.classList.toggle('disabled', mq < WQ);
                        }
                    } catch (Wk) {
                        WN.e(Wk);
                    } finally {
                        WN.f();
                    }
                }
                function ZQ() {
                    ;
                    return ZQ = gN(gj().mark(function WA() {
                        ;
                        return gj().wrap(function (WI) {
                            ;
                            for (;;) {
                                switch (WI.prev = WI.next) {
                                case 0:
                                    if (!mN) {
                                        WI.next = 2;
                                        break;
                                    }
                                    return WI.abrupt('return');
                                case 2:
                                    return mL.textContent = '', mN = true, mR.classList.remove('hide'), WI.next = 7, eO('/editicon', {
                                        'sessionID': eE,
                                        'icon': CN(JSON.stringify({
                                            'weaponID': Zj.weaponID,
                                            'bodyID': Zj.bodyID,
                                            'offsetX': Zj.offsetX,
                                            'offsetY': Zj.offsetY,
                                            'size': Zj.size,
                                            'scale': Zj.scale,
                                            'gridScale': Zj.gridScale,
                                            'background': Zj.background,
                                            'team': Zj.team,
                                            'rot': Zj.rot
                                        }))
                                    }, function (WP) {
                                        ;
                                        mL.textContent = WP;
                                        mN = false;
                                        mR.classList.add('hide');
                                    }, function (WP) {
                                        ;
                                        mN = false;
                                        mR.classList.add('hide');
                                        WP.error ? mL.textContent = WP.error : (mQ = JSON.parse(CW(WP.icon)), JE(gF, mQ), ZW());
                                    });
                                case 7:
                                case 'end':
                                    return WI.stop();
                                }
                            }
                        }, WA);
                    })), ZQ.apply(this, arguments);
                }
                var Zk = {}, ZX = {};
                function ZG(WA, WI, WP, WN, WW, WD) {
                    var WQ, Wk, WX = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, WG = arguments.length > 7 ? arguments[7] : void 0, Wz = arguments.length > 8 ? arguments[8] : void 0, WF = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, Wq = arguments.length > 10 ? arguments[10] : void 0, WU = arguments.length > 11 ? arguments[11] : void 0, WB = arguments.length > 12 ? arguments[12] : void 0, d0 = arguments.length > 13 ? arguments[13] : void 0, d1 = arguments.length > 14 && void 0 !== arguments[14] ? arguments[14] : 1, d2 = {
                            'barrels': [],
                            'gadgets': [],
                            'layers': [],
                            'sides': 0,
                            'outerSides': 0,
                            'outerSize': 0,
                            'background': Wq,
                            'backgroundColor': WU || '#CDCDCD',
                            'gridColor': WB || '#afafaf',
                            'borderColor': d0 || '#afafaf',
                            'offsetX': WN,
                            'offsetY': WW,
                            'scale': WD,
                            'gridScale': WX,
                            'gridSize': d1,
                            'rot': Wz,
                            'size': WG,
                            'team': WP,
                            'weaponID': WA,
                            'bodyID': WI,
                            'tankType': WF
                        };
                    return Object.values(Zk).find(function (d3) {
                        ;
                        return Object.values(d3.weapon).find(function (d4) {
                            ;
                            return d4.find(function (d5) {
                                return d5.id == WA && (WQ = d5), d5.id == WA;
                            });
                        });
                    }), Object.values(Zk).find(function (d3) {
                        return Object.values(d3.body).find(function (d4) {
                            ;
                            return d4.find(function (d5) {
                                return d5.id == WI && (Wk = d5), d5.id == WI;
                            });
                        });
                    }), WQ && (d2.barrels = WQ.barrels), Wk && (d2.gadgets = Wk.gadgets, d2.layers = Wk.layers, d2.sides = Wk.sides, d2.outerSides = Wk.outerSides, d2.outerSize = Wk.outerSize), d2;
                }
                Zk = JSON.parse(CW('eJztXVl327YS/i96lnTEnepbnDRJH5zmxj437b3HD5AESzyhSIWLE8fH/70kJWxcQICAbCZ1HloOqw4G4CwfZgbIw2Qx+e1h8g2CQxyVTwX5/4dJBPZw8tvkQ7yBk+kk2BTP0fF5BZIEhmnxq5vHm+nEoH9+GUcx+vn++Ex+/jDJ7g/FrxbTSRJn1b/j29sUHh+/BZtsVzzNnekkhNG2JIzpZBOkGYjW5f/2ePM4xSO9jvd7EG1ggoZbUy+aYxrCYy7mfveo1wk4HMiYGSabI5r8EV3eNItlNellfZPjVd3kwos6q+aFR7Q7B5zyvowgD3qV3oYg+oIEvj0RGvWgIa81N2zDWap926tDGGRI6vREcKSeu8bC99rHNJlBPadH/plOZkpmdRVE2xBbfIoo6Y/nUaPNOeO9CsP4Hg0HTsQ5VMXQqSrvcpBskNTbE9HtArhjchyB5k8bBZTrShGltNi8T/vnHUxSSEaMCa3VP5/nE78JErjOYiz9htDS0vtiXjNPgyICI7eJqO7RBs9zqiNGUdYAisiLreFESAdEX2ywizBefwEElKwIrTMGN5ZoqA3Tsn/KVyviXBNEScttiwUEIdEleRlzx1v4WljNhvOqEJJFI6TrJIgJKgs0YKRuq5FBSXJcpJHWf3KA49DX4/MYcFYfH96Xl2DD1SAxk3yVrDH6qB55gM/zHVtdaE18nncN9UKTd3kUEaCwRZSoBVs0WB5swTq4zKpft7NxZYQR5VIHXGFMgGlM6PMCLnO+WNr9Gt3PaDaUE5sZKDYt8R4mIMOxds2+O4eP1Ab2x7mqn8EXvJrfjs/Pt+FhAuyyz8OZc9u2bFdhJRf4kwzkxOYZEkiidoqobp0sXPTC9kyh5EBv0NDFqUxZLH3DEuHV60B1srLs5UIokdKrNxp5KUXHNzDNkvieBMgN9ULaldGbUW5mJk1BmgZ4QwoIrZYyMBtgnsnqHuI82hC/jWmlFJRKxsATtOu3oMwP4GTWLSabklt6MiyXIAJbohZ7TEqGe0Ns5w0zvMtfHZ8ld65i4/webYOIyhtBQjfH83t0gLVSjuZdFKyDNZ1YoF5ozCzMDfX0S+GZbDakZGxSJM2eJinCAxYyfLgIRTC5crVOwAEvwIn4mVIr3DAvnabRxor7bSR5DWdVZXxsOuNTpj4SnPP5iiixMFEpFR7aGgRIZ7q4WO1MFLavPC60zXyEEfHphxPBAaJcoKYP8ulDfBoB39Phvaus2BLsw4BKiaTMK2koRCcTS+VQTUiWKQllHup7v6fYPYrwUE/xNvZbtD78EW3yQgEwsgwILQQtazluHrqc8hCqMBcmKVWgYJyQOj6/ZKjls6vjyj2bc8txDfVVng1kRCvY+zgJfpC66Q6TvEy+tTS79vUyhj3Txon3YWRF0sSpMGvPN3SIpI3T2KxSKasTpIeyIYI0GGCamwq0Fh3mIpsJ1MRIIjvZ/3l1ceJbgRyU08apjMOm1ZE9NqWigS4+pmt0mIEpBBOoqeliJZRC5OTEgijY5jgc7DEpjTpMzog9OzpHAxtNXPQUNTtEUeiR4HFhsoH7wiuSNiyIyfOWNAUjhEDxTR8nLX1t70G23pGN5Q6T0llqS8j5ISa81I8cJ25CisuKKW/sQbgFe1zdwOT4Wqub+eK6sy3/59Z8qUh+r85tNogdqVqrFlupsrWGautncEfVre964JU5dw1vKWJifcFenZNiMb2t0DCMVVVu0Nu39iqKgl0QAqrBFjCvJKO1wUEYtYpZXhbm8oQpm9HvpP2gaEH1/f0qCXBlc4corQVcucqmL2hDlyD5khbLRFYM02qlYJsT97/DdZ4FxHgh9UK2vinaDBgedjgdDk6EbI1TcKxPIKAOLyWIkq5wLplvyClwvir2lhEISbcjIqWHdDk11blFdHA4mzKvwmogXO9AFOBezT2hu8Xntj05vHVrTIHfQiXHq8swuFwY1QlifE4pOT7rLFA76gVqDUcMSoTF1qpAGKRUjftA6LPWuHn4XarGrY2RjqMIV7sEHCKI3UFK6J+pZj6O4wgtAL07ZyQrlkZe3Gy7fFvAYGY3pSpOVvHmvnHe+AKkVAdO9bwFmy3MqvPGBVNwD5PTc1rEzPSolXkGk6s6+eM4WO2I8tUepNQGOMWk5DguO84x8OFNRxiSTUf13Mfd5c+CslwYUbXAFFGEPwXEjp/mL+r57+qZfBomJeNMqzX/VKnw46DVphMN0RZQeYYT1ZSzAd2a8tLoMa1GMpTFgyApeCLxENUUz6R5p/mqd3ETsAny4uc2i3WKOYIsiKNrNOkjwPyt6tZYgfUXIjJajnQXf/tYCBasw+q/DJtz/TD52zjJEpimuFGR0JJKyjOBq0NAGsbTEyFpYnaNv8vA2T3VbAkQ9UxmwF2JLImj7S4OSc83/aZ9TR5Oen5SeQEX0WdFjwN8zesgKxAWdmVrTD7VMgtLep0XoAWj4gxRTTktMS+TlZcWFMGpU2PHlyYsY2rDyZAVFnQX5QqG8ALuwF0QJ9WLYoBdnMBNRWQQ7ItVVHW/n4v95y44kCCJyO74UANof6HTVvgTzuy5v/Qd3zOWruMvbcOCM8Nrjx49Cf9SOQbzVlyaS0hfa7JHFC8y+VRkMroVHEUmdySRieq+jqPbICHID5Ma4zE9a+954zFzdPk1SDNyKnyNqIEulp6l1e1iSXzxaC3SE19qjPxpd3AsdvVgTe/pj1RfUPT0B0X+7OlQUzhDnArNToQksnHqyMahD5LEyRZS6GzbaQi9kazMBiQN989qN21DyFac0p9hgzBbrGWYLdQRHT3tiyTY0ucvMDk4iJ8c8q8TzY+HBd/ADK7L96eP+ZwRvg58bQaiZ0EYQhqlkxcD3ZtXWz19+9XrJDiEFITE5DD1c8+vdWO+oeLnQaIXICsCLg1GV/Sbbjxay2MWurCce0vP8GxraRme75vuESMS/WCO9fPRKN0JV6FRd2n65sIyrYXpOQ7p3fv7WKBdMH8MS3CgWWOkmaahFD/LJ7iHG+w5EkRpRMEeYxGeMwog/DYEBAbfngiNIJjesvjPC4JtGgT/L9hu8wRg9/uD0E+GBaeEp4152mo8B+DLi3i/oq6XW2FyUMg0WOvUFy+vwDecz6oeFZN7PoMFi10QdRnaCpNDYYMQaiDf3z/7/qK+A3CcWkwCIbMA5MVgPPJkcPjnAibjA9W8vPfb8joE6pYBTA7bIHoDN4juk2wP6YlX531zGqJ/pd8MtAptqd5/+ZHinwfvX8bZDjLJ5z39hlOfZArxFSZ3XMct3pn20l6aFpMvbvxHQxSRN8Zp8tIyUK2A3zYhgzabphBi82mO0yqz7ECqQBusyus9qAbUW/qNxn0GLf9yFJuMP6JbmJCL2gNMatxojGXWN4+PVQMI54b7O9zzGR2feTfcf8zDlLQ1HBDVHSOa7U7dNw3aPd65wYt3+WEfs8ZpO32sVMRqnifUyEtCMKZbDmQwDANyn2BKvRh4QTM7dt+xihYtooGCQTOzpJnNVLhxT21KTbL55fVJpTRF/hlXqTm2qLdGuWRmyV4xV8Q+3BG0QdTAGx7FVqSb1YAV6WQ26LuLXKMkN0kdX72Ll9IUNah2Nyudcsmpdr3prdg9UmH7K6KkwjYbIOZG10JZDpsht8QC+TnZLzi8mVZd23REkIJGWVu+8xm5qy1Ei4ZrlLVN5c/JXmot2L+DAfwgxrRClIwxdR7Z7fILnA86kBPX83FZMSeTYpKl3ccqf2OHJSI8Bw9and5xABwczIy7qDIz5G8DlGRSmR9fa2Qm2LPRUZNKYorMRuc+ig9kl4Oo7jOx/MM8zHLU7/2d1nlxL62UY8W/S5PLi70DOYNJTA7tAkIPhMaWFKJqsXJ3MKJqM/Ph3ITNYAA01ieV0hTFTX0INNYol8wsmdu2dyAh0WuNqG7V5q6IIxR9RfRHjhP/WhR+HO88h/YahjDNAnJeek296Kt0W729D0xK8QNc5SHJQSJKvNQ9q11SbtAbpYXnsMUYtspiMMCI7jdauKbheb7p2ktj4bEZeste0n98wdHRKWohEWbnkWEmJURnRwETXUX6rF1B9ZBoKejRM8bQ0z1l5xXR11fj6xK4ta/mXItgsYyYZvPfv8fpYQcT6k4J8kK19nE0QlT+MNhkhabmsqmEaLLGMxrJ5e1+NKJ31MIsRi5LfzVsJF4mTu5ynEReI0pjKdVmUfz5llGb7xuwjNdJkBFUliGqtTEBj+rPHc90TM9Z2gvLKJBVrfV4xvbAUWeu2wr3HFtkTbGedWoZAgE97jjqw8w6xxHpA7JauuO60zhcGOyyfxhg1nt7Gv9qDxXOukS+6YS/528CMtqbgB66/Qaj48fmKmGMLvxDptDwAcTYBUbH53E7wF7Y+7K70LG7GF+ceQdC8B03km4R9bLtHMO2c24VYXzh+0vDMm3HKbM49LobHhsSTUEpUBQQXYnzSDGTEsOem75rupa39BaG41nNU1VssYYzMA6vint/egRz5Hv/j3EY5t9xwxqiBh6koAMQ5wYP8ZDs6Q/JZO7/pXL3d8fnf0fWgz5McgkzGFP3SZyol3zHSCR/yXeMOt/BSyi+jvfkOMr6RPR5GKvT480aZqxPbJMS+z0Mg1omdMe80u0bvLqecs8Ojco5PLfoKt7huWXvcA8mm74Zh1D2r+OxOBna+21EZWgRpfNqqfpfEvdrLuT7YjYJdT53R+iXPO0587TkAJhyotZ3PMM28T9NfYlaJc66RH5J1HYZ758rSLW9xIh6MdyBhquYM2nRJKSeVwdYqdN4tOjm8fHxH1LCmJs='));
                ZX = ZG('split', 'wall', 10, -0.4, -0.4, 1, 1, 30, C9(135));
                (function () {
                    ;
                    ZT(0);
                    for (var WA = function (dS) {
                                ;
                                ZZ[dS].addEventListener('click', function () {
                                    ZT(dS);
                                });
                            }, WI = 0; WI < ZZ.length; WI++) {
                        WA(WI);
                    }
                    for (var WP = function () {
                                var dS = gL(WW[WN], 2), dK = dS[0], dC = dS[1];
                                dK = +dK;
                                for (var dE = dC.weapon, dH = dC.body, dZ = function () {
                                            ;
                                            for (var dj = dT[dV], dJ = ZV[dj ? 0 : 1], dR = 0, dL = Object.entries(dj ? dE : dH); dR < dL.length; dR++) {
                                                var dA = gL(dL[dR], 2), dI = dA[0], dP = dA[1];
                                                dI = +dI;
                                                var dN = HN(dJ, 'div', 'edit-icon-tab-title');
                                                dN.textContent = ''.concat(1 == dK ? 'Celestial ' : '', 'Tier ').concat(dI);
                                                var dW = HN(dJ, 'div', 'edit-icon-tab-list'), dD = ZE[dI + (1 == dK ? 5 : 0)] || 0;
                                                dW.dataset.text = 'Reach '.concat(dD, ' stars to unlock');
                                                ZP.push([
                                                    dN,
                                                    dD
                                                ]);
                                                ZP.push([
                                                    dW,
                                                    dD
                                                ]);
                                                var dQ, dX = gR(dP);
                                                try {
                                                    var dG = function () {
                                                        var dz = dQ.value, dF = HN(dW, 'div', [
                                                                'edit-icon-tab-item',
                                                                'tooltip-trigger'
                                                            ]), dq = HN(dF, 'canvas'), dU = HN(dF, 'div', 'relative-tooltip-container');
                                                        HN(dU, 'span', [
                                                            'bottom',
                                                            'relative',
                                                            'higher',
                                                            'tooltip'
                                                        ]).textContent = dz.name;
                                                        dq.width = 128;
                                                        dq.height = 128;
                                                        ZJ.push([
                                                            0,
                                                            dq,
                                                            dz,
                                                            dj,
                                                            dK
                                                        ]);
                                                        (dj ? ZR : ZL)[dz.id] = dF;
                                                        var dB = dz;
                                                        dF.onclick = function () {
                                                            ;
                                                            if (Zj[dj ? 'weaponID' : 'bodyID'] != dB.id) {
                                                                Zj[dj ? 'weaponID' : 'bodyID'] = dB.id;
                                                                dj || (Zj.tankType = dK);
                                                                ZN();
                                                            }
                                                        };
                                                    };
                                                    for (dX.s(); !(dQ = dX.n()).done;) {
                                                        dG();
                                                    }
                                                } catch (dz) {
                                                    dX.e(dz);
                                                } finally {
                                                    dX.f();
                                                }
                                            }
                                        }, dV = 0, dT = [
                                            true,
                                            false
                                        ]; dV < dT.length; dV++) {
                                    dZ();
                                }
                            }, WN = 0, WW = Object.entries(Zk); WN < WW.length; WN++) {
                        WP();
                    }
                    for (var WD = 0, WQ = Object.entries(ZK); WD < WQ.length; WD++) {
                        var Wk = gL(WQ[WD], 2), WX = (Wk[0], Wk[1]), WG = ZV[2], Wz = HN(WG, 'div', 'edit-icon-tab-title');
                        ;
                        var WF = HN(WG, 'div', 'edit-icon-tab-list');
                        WF.dataset.text = 'Reach '.concat(WX.stars, ' stars to unlock');
                        ZP.push([
                            Wz,
                            WX.stars
                        ]);
                        ZP.push([
                            WF,
                            WX.stars
                        ]);
                        var Wq, WU = gR(WX.data);
                        try {
                            var WB = function () {
                                var dS = Wq.value, dK = HN(WF, 'div', ['edit-icon-tab-item']);
                                dK.style.backgroundColor = jN(0, dS);
                                ;
                                var dC = dS;
                                dK.onclick = function () {
                                    ;
                                    if (Zj.team != dS) {
                                        Zj.team = dC;
                                        ZN();
                                    }
                                };
                            };
                            for (WU.s(); !(Wq = WU.n()).done;) {
                                WB();
                            }
                        } catch (dS) {
                            WU.e(dS);
                        } finally {
                            WU.f();
                        }
                    }
                    for (var d0 = 0, d1 = Object.entries(ZC); d0 < d1.length; d0++) {
                        var d2 = gL(d1[d0], 2), d3 = (d2[0], d2[1]), d4 = ZV[3], d5 = HN(d4, 'div', 'edit-icon-tab-title');
                        d5.textContent = d3.name;
                        var d6 = HN(d4, 'div', 'edit-icon-tab-list');
                        d6.dataset.text = 'Reach '.concat(d3.stars, ' stars to unlock');
                        ZP.push([
                            d5,
                            d3.stars
                        ]);
                        ZP.push([
                            d6,
                            d3.stars
                        ]);
                        for (var d7 = function () {
                                    var dK = gL(d9[d8], 2), dC = dK[0], dE = dK[1], dH = HN(d6, 'div', [
                                            'edit-icon-tab-item',
                                            'tooltip-trigger'
                                        ]), dZ = HN(dH, 'canvas'), dV = HN(dH, 'div', 'relative-tooltip-container');
                                    HN(dV, 'span', [
                                        'bottom',
                                        'relative',
                                        'higher',
                                        'tooltip'
                                    ]).textContent = dE.name;
                                    dZ.width = 128;
                                    dZ.height = 128;
                                    ZJ.push([
                                        1,
                                        dZ,
                                        dE
                                    ]);
                                    ;
                                    var dT = dC, dj = dE;
                                    dH.onclick = function () {
                                        ;
                                        if (Zj.background != dT) {
                                            Zj.background = dT;
                                            Zj.backgroundColor = dj.backgroundColor;
                                            Zj.gridColor = dj.gridColor;
                                            Zj.borderColor = dj.borderColor;
                                            Zj.gridSize = dj.gridSize;
                                            ZN();
                                        }
                                    };
                                }, d8 = 0, d9 = Object.entries(d3.data); d8 < d9.length; d8++) {
                            d7();
                        }
                    }
                    for (var dO = function () {
                                var dK = dM[dY], dC = HN(mZ, 'div', 'slider'), dE = HN(dC, 'label');
                                dE.textContent = dK.name;
                                var dH = HN(dC, 'input', 'slide');
                                dH.type = 'range';
                                dH.min = dK.min;
                                dH.max = dK.max;
                                dH.step = dK.step;
                                dH.attribute = dK;
                                dK.input = dH;
                                dH.oninput = function (dZ) {
                                    ;
                                    dE.textContent = ''.concat(dK.name, ': ').concat((+(dZ.target.value || 0)).toFixed(dK.digits || 0)).concat(dK.suffix || '');
                                    dZ.fake || (Zj[dK.key] = dZ.target.value * (dK.multiplier || 1), ZN());
                                };
                                dH.oninput({
                                    'target': dH,
                                    'fake': true
                                });
                            }, dY = 0, dM = ZS; dY < dM.length; dY++) {
                        dO();
                    }
                }());
                var Zz = [], ZF = '', Zq = false;
                function ZU() {
                    var WA = mA.value.trim().replaceAll(/\s+/g, '');
                    mA.value = WA;
                    WA.length > 0 && document.activeElement == mA ? mP.classList.remove('hide') : mP.classList.add('hide');
                    WA != ZF && v0();
                    ZF = WA;
                    ZB();
                }
                function ZB() {
                    ;
                    CD(mP);
                    for (var WA = false, WI = function () {
                                var WN = Zz[WP];
                                if (!WN.username.toLowerCase().startsWith(ZF.toLowerCase())) {
                                    return 'continue';
                                }
                                WA && HN(mP, 'hr');
                                WA = true;
                                var WW = HN(mP, 'div', 'profile-screen-search-result'), WD = HN(WW, 'canvas', 'icon');
                                ;
                                ;
                                JE(WD, WN.icon);
                                var WQ = HN(WW, 'div'), Wk = HN(WQ, 'div', 'result-name');
                                ;
                                ;
                                var WX = Wk.getBoundingClientRect().width;
                                Wk.style.width = 'auto';
                                var WG = Wk.getBoundingClientRect().width / WX;
                                Wk.style.width = '';
                                Wk.style.fontSize = 2.5 / Math.max(1, WG) + 'vmin';
                                var Wz = HN(WQ, 'div', 'result-stars');
                                HN(Wz, 'img').src = '/assets/star.png';
                                HN(Wz, 'div', 'result-star-count').innerText = CP(WN.stars);
                                WW.tabIndex = WP;
                                WW.mouseDown = false;
                                WW.onmousedown = function () {
                                    ;
                                    WW.mouseDown = true;
                                };
                                WW.onmouseleave = function () {
                                    ;
                                    WW.mouseDown = false;
                                };
                                WW.onmouseup = function () {
                                    ;
                                    WW.mouseDown && (WW.mouseDown = false, mU(WN.id), mA.blur());
                                };
                            }, WP = 0; WP < Zz.length; WP++) {
                        WI();
                    }
                }
                mA.onfocus = function (WA) {
                    Zq || ZU();
                    Zq = false;
                };
                mA.onblur = function (WA) {
                    ;
                    WA.relatedTarget == mI || WA.relatedTarget && WA.relatedTarget.classList.contains('profile-screen-search-result') ? (WA.relatedTarget && WA.relatedTarget.classList.contains('profile-screen-search-result') && (Zq = true), mA.focus()) : ZU();
                };
                mA.oninput = function () {
                    ZU();
                };
                mA.onkeydown = function (WA) {
                    ;
                    return ' ' != WA.key;
                };
                mI.onmousedown = function () {
                    mA.focus();
                };
                mI.onclick = function () {
                    ;
                    mA.focus();
                    mA.select();
                };
                var v0 = (0, c7.debounce)(50, gN(gj().mark(function WA() {
                    var WI;
                    return gj().wrap(function (WP) {
                        ;
                        for (;;) {
                            switch (WP.prev = WP.next) {
                            case 0:
                                if (0 != (WI = mA.value.trim().replaceAll(/\s+/g, '')).length) {
                                    ;
                                    break;
                                }
                                Zz = [], WP.next = 7;
                                break;
                            case 5:
                                return WP.next = 7, eO('/searchusers', { 'username': WI }, function (WN) {
                                    Zz = [];
                                    ZB();
                                }, function (WN) {
                                    ;
                                    if (WN.error) {
                                        return Zz = [], void ZB();
                                    }
                                    if ('object' == gJ(WN)) {
                                        (Zz = WN).forEach(function (WW) {
                                            ;
                                            WW.icon = JSON.parse(CW(WW.profilePicture));
                                        });
                                        ZB();
                                    }
                                });
                            case 7:
                            case 'end':
                                return WP.stop();
                            }
                        }
                    }, WA);
                })));
                ZU();
                function v1(WI) {
                    ;
                    return v1 = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (WP) {
                        return typeof WP;
                    } : function (WP) {
                        ;
                        return WP && 'function' == typeof Symbol && WP.constructor === Symbol && WP !== Symbol.prototype ? 'symbol' : typeof WP;
                    }, v1(WI);
                }
                function v2() {
                    ;
                    v2 = function () {
                        return WI;
                    };
                    var WI = { wrap: Wz }, WP = Object.prototype, WN = WP.hasOwnProperty, WW = Object.defineProperty || function (dK, dC, dE) {
                            dK[dC] = dE.value;
                        }, WD = 'function' == typeof Symbol ? Symbol : {}, WQ = WD.iterator || '@@iterator', Wk = WD.asyncIterator || '@@asyncIterator', WX = WD.toStringTag || '@@toStringTag';
                    function WG(dK, dC, dE) {
                        return Object.defineProperty(dK, dC, {
                            'value': dE,
                            'enumerable': true,
                            'configurable': true,
                            'writable': true
                        }), dK[dC];
                    }
                    try {
                        WG({}, '');
                    } catch (dK) {
                        WG = function (dC, dE, dH) {
                            return dC[dE] = dH;
                        };
                    }
                    function Wz(dC, dE, dH, dZ) {
                        var dV = dE && dE.prototype instanceof WU ? dE : WU, dT = Object.create(dV.prototype), dj = new dY(dZ || []);
                        return WW(dT, '_invoke', { 'value': d7(dC, dH, dj) }), dT;
                    }
                    function WF(dC, dE, dH) {
                        ;
                        try {
                            return {
                                'type': 'normal',
                                'arg': dC.call(dE, dH)
                            };
                        } catch (dZ) {
                            return {
                                'type': 'throw',
                                'arg': dZ
                            };
                        }
                    }
                    ;
                    var Wq = {
                        innerText: 'Barrels ('.concat(WD.tank.barrels.length, ')'),
                        onclick: function () {
                            ;
                            Wq.classList.toggle('active');
                            ;
                            'flex' === WU.style.display ? WU.style.display = 'none' : WU.style.display = 'flex';
                        },
                        next: 39,
                        next: 11,
                        next: 28,
                        next: 26,
                        next: 14,
                        next: 33,
                        next: 10,
                        next: 27,
                        next: 25,
                        next: 13,
                        next: 32,
                        next: 7,
                        next: 13,
                        next: 13,
                        next: 16
                    };
                    function WU() {
                    }
                    function WB() {
                    }
                    function d0() {
                    }
                    var d1 = {
                        baseRot: 0,
                        idleBehavior: 0,
                        idleRotationSpeed: 1,
                        maxTier: +d5
                    };
                    WG(d1, WQ, function () {
                        return this;
                    });
                    var d2 = Object.getPrototypeOf, d3 = d2 && d2(d2(dM([])));
                    d3 && d3 !== WP && WN.call(d3, WQ) && (d1 = d3);
                    var d4 = d0.prototype = WU.prototype = Object.create(d1);
                    function d5(dC) {
                        ;
                        [
                            'next',
                            'throw',
                            'return'
                        ].forEach(function (dE) {
                            WG(dC, dE, function (dH) {
                                return this['_invoke'](dE, dH);
                            });
                        });
                    }
                    function d6(dC, dE) {
                        ;
                        function dH(dV, dT, dj, dJ) {
                            var dR = WF(dC[dV], dC, dT);
                            if ('throw' !== dR.type) {
                                var dL = dR.arg, dA = dL.value;
                                return dA && 'object' == v1(dA) && WN.call(dA, '__await') ? dE.resolve(dA['__await']).then(function (dI) {
                                    dH('next', dI, dj, dJ);
                                }, function (dI) {
                                    dH('throw', dI, dj, dJ);
                                }) : dE.resolve(dA).then(function (dI) {
                                    ;
                                    dL.value = dI;
                                    dj(dL);
                                }, function (dI) {
                                    ;
                                    return dH('throw', dI, dj, dJ);
                                });
                            }
                            dJ(dR.arg);
                        }
                        var dZ;
                        WW(this, '_invoke', {
                            'value': function (dV, dT) {
                                ;
                                function dj() {
                                    return new dE(function (dJ, dR) {
                                        dH(dV, dT, dJ, dR);
                                    });
                                }
                                return dZ = dZ ? dZ.then(dj, dj) : dj();
                            }
                        });
                    }
                    function d7(dC, dE, dH) {
                        var dZ = 'suspendedStart';
                        return function (dV, dT) {
                            ;
                            if ('executing' === dZ) {
                                throw new Error('Generator is already running');
                            }
                            if ('completed' === dZ) {
                                if ('throw' === dV) {
                                    throw dT;
                                }
                                return dS();
                            }
                            for (dH.method = dV, dH.arg = dT;;) {
                                var dj = dH.delegate;
                                if (dj) {
                                    var dJ = d8(dj, dH);
                                    if (dJ) {
                                        if (dJ === Wq) {
                                            continue;
                                        }
                                        return dJ;
                                    }
                                }
                                if ('next' === dH.method) {
                                    dH.sent = dH['_sent'] = dH.arg;
                                } else {
                                    if ('throw' === dH.method) {
                                        if ('suspendedStart' === dZ) {
                                            throw dZ = 'completed', dH.arg;
                                        }
                                        dH.dispatchException(dH.arg);
                                    } else {
                                        'return' === dH.method && dH.abrupt('return', dH.arg);
                                    }
                                }
                                dZ = 'executing';
                                var dR = WF(dC, dE, dH);
                                if ('normal' === dR.type) {
                                    if (dZ = dH.done ? 'completed' : 'suspendedYield', dR.arg === Wq) {
                                        continue;
                                    }
                                    return {
                                        'value': dR.arg,
                                        'done': dH.done
                                    };
                                }
                                if ('throw' === dR.type) {
                                    dZ = 'completed';
                                    dH.method = 'throw';
                                    dH.arg = dR.arg;
                                }
                            }
                        };
                    }
                    function d8(dC, dE) {
                        var dH = dE.method, dZ = dC.iterator[dH];
                        if (void 0 === dZ) {
                            return dE.delegate = null, 'throw' === dH && dC.iterator.return && (dE.method = 'return', dE.arg = void 0, d8(dC, dE), 'throw' === dE.method) || 'return' !== dH && (dE.method = 'throw', dE.arg = new TypeError('The iterator does not provide a \'' + dH + '\' method')), Wq;
                        }
                        var dV = WF(dZ, dC.iterator, dE.arg);
                        if ('throw' === dV.type) {
                            return dE.method = 'throw', dE.arg = dV.arg, dE.delegate = null, Wq;
                        }
                        var dT = dV.arg;
                        return dT ? dT.done ? (dE[dC.resultName] = dT.value, dE.next = dC.nextLoc, 'return' !== dE.method && (dE.method = 'next', dE.arg = void 0), dE.delegate = null, Wq) : dT : (dE.method = 'throw', dE.arg = new TypeError('iterator result is not an object'), dE.delegate = null, Wq);
                    }
                    function d9(dC) {
                        var dE = { 'tryLoc': dC[0] };
                        1 in dC && (dE.catchLoc = dC[1]);
                        if (2 in dC) {
                            dE.finallyLoc = dC[2];
                            dE.afterLoc = dC[3];
                        }
                        this.tryEntries.push(dE);
                    }
                    function dO(dC) {
                        var dE = dC.completion || {};
                        dE.type = 'normal';
                        delete dE.arg;
                        dC.completion = dE;
                    }
                    function dY(dC) {
                        ;
                        this.tryEntries = [{ 'tryLoc': 'root' }];
                        dC.forEach(d9, this);
                        this.reset(true);
                    }
                    function dM(dC) {
                        ;
                        if (dC) {
                            var dE = dC[WQ];
                            if (dE) {
                                return dE.call(dC);
                            }
                            if ('function' == typeof dC.next) {
                                return dC;
                            }
                            if (!isNaN(dC.length)) {
                                var dH = -1, dZ = function dV() {
                                        ;
                                        for (; ++dH < dC.length;) {
                                            if (WN.call(dC, dH)) {
                                                return dV.value = dC[dH], dV.done = false, dV;
                                            }
                                        }
                                        return dV.value = void 0, dV.done = true, dV;
                                    };
                                return dZ.next = dZ;
                            }
                        }
                        return { 'next': dS };
                    }
                    function dS() {
                        return {
                            'value': void 0,
                            'done': true
                        };
                    }
                    return WB.prototype = d0, WW(d4, 'constructor', {
                        'value': d0,
                        'configurable': true
                    }), WW(d0, 'constructor', {
                        'value': WB,
                        'configurable': true
                    }), WB.displayName = WG(d0, WX, 'GeneratorFunction'), WI.isGeneratorFunction = function (dC) {
                        var dE = 'function' == typeof dC && dC.constructor;
                        return !!dE && (dE === WB || 'GeneratorFunction' === (dE.displayName || dE.name));
                    }, WI.mark = function (dC) {
                        ;
                        return Object.setPrototypeOf ? Object.setPrototypeOf(dC, d0) : (dC['__proto__'] = d0, WG(dC, WX, 'GeneratorFunction')), dC.prototype = Object.create(d4), dC;
                    }, WI.awrap = function (dC) {
                        return { '__await': dC };
                    }, d5(d6.prototype), WG(d6.prototype, Wk, function () {
                        return this;
                    }), WI.AsyncIterator = d6, WI.async = function (dC, dE, dH, dZ, dV) {
                        ;
                        void 0 === dV && (dV = Promise);
                        var dT = new d6(Wz(dC, dE, dH, dZ), dV);
                        return WI.isGeneratorFunction(dE) ? dT : dT.next().then(function (dj) {
                            ;
                            return dj.done ? dj.value : dT.next();
                        });
                    }, d5(d4), WG(d4, WX, 'Generator'), WG(d4, WQ, function () {
                        return this;
                    }), WG(d4, 'toString', function () {
                        ;
                        return '[object Generator]';
                    }), WI.keys = function (dC) {
                        var dE = Object(dC), dH = [];
                        for (var dZ in dE)
                            dH.push(dZ);
                        return dH.reverse(), function dV() {
                            ;
                            for (; dH.length;) {
                                var dT = dH.pop();
                                if (dT in dE) {
                                    return dV.value = dT, dV.done = false, dV;
                                }
                            }
                            return dV.done = true, dV;
                        };
                    }, WI.values = dM, dY.prototype = {
                        'constructor': dY,
                        'reset': function (dC) {
                            ;
                            if (this.prev = 0, this.next = 0, this.sent = this['_sent'] = void 0, this.done = false, this.delegate = null, this.method = 'next', this.arg = void 0, this.tryEntries.forEach(dO), !dC) {
                                for (var dE in this)
                                    't' === dE.charAt(0) && WN.call(this, dE) && !isNaN(+dE.slice(1)) && (this[dE] = void 0);
                            }
                        },
                        'stop': function () {
                            ;
                            this.done = true;
                            var dC = this.tryEntries[0].completion;
                            if ('throw' === dC.type) {
                                throw dC.arg;
                            }
                            return this.rval;
                        },
                        'dispatchException': function (dC) {
                            ;
                            if (this.done) {
                                throw dC;
                            }
                            var dE = this;
                            function dH(dR, dL) {
                                ;
                                return dT.type = 'throw', dT.arg = dC, dE.next = dR, dL && (dE.method = 'next', dE.arg = void 0), !!dL;
                            }
                            for (var dZ = this.tryEntries.length - 1; dZ >= 0; --dZ) {
                                var dV = this.tryEntries[dZ], dT = dV.completion;
                                if ('root' === dV.tryLoc) {
                                    return dH('end');
                                }
                                if (dV.tryLoc <= this.prev) {
                                    var dj = WN.call(dV, 'catchLoc'), dJ = WN.call(dV, 'finallyLoc');
                                    if (dj && dJ) {
                                        if (this.prev < dV.catchLoc) {
                                            return dH(dV.catchLoc, true);
                                        }
                                        if (this.prev < dV.finallyLoc) {
                                            return dH(dV.finallyLoc);
                                        }
                                    } else {
                                        if (dj) {
                                            if (this.prev < dV.catchLoc) {
                                                return dH(dV.catchLoc, true);
                                            }
                                        } else {
                                            if (!dJ) {
                                                throw new Error('try statement without catch or finally');
                                            }
                                            if (this.prev < dV.finallyLoc) {
                                                return dH(dV.finallyLoc);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        'abrupt': function (dC, dE) {
                            ;
                            for (var dH = this.tryEntries.length - 1; dH >= 0; --dH) {
                                var dZ = this.tryEntries[dH];
                                if (dZ.tryLoc <= this.prev && WN.call(dZ, 'finallyLoc') && this.prev < dZ.finallyLoc) {
                                    var dV = dZ;
                                    break;
                                }
                            }
                            dV && ('break' === dC || 'continue' === dC) && dV.tryLoc <= dE && dE <= dV.finallyLoc && (dV = null);
                            var dT = dV ? dV.completion : {};
                            return dT.type = dC, dT.arg = dE, dV ? (this.method = 'next', this.next = dV.finallyLoc, Wq) : this.complete(dT);
                        },
                        'complete': function (dC, dE) {
                            ;
                            if ('throw' === dC.type) {
                                throw dC.arg;
                            }
                            return 'break' === dC.type || 'continue' === dC.type ? this.next = dC.arg : 'return' === dC.type ? (this.rval = this.arg = dC.arg, this.method = 'return', this.next = 'end') : 'normal' === dC.type && dE && (this.next = dE), Wq;
                        },
                        'finish': function (dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.finallyLoc === dC) {
                                    return this.complete(dH.completion, dH.afterLoc), dO(dH), Wq;
                                }
                            }
                        },
                        'catch': function (dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.tryLoc === dC) {
                                    var dZ = dH.completion;
                                    if ('throw' === dZ.type) {
                                        var dV = dZ.arg;
                                        dO(dH);
                                    }
                                    return dV;
                                }
                            }
                            throw new Error('illegal catch attempt');
                        },
                        'delegateYield': function (dC, dE, dH) {
                            ;
                            return this.delegate = {
                                'iterator': dM(dC),
                                'resultName': dE,
                                'nextLoc': dH
                            }, 'next' === this.method && (this.arg = void 0), Wq;
                        }
                    }, WI;
                }
                function v3(WI, WP, WN, WW, WD, WQ, Wk) {
                    ;
                    try {
                        var WX = WI[WQ](Wk), WG = WX.value;
                    } catch (Wz) {
                        return void WN(Wz);
                    }
                    WX.done ? WP(WG) : Promise.resolve(WG).then(WW, WD);
                }
                function v4(WI) {
                    return function () {
                        var WP = this, WN = arguments;
                        return new Promise(function (WW, WD) {
                            var WQ = WI.apply(WP, WN);
                            function Wk(WG) {
                                ;
                                v3(WQ, WW, WD, Wk, WX, 'next', WG);
                            }
                            function WX(WG) {
                                v3(WQ, WW, WD, Wk, WX, 'throw', WG);
                            }
                            Wk(void 0);
                        });
                    };
                }
                var v5 = 'https://api.scnx.cc', v6 = false, v7 = false, v8 = void 0, v9 = document.getElementById('button-account'), vO = document.getElementById('login'), vY = document.getElementById('signup'), vM = document.getElementById('login-loading'), vS = document.getElementById('signup-loading'), vK = document.getElementById('login-error'), vC = document.getElementById('signup-error'), vE = document.getElementById('signed-in-text'), vH = document.getElementById('not-signed-in-text'), vZ = document.getElementById('signed-in-star-counter'), vV = document.getElementById('log-in'), vT = document.getElementById('sign-up'), vj = document.getElementById('log-out'), vJ = document.getElementById('login-button'), vR = document.getElementById('login-cancel'), vL = document.getElementById('signup-button'), vA = document.getElementById('signup-cancel'), vI = document.getElementById('sign-up-instead'), vP = document.getElementById('log-in-instead');
                vV.onclick = function () {
                    return vU(), false;
                };
                vT.onclick = function () {
                    return vB(), false;
                };
                vj.onclick = function () {
                    return e4(), false;
                };
                vR.onclick = function () {
                    e0();
                };
                vA.onclick = function () {
                    e2();
                };
                vJ.onclick = function () {
                    e0(true);
                };
                vL.onclick = function () {
                    e2(true);
                };
                vI.onclick = function () {
                    return e0(false), vB(), false;
                };
                vP.onclick = function () {
                    return e2(false), vU(), false;
                };
                v9.onclick = function () {
                    v7 ? mU(v8.id) : vU();
                };
                var vN = document.getElementById('login-show-password'), vW = document.getElementById('signup-show-password');
                vN.onclick = function () {
                    ;
                    vN.checked ? vQ.type = 'text' : vQ.type = 'password';
                };
                vW.onclick = function () {
                    ;
                    vW.checked ? vG.type = 'text' : vG.type = 'password';
                    vz.type = vG.type;
                };
                var vD = document.getElementById('login-username'), vQ = document.getElementById('login-password'), vX = document.getElementById('signup-username'), vG = document.getElementById('signup-password'), vz = document.getElementById('signup-confirm-password');
                [
                    vD,
                    vQ,
                    vX,
                    vG,
                    vz
                ].forEach(function (WI) {
                    var WP = document.createElement('p');
                    ;
                    ;
                    WI.parentNode.insertBefore(WP, WI.nextSibling);
                });
                vX.onchange = function () {
                    var WI = [];
                    vX.classList.remove('error');
                    vX.value = vX.value.trim();
                    vX.value.length < 1 ? WI.push('Provide a username.') : vX.value.length < 3 ? WI.push('Username must be at least 3 characters long.') : /^[0-9a-zA-Z_-]+$/.test(vX.value) || WI.push('Username must only contain letters, numbers, underscores, and dashes.');
                    vX.value.length > 20 && WI.push('Username must not be longer than 20 characters.');
                    WI.length > 0 && vX.classList.add('error');
                    vX.nextSibling.innerHTML = WI.join('<br />');
                };
                vG.onchange = function () {
                    var WI = [];
                    vG.classList.remove('error');
                    vG.value = vG.value.trim();
                    vG.value.length < 1 ? WI.push('Provide a password.') : /^[0-9a-zA-Z_\-!@#$%^&*+=?;:\(\)\[\]`]+$/.test(vG.value) || WI.push('Password must only contain letters, numbers, and symbols.');
                    vG.value.length > 256 && WI.push('Password must not be longer than 256 characters.');
                    WI.length > 0 && vG.classList.add('error');
                    vG.nextSibling.innerHTML = WI.join('<br />');
                    vz.onchange();
                };
                vz.onchange = function () {
                    var WI = [];
                    vz.classList.remove('error');
                    vz.value = vz.value.trim();
                    vz.value != vG.value && WI.push('Passwords do not match.');
                    WI.length > 0 && vz.classList.add('error');
                    vz.nextSibling.innerHTML = WI.join('<br />');
                };
                var vF = false, vq = false;
                function vU() {
                    ;
                    PY || v6 || v7 || (vF = true, vK.innerHTML = '', [
                        vD,
                        vQ
                    ].forEach(function (WI) {
                        ;
                        WI.value = '';
                        WI.nextSibling.innerHTML = '';
                        WI.classList.remove('error');
                    }), vM.classList.add('hide'), PM(true), vO.classList.remove('hide'), W2('log in'), W5('log-in'));
                }
                function vB() {
                    ;
                    PY || v6 || v7 || (vq = true, vC.innerHTML = '', [
                        vX,
                        vG,
                        vz
                    ].forEach(function (WI) {
                        ;
                        WI.value = '';
                        WI.nextSibling.innerHTML = '';
                        WI.classList.remove('error');
                    }), PM(true), vS.classList.add('hide'), vY.classList.remove('hide'), W2('sign up'), W5('sign-up'));
                }
                function e0() {
                    ;
                    return e1.apply(this, arguments);
                }
                function e1() {
                    ;
                    return e1 = v4(v2().mark(function WI() {
                        var WP, WN, WW = arguments;
                        return v2().wrap(function (WD) {
                            ;
                            for (;;) {
                                switch (WD.prev = WD.next) {
                                case 0:
                                    if (WP = WW.length > 0 && void 0 !== WW[0] && WW[0], v6) {
                                        ;
                                        break;
                                    }
                                    if (WN = true, [
                                            vD,
                                            vQ
                                        ].forEach(function (WQ) {
                                            ;
                                            '' != WQ.value ? WQ.classList.contains('error') && (WN = false) : WN = false;
                                        }), vK.innerHTML = '', !WP) {
                                        ;
                                        break;
                                    }
                                    if (!WN) {
                                        ;
                                        break;
                                    }
                                    return WD.next = 9, e8();
                                case 9:
                                    ;
                                    break;
                                case 11:
                                    vF = false, vO.classList.add('hide'), PM(false), W3(), W4();
                                case 16:
                                case 'end':
                                    return WD.stop();
                                }
                            }
                        }, WI);
                    })), e1.apply(this, arguments);
                }
                function e2() {
                    ;
                    return e3.apply(this, arguments);
                }
                function e3() {
                    ;
                    return e3 = v4(v2().mark(function WI() {
                        var WP, WN, WW = arguments;
                        return v2().wrap(function (WD) {
                            ;
                            for (;;) {
                                switch (WD.prev = WD.next) {
                                case 0:
                                    if (WP = WW.length > 0 && void 0 !== WW[0] && WW[0], v6) {
                                        ;
                                        break;
                                    }
                                    if (WN = true, [
                                            vX,
                                            vG,
                                            vz
                                        ].forEach(function (WQ) {
                                            ;
                                            '' != WQ.value ? WQ.classList.contains('error') && (WN = false) : WN = false;
                                        }), vC.innerHTML = '', !WP) {
                                        ;
                                        break;
                                    }
                                    if (!WN) {
                                        ;
                                        break;
                                    }
                                    return WD.next = 9, e6();
                                case 9:
                                    ;
                                    break;
                                case 11:
                                    vq = false, vY.classList.add('hide'), PM(false), W3(), W4();
                                case 16:
                                case 'end':
                                    return WD.stop();
                                }
                            }
                        }, WI);
                    })), e3.apply(this, arguments);
                }
                function e4() {
                    ;
                    return e5.apply(this, arguments);
                }
                function e5() {
                    return e5 = v4(v2().mark(function WI() {
                        var WP, WN;
                        return v2().wrap(function (WW) {
                            ;
                            for (;;) {
                                switch (WW.prev = WW.next) {
                                case 0:
                                    return WP = v8.username, WN = eE, eK(), WW.next = 5, eO('/logout', { 'sessionID': WN }, function (WD) {
                                        ;
                                        IE('Error when logging out', WD);
                                    }, function (WD) {
                                        ;
                                        WD.error ? IE('Error when logging out', WD.error) : IE('Successfully Logged Out', 'Sucessfully logged out of account: '.concat(WP));
                                    });
                                case 5:
                                case 'end':
                                    return WW.stop();
                                }
                            }
                        }, WI);
                    })), e5.apply(this, arguments);
                }
                function e6() {
                    ;
                    return e7.apply(this, arguments);
                }
                function e7() {
                    return e7 = v4(v2().mark(function WI() {
                        ;
                        return v2().wrap(function (WP) {
                            ;
                            for (;;) {
                                switch (WP.prev = WP.next) {
                                case 0:
                                    return vS.classList.remove('hide'), v6 = true, WP.next = 4, eO('/signup', {
                                        'username': vX.value.trim(),
                                        'password': vG.value.trim()
                                    }, function (WN) {
                                        ;
                                        vS.classList.add('hide');
                                        v6 = false;
                                        vC.innerHTML = WN;
                                    }, function (WN) {
                                        ;
                                        vS.classList.add('hide');
                                        v6 = false;
                                        WN.error ? vC.innerHTML = WN.error : (WN.stars = 0, eM(WN), vY.classList.add('hide'), PM(false), W3(), W4(), setTimeout(function () {
                                            var WW = c8.i[1];
                                            gT(1);
                                            L3(WW.name, WW.description, WW.rarity, WW.stars);
                                            eS(WW.stars);
                                        }, 200));
                                    });
                                case 4:
                                case 'end':
                                    return WP.stop();
                                }
                            }
                        }, WI);
                    })), e7.apply(this, arguments);
                }
                function e8() {
                    ;
                    return e9.apply(this, arguments);
                }
                function e9() {
                    ;
                    return e9 = v4(v2().mark(function WI() {
                        ;
                        return v2().wrap(function (WP) {
                            ;
                            for (;;) {
                                switch (WP.prev = WP.next) {
                                case 0:
                                    return vM.classList.remove('hide'), v6 = true, WP.next = 4, eO('/login', {
                                        'username': vD.value.trim(),
                                        'password': vQ.value.trim()
                                    }, function (WN) {
                                        ;
                                        vM.classList.add('hide');
                                        v6 = false;
                                        vK.innerHTML = WN;
                                    }, function (WN) {
                                        ;
                                        vM.classList.add('hide');
                                        v6 = false;
                                        WN.error ? vK.innerHTML = WN.error : (eM(WN), vO.classList.add('hide'), PM(false), W3(), W4());
                                    });
                                case 4:
                                case 'end':
                                    return WP.stop();
                                }
                            }
                        }, WI);
                    })), e9.apply(this, arguments);
                }
                function eO(WI, WP, WN, WW) {
                    ;
                    return eY.apply(this, arguments);
                }
                function eY() {
                    return eY = v4(v2().mark(function WI(WP, WN, WW, WD) {
                        ;
                        return v2().wrap(function (WQ) {
                            ;
                            for (;;) {
                                switch (WQ.prev = WQ.next) {
                                case 0:
                                    return WQ.abrupt('return', new Promise(function (Wk, WX) {
                                        var WG = fetch(v5 + WP, {
                                            'method': 'POST',
                                            'mode': 'cors',
                                            'headers': { 'content-type': 'application/json' },
                                            'body': JSON.stringify(WN)
                                        });
                                        WG.catch(function (WF) {
                                            WW(WF);
                                            Wk();
                                        });
                                        var Wz = WG.then(function (WF) {
                                            ;
                                            return WF.json();
                                        });
                                        Wz.catch(function (WF) {
                                            WW(WF);
                                            Wk();
                                        });
                                        Wz.then(function (WF) {
                                            WD(WF);
                                            Wk();
                                        });
                                    }));
                                case 1:
                                case 'end':
                                    return WQ.stop();
                                }
                            }
                        }, WI);
                    })), eY.apply(this, arguments);
                }
                function eM(WI) {
                    var WP = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    eH(WI.sessionID);
                    v8 = WI;
                    v7 = true;
                    vH.classList.add('hide');
                    vE.classList.remove('hide');
                    vE.firstElementChild.innerHTML = v8.username;
                    vE.children[1].children[1].innerHTML = CP(v8.stars);
                    L1(v8.stars);
                    gH(JSON.parse(CW(WI.achievements)));
                    3 == N6 && mU();
                    eA();
                    WP && yD();
                }
                function eS(WI) {
                    ;
                    v8.stars += WI;
                    vE.children[1].children[1].innerHTML = CP(v8.stars);
                    (function (WP) {
                        ;
                        if (WP) {
                            var WN = Math.max(1, Math.floor(Math.abs(WP) / 15)) * Math.sign(WP);
                            RF.unshift({
                                'value': WP,
                                'lastValue': null,
                                'text': '',
                                'time': 0.25,
                                'valueToUse': WP,
                                'timeUntilUse': 0.3,
                                'step': WN,
                                'size': 1
                            });
                        }
                    }(WI));
                }
                function eK() {
                    ;
                    v8 = void 0;
                    v7 = false;
                    vH.classList.remove('hide');
                    vE.classList.add('hide');
                    eH();
                    3 == N6 && mU();
                    yD();
                    gM();
                }
                function eC() {
                    ;
                    eE && eO('/user', { 'sessionID': eE }, function (WI) {
                        IE('Error when validating account', WI);
                    }, function (WI) {
                        ;
                        WI.error ? IE('Error when validating account', WI.error) : WI.sessionID && eM(WI, false);
                    });
                }
                var eE = WY('sessionID');
                function eH(WI) {
                    ;
                    WI ? (eE = WI, WO('sessionID', WI)) : (eE = void 0, WM('sessionID'));
                }
                var eZ = document.getElementById('notification-popup'), eV = document.getElementById('notification-popup-title'), eT = document.getElementById('notification-popup-text'), ej = document.getElementById('notification-popup-ok-button'), eJ = [], eR = null;
                function eL() {
                    ;
                    eR && (eO('/readnotification', {
                        'sessionID': eE,
                        'id': eR
                    }, function (WP) {
                        ;
                        IE('Error when marking notification as read', WP);
                    }, function (WP) {
                        ;
                        WP.error && IE('Error when marking notification as read', WP.error);
                    }), eR = null);
                    var WI = eJ.shift();
                    WI ? (eV.innerHTML = WI.title + (0 == eJ.length ? '' : ' (+'.concat(eJ.length, ')')), eT.innerHTML = WI.data, eZ.classList.remove('hide'), PM(true), eR = WI.id) : (eZ.classList.add('hide'), PM(false));
                }
                function eA() {
                    eE && eO('/checknotifications', { 'sessionID': eE }, function (WI) {
                        ;
                        console.log('Error when checking notifications', WI);
                    }, function (WI) {
                        ;
                        WI.error ? console.log('Error when checking notifications', WI.error) : (eJ = WI, eL());
                    });
                }
                function eI(WI) {
                    return function (WP) {
                        ;
                        if (Array.isArray(WP)) {
                            return eD(WP);
                        }
                    }(WI) || function (WP) {
                        ;
                        if ('undefined' != typeof Symbol && null != WP[Symbol.iterator] || null != WP['@@iterator']) {
                            return Array.from(WP);
                        }
                    }(WI) || eW(WI) || (function () {
                        ;
                        throw new TypeError('Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }());
                }
                function eP(WI, WP) {
                    var WN = 'undefined' != typeof Symbol && WI[Symbol.iterator] || WI['@@iterator'];
                    if (!WN) {
                        if (Array.isArray(WI) || (WN = eW(WI)) || WP && WI && 'number' == typeof WI.length) {
                            WN && (WI = WN);
                            var WW = 0, WD = function () {
                                };
                            return {
                                's': WD,
                                'n': function () {
                                    ;
                                    return WW >= WI.length ? { 'done': true } : {
                                        'done': false,
                                        'value': WI[WW++]
                                    };
                                },
                                'e': function (WG) {
                                    throw WG;
                                },
                                'f': WD
                            };
                        }
                        throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }
                    var WQ, Wk = true, WX = false;
                    return {
                        's': function () {
                            ;
                            WN = WN.call(WI);
                        },
                        'n': function () {
                            var WG = WN.next();
                            return Wk = WG.done, WG;
                        },
                        'e': function (WG) {
                            WX = true;
                            WQ = WG;
                        },
                        'f': function () {
                            ;
                            try {
                                Wk || null == WN.return || WN.return();
                            } finally {
                                if (WX) {
                                    throw WQ;
                                }
                            }
                        }
                    };
                }
                function eN(WI, WP) {
                    return function (WN) {
                        if (Array.isArray(WN)) {
                            return WN;
                        }
                    }(WI) || function (WN, WW) {
                        var WD = null == WN ? null : 'undefined' != typeof Symbol && WN[Symbol.iterator] || WN['@@iterator'];
                        if (null != WD) {
                            var WQ, Wk, WX, WG, Wz = [], WF = true, Wq = false;
                            try {
                                if (WX = (WD = WD.call(WN)).next, 0 === WW) {
                                    if (Object(WD) !== WD) {
                                        return;
                                    }
                                    WF = false;
                                } else {
                                    for (; !(WF = (WQ = WX.call(WD)).done) && (Wz.push(WQ.value), Wz.length !== WW); WF = true) {
                                        ;
                                    }
                                }
                            } catch (WU) {
                                Wq = true;
                                Wk = WU;
                            } finally {
                                try {
                                    if (!WF && null != WD.return && (WG = WD.return(), Object(WG) !== WG)) {
                                        return;
                                    }
                                } finally {
                                    if (Wq) {
                                        throw Wk;
                                    }
                                }
                            }
                            return Wz;
                        }
                    }(WI, WP) || eW(WI, WP) || (function () {
                        ;
                        throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }());
                }
                function eW(WI, WP) {
                    ;
                    if (WI) {
                        if ('string' == typeof WI) {
                            return eD(WI, WP);
                        }
                        var WN = Object.prototype.toString.call(WI).slice(8, -1);
                        return 'Object' === WN && WI.constructor && (WN = WI.constructor.name), 'Map' === WN || 'Set' === WN ? Array.from(WI) : 'Arguments' === WN || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(WN) ? eD(WI, WP) : void 0;
                    }
                }
                function eD(WI, WP) {
                    ;
                    (null == WP || WP > WI.length) && (WP = WI.length);
                    for (var WN = 0, WW = new Array(WP); WN < WP; WN++) {
                        WW[WN] = WI[WN];
                    }
                    return WW;
                }
                ej.onclick = function () {
                    eL();
                };
                var eQ = document.getElementById('ping'), eX = document.getElementById('server-tick-time'), eG = document.getElementById('client-tick-time'), ez = document.getElementById('fps'), eF = document.getElementById('player-count'), eq = document.getElementById('total-players'), eU = document.getElementById('extra-performance-info'), eB = document.getElementById('position'), V0 = document.getElementById('server-name'), V1 = (document.getElementById('server-speed'), document.getElementById('chat')), V2 = Array.from(document.getElementsByClassName('hud')), V3 = true, V4 = false, V5 = false, V6 = false, V7 = [], V8 = [], V9 = 0, VO = '', VY = '', VM = 0, VS = null, VK = null;
                function VC() {
                    VM = 0;
                }
                var VE = 0, VH = 0, VZ = '';
                function VV() {
                    VE = 0;
                    VZ = '';
                }
                var VT = false;
                function Vj(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    WP && (WI || (VT = true));
                    WI && (VT = false);
                    (V3 = WI) ? V2.forEach(function (WN) {
                        ;
                        ('chat' != WN.id || E9.showChat && VJ) && WN.classList.remove('hidden');
                    }) : V2.forEach(function (WN) {
                        ;
                        WN.classList.add('hidden');
                    });
                }
                var VJ = true;
                function VR(WI) {
                    ;
                    (VJ = WI) && E9.showChat ? V1.classList.remove('hidden') : V1.classList.add('hidden');
                }
                var VL, VA = true, VI = 0, VP = 0, VN = 0, VW = 0, VD = 0, VQ = 0, Vk = false, VX = c8.a[10], Vz = [], VF = 'main', Vq = 'default', VU = 0, VB = 1, T0 = 1, T1 = {};
                function T2(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                    VU = Vq;
                    VB = 0;
                    T0 = WP;
                    Vq = WI;
                }
                function T3(WI, WP) {
                    JN = WI;
                    JD = WP;
                    JW = 0;
                }
                var T4 = Date.now(), T5 = performance.now(), T6 = 16.6666667, T7 = null, T8 = document.getElementById('overlay-canvas'), T9 = document.getElementById('darkness-canvas'), TO = document.getElementById('render-canvas'), TY = document.getElementById('hud-canvas'), TM = document.getElementById('ui-canvas'), TS = document.getElementById('achievement-canvas'), TK = document.getElementById('game-canvas'), TC = document.getElementById('server-select-canvas'), TE = TK.getContext('2d'), TH = T8.getContext('2d'), TZ = T9.getContext('2d'), TV = TO.getContext('2d'), TT = TY.getContext('2d'), Tj = TM.getContext('2d'), TJ = TS.getContext('2d'), TR = TC.getContext('2d'), TL = TE, TA = 0, TI = 0, TP = false;
                TC.addEventListener('mousemove', function (WI) {
                    ;
                    TA = WI.offsetX * j7;
                    TI = WI.offsetY * j7;
                });
                TC.addEventListener('mousedown', function (WI) {
                    ;
                    TA = WI.offsetX * j7;
                    TI = WI.offsetY * j7;
                    TP = true;
                });
                window.addEventListener('click', function (WI) {
                    ;
                    WI.target != TC && (JQ = false);
                });
                var TN = 1, TW = 1, TD = 0, TQ = 0, TX = 0, TG = 0, Tz = 1000, TF = 1, Tq = 0, TU = 0, TB = 1;
                function j0() {
                    ;
                    jj = false;
                    var WI = Date.now();
                    T5 = performance.now();
                    T6 = (WI - T4) / 1000;
                    T4 = WI;
                    var WP, WN, WW = performance.now();
                    TK.style.cursor = 'default';
                    try {
                        !function (f2) {
                            ;
                            for (var f3 = [], f4 = 0, f5 = function () {
                                        var f9 = AM.entries[f6], fO = AC.entries.find(function (fY) {
                                                return fY.id == f9.id;
                                            });
                                        fO ? Object.keys(f9).forEach(function (fY) {
                                            ;
                                            switch (fY) {
                                            case 'formattedScore':
                                                break;
                                            case 'scoreRatio':
                                                fO.scoreRatio = CZ(fO.scoreRatio, f9.scoreRatio, 0.05, f2), isFinite(fO.scoreRatio) || (fO.scoreRatio = f9.scoreRatio);
                                                break;
                                            case 'score':
                                                fO.score = CZ(fO.score, f9.score, 0.05, f2), isFinite(fO.score) || (fO.score = f9.score), fO.formattedScore = WS(fO.score);
                                                break;
                                            case 'fadeTime':
                                                fO.fadeTime = CZ(fO.fadeTime, 1, 0.001, f2);
                                                break;
                                            default:
                                                fO[fY] = f9[fY];
                                            }
                                        }) : fO = C8(f9);
                                        null == fO.index && (fO.index = f4);
                                        fO.index = CZ(fO.index, f4, 0.01, f2);
                                        f4++;
                                        f3.push(fO);
                                    }, f6 = 0; f6 < AM.entries.length; f6++) {
                                f5();
                            }
                            null == AC.length && (AC.length = f4);
                            if (AC.length = CZ(AC.length, f4, 0.01, f2), AC.entries) {
                                for (var f7 = function () {
                                            var f9 = AC.entries[f8];
                                            AM.entries.find(function (fO) {
                                                return fO.id == f9.id;
                                            }) || (f9.fadeTime = CZ(f9.fadeTime, 0, 0.001, f2), f9.fadeTime > 0.1 && f3.push(f9));
                                        }, f8 = 0; f8 < AC.entries.length; f8++) {
                                    f7();
                                }
                            }
                            ;
                            ;
                            ;
                            ;
                        }(T6);
                        (function (f2) {
                            ;
                            LQ = 0;
                            LX = 0;
                            LD.forEach(function (f3, f4) {
                                var f5 = 1 / (Math.pow(function (f6) {
                                    var f7 = TD - f6.x, f8 = TQ - f6.y;
                                    return Math.sqrt(f7 * f7 + f8 * f8);
                                }(f3), 2) / 100000);
                                f5 = Math.min(1, f5);
                                LQ += f5 * f3.power * (f3.time / f3.maxTime) * (1 - 2 * Math.random());
                                LX += f5 * f3.power * (f3.time / f3.maxTime) * (1 - 2 * Math.random());
                                f3.time -= f2;
                                f3.time < 0 && LD.splice(f4, 1);
                            });
                        }(T6));
                        Object.entries(AA).forEach(function (f2) {
                            var f3 = eN(f2, 2), f4 = f3[0], f5 = f3[1];
                            f5.forEach(function (f6, f7) {
                                ;
                                f6.time -= T6;
                                f6.time < 0 && f5.splice(f7, 1);
                                f6.typingFade = Math.min(1, f6.typingFade + T6 / 0.5);
                            });
                            0 == f5.length && delete AA[f4];
                        });
                        Object.entries(AI).forEach(function (f2) {
                            var f3 = eN(f2, 2), f4 = f3[0], f5 = f3[1];
                            f5.time -= T6;
                            f5.time > 0 ? f5.lerping = Math.min(f5.lerping + T6 / 0.5, 1) : f5.lerping = Math.max(f5.lerping - T6 / 0.5, 0);
                            0 == f5.lerping && f5.time < 0 && delete AI[f4];
                        });
                        AP.forEach(function (f2, f3) {
                            ;
                            f2.time -= T6;
                            f2.time < 0 && AP.splice(f3, 1);
                        });
                        f4:
                            if (VA) {
                                var WD = IX();
                                if (WD == {} || null == WD) {
                                    return;
                                }
                                var WQ = WD.tanks, Wk = WD.polygons, WX = WD.bullets, WG = WD.rifts, Wz = WD.mapSize, WF = (WD.tickTime, WD.x), Wq = WD.y;
                                if (LU(T6, WG), null != Wz) {
                                    TW = CZ(TW, 4800, 0.05, T6);
                                    TN = TW / Math.max(TK.width, 1.7777777777777777 * TK.height);
                                    TF = 5 / TN;
                                    null != WF && null != Wq && (TX = CZ(TX, WF, 0.2, T6) + LQ, TG = CZ(TG, Wq, 0.2, T6) + LX, TD = TX, TQ = TG);
                                    Tz = Wz;
                                    sW();
                                    j5(Wk, WQ, WX, WG, null);
                                    TL = TE;
                                } else {
                                    LU(T6);
                                    TW = CZ(TW, 2400 * (VB < 0.5 && VB > 0.4 ? 0.1 : 1), 0.05, T6);
                                    TN = TW / Math.max(TK.height, TK.width);
                                    var WU = WI / 7500, WB = VB;
                                    VB = CZ(VB, 1, 0.1, T6);
                                    WB < 0.5 && VB > 0.5 && Lq();
                                    TX = 200 * Math.cos(WU) + -2000 * (VB < 0.5 ? VB : VB - 1) * T0;
                                    TG = 200 * Math.sin(WU);
                                    TD = TX;
                                    TQ = TG;
                                    var d0 = b6[VB < 0.5 ? VU : Vq] || b6.default;
                                    Tz = d0.dimension.mapSize;
                                    sW(true);
                                    Vz.forEach(function (f2) {
                                        ;
                                        jO(f2) && f2.below && LJ(f2);
                                    });
                                    var d1, d2 = eP(d0.rifts);
                                    try {
                                        for (d2.s(); !(d1 = d2.n()).done;) {
                                            Lj(null, d1.value);
                                        }
                                    } catch (f2) {
                                        d2.e(f2);
                                    } finally {
                                        d2.f();
                                    }
                                    for (var d3 = 0; d3 < d0.polygons.length; d3++) {
                                        LB(d0.polygons[d3]);
                                    }
                                    for (var d4 = 0; d4 < d0.tanks.length; d4++) {
                                        var d5 = d0.tanks[d4];
                                        s0(d5.x, d5.y, d5.size, d5.d, d5.sides, d5.outerSides, d5.outerSize, d5.color, d5.barrels, d5.gadgets, d5.layers, d5.radiant);
                                    }
                                    for (var d6 = 0; d6 < d0.tanks.length; d6++) {
                                        var d7 = d0.tanks[d6];
                                        d7.y *= -1;
                                        d7.lastColor = d7.color;
                                        s2(d7);
                                        d7.y *= -1;
                                    }
                                    Vz.forEach(function (f3) {
                                        ;
                                        jO(f3) && !f3.below && LJ(f3);
                                    });
                                    j5([], [], [], [], null, false);
                                    TL = TE;
                                    var d8 = 3500 * (2 * VB - 1) * T0;
                                    !function (f3, f4, f5, f6) {
                                        ;
                                        TL.beginPath();
                                        TL.arc(f3, f4, f5, 0, 2 * Math.PI, false);
                                        TL.fillStyle = f6;
                                        TL.fill();
                                    }(TK.width / 2 + d8 / TN, TK.height / 2 + 0 / TN, 1100 / TN, '#171717');
                                }
                                if (1 == N6) {
                                    (TL = TH).clearRect(0, 0, T8.width, T8.height);
                                    var d9 = T8.width / 2, dO = T8.height / 2 - 15 * j8, dY = VL.isCelestial ? 10 * j8 : 5 * j8, dM = j8 / 10, dS = J1 / 4, dK = jR(jN(VL.team, VL.team, VL.id, VL.id), VL.isInvulnerable, VL.radiant);
                                    VL.outerSize > 0 && LA(d9, dO, dY + VL.outerSize * dY, '#5F676C', VL.outerSides, dS, false, dM, dY);
                                    s7(d9, dO, dY, dS, VL.barrels, false, dM);
                                    LA(d9, dO, dY, dK, VL.sides, dS, false, dM);
                                    s1(d9, dO, dS, dY, dK, VL.layers, 0, VL.radiant, false, false, dM);
                                    s4(d9, dO, dY, dS, VL.gadgets, dK, 0, VL.radiant, false, false, dM);
                                    TL = TE;
                                } else {
                                    2 == N6 && (function () {
                                        ;
                                        (TL = TR).globalAlpha = 1;
                                        TL.clearRect(0, 0, TC.width, TC.height);
                                        JX = CZ(JX, JQ ? 1 : 0, 0.001, T6);
                                        var f3 = lF[P2] || {}, f4 = null != f3.gamemode ? NI(f3.gamemode) : '#c0c0c0', f5 = null != f3.gamemode ? NP(f3.gamemode) : 'Connecting...', f6 = f3.region || '???', f7 = lU[f3.gamemode] || [];
                                        JI = CZ(JI, 1, 0.01, T6);
                                        JW = CZ(JW, 1, 0.001, T6);
                                        var f8 = jQ(f4.substring(1), JL.substring(1), CZ(0, 1, 0.01, T6));
                                        JL = f8;
                                        var f9 = TC.width, fO = TC.height, fY = f9 / 2, fM = fO / 2, fS = 1 * j8;
                                        sO(fY, fM, f9, fO, fS, f8);
                                        sO(fY, fM + fO / 4, f9, fO / 2, fS, jD(f8));
                                        sY(fY, fM, f9, fO, fS);
                                        TL.lineWidth = 0.4 * j8 * 2;
                                        TL.strokeStyle = 'black';
                                        TL.clip();
                                        TL.stroke();
                                        var fK = TC.matches(':hover'), fC = JR[0].size;
                                        TL.globalAlpha = Math.max(0, Math.min(1, 2 * JI - 1));
                                        JZ(fY + 40 * j8 * (JI - 1) * JP, fM - 2.5 * j8, f5, 4 * j8 * fC, 0.6 * j8);
                                        TL.globalAlpha = Math.max(0, Math.min(1, 2 * (1 - JI) - 1));
                                        JZ(fY + 40 * j8 * JI * JP, fM - 2.5 * j8, JA, 4 * j8 * fC, 0.6 * j8);
                                        TL.globalAlpha = 1;
                                        JZ(fY, fM + 1.6 * j8, 'Region', 2 * j8, 0.6 * j8);
                                        fC = JR[1].size;
                                        TL.globalAlpha = Math.max(0, Math.min(1, 3 * JW - 1.5));
                                        JZ(fY + 10 * j8 * (JW - 1) * JD, fM + 4.4 * j8, f6, 2.5 * j8 * fC, 0.6 * j8);
                                        TL.globalAlpha = Math.max(0, Math.min(1, 3 * (1 - JW) - 1.5));
                                        JZ(fY + 10 * j8 * JW * JD, fM + 4.4 * j8, JN, 2.5 * j8 * fC, 0.6 * j8);
                                        TL.globalAlpha = 1;
                                        var fE = {
                                            'x': TA,
                                            'y': TI
                                        };
                                        if (TC.style.cursor = 'default', !JQ) {
                                            var fH, fZ = eP(JR);
                                            try {
                                                for (fZ.s(); !(fH = fZ.n()).done;) {
                                                    var fV = fH.value, fT = 'gamemode' == fV.id, fj = JV(fT ? f5 : f6, fT ? 4 * j8 : 2.5 * j8, 0.6 * j8), fJ = fj.width, fR = fj.actualBoundingBoxAscent + fj.actualBoundingBoxDescent + 0.6 * j8, fL = AZ(fE, {
                                                            'x': fY - fJ / 2,
                                                            'y': fM + (fT ? -2.5 : 4.4) * j8 - fR / 2 - 0.6 * j8,
                                                            'width': fJ,
                                                            'height': fR
                                                        }) && fK && (fT ? lq.length : f7.length) > 1;
                                                    fV.hovered = fL;
                                                    fV.size = CH(fV.size, fL ? 1.1 : 1, 0.2);
                                                    fL && (TC.style.cursor = 'pointer', TP && (TP = false, JQ = true, Jk = fT));
                                                }
                                            } catch (DS) {
                                                fZ.e(DS);
                                            } finally {
                                                fZ.f();
                                            }
                                        }
                                        var fA, fI = eP(Jj);
                                        try {
                                            for (fI.s(); !(fA = fI.n()).done;) {
                                                var fP = fA.value, fN = fP.sign, fW = {
                                                        'x': fY + 17 * j8 * fN,
                                                        'y': fM - 2.5 * j8,
                                                        'width': 6 * j8,
                                                        'height': 8 * j8
                                                    };
                                                fW.x -= fW.width / 2;
                                                fW.y -= fW.height / 2;
                                                var fD = !JQ && AZ(fE, fW) && fK;
                                                fP.size = CH(fP.size, fD && P0 ? 1.2 : 1, 0.2);
                                                JZ(fY + 17 * j8 * fN, fM - 2.5 * j8, 1 == fN ? '>' : '<', 6 * fP.size * j8, 0.6 * j8, P0 ? '#ffffff' : '#c0c0c0');
                                                fD && P0 && (TC.style.cursor = 'pointer', TP && (TP = false, JP = -fN, JI = 0, JA = f5, fP.size = 1.5, 1 == fN ? NZ() : NH()));
                                            }
                                        } catch (DK) {
                                            fI.e(DK);
                                        } finally {
                                            fI.f();
                                        }
                                        var fQ, fX = eP(JJ);
                                        try {
                                            for (fX.s(); !(fQ = fX.n()).done;) {
                                                var fG = fQ.value, fz = fG.sign, fF = {
                                                        'x': fY + 9 * j8 * fz,
                                                        'y': fM + 4.4 * j8,
                                                        'width': 4 * j8,
                                                        'height': 6 * j8
                                                    };
                                                fF.x -= fF.width / 2;
                                                fF.y -= fF.height / 2;
                                                var fq = !JQ && AZ(fE, fF) && fK;
                                                fG.size = CH(fG.size, fq && P1 ? 1.2 : 1, 0.2);
                                                JZ(fY + 9 * j8 * fz, fM + 4.4 * j8, 1 == fz ? '>' : '<', 4 * fG.size * j8, 0.6 * j8, P1 ? '#ffffff' : '#c0c0c0');
                                                fq && P1 && (TC.style.cursor = 'pointer', TP && (TP = false, JD = -fz, JW = 0, JN = f6, fG.size = 1.5, 1 == fz ? NT() : NV()));
                                            }
                                        } catch (DC) {
                                            fX.e(DC);
                                        } finally {
                                            fX.f();
                                        }
                                        if (JX > 0.05) {
                                            JX < 0.95 && (TL = function (DE, DH) {
                                                ;
                                                return sq.width = DE, sq.height = DH, sU;
                                            }(TC.width, TC.height));
                                            sO(fY, fM, f9, fO, fS, '#000000');
                                            for (var fU = Math.ceil(Math.sqrt(Jk ? lq.length : f7.length)), fB = 0, D0 = 0, D1 = 0; D1 < (Jk ? lq.length : f7.length); D1++) {
                                                var D2 = void 0, D3 = void 0, D4 = void 0;
                                                Jk ? D3 = NI(D2 = lq[D1]) : (D4 = f7[D1], D3 = c8.c[D1]);
                                                var D5 = f9 / fU, D6 = fO / fU, D7 = fY + D5 * (fB + 0.5) - f9 / 2, D8 = fM + D6 * (D0 + 0.5) - fO / 2, D9 = {
                                                        'x': D7,
                                                        'y': D8,
                                                        'width': D5,
                                                        'height': D6
                                                    };
                                                D9.x -= D9.width / 2;
                                                D9.y -= D9.height / 2;
                                                var DO = JQ && AZ(fE, D9) && fK;
                                                if (DO && (TC.style.cursor = 'pointer', TP)) {
                                                    TP = false;
                                                    JQ = false;
                                                    var DY = CM();
                                                    Jk ? D1 != P3 && (JP = -DY, JI = 0, JA = D2, NL(D1, DY)) : D1 != P4 && (JD = -DY, JW = 0, JN = D4, NR(D1, DY));
                                                }
                                                var DM = 0.5 * j8;
                                                sO(D7, D8, D5 - DM, D6 - DM, fS, D3);
                                                sO(D7, D8 + D6 / 4, D5 - DM, D6 / 2 - DM, fS, jD(D3));
                                                sY(D7, D8, D5, D6, fS);
                                                TL.lineWidth = 0.4 * j8 * 2;
                                                TL.strokeStyle = DO ? 'white' : 'black';
                                                TL.save();
                                                TL.clip();
                                                TL.stroke();
                                                TL.restore();
                                                JZ(D7, D8, Jk ? NP(D2) : D4, 5 * j8 / fU, 0.6 * j8);
                                                if (++fB == fU) {
                                                    fB = 0;
                                                    D0++;
                                                }
                                            }
                                            TP && (JQ = false);
                                            if (JX < 0.95) {
                                                (TL = TR).globalAlpha = JX;
                                                TL.drawImage(sq, 0, 0);
                                            }
                                        }
                                        TL = TE;
                                        TP = false;
                                    }());
                                }
                            } else {
                                var dC = IX();
                                if (WN = dC, 0 == Object.keys(WN).length) {
                                    if (TW = CZ(TW, 2400, 0.05, T6), TN = TW / Math.max(TK.height, TK.width), sW(false, false), (jV += T6) > 0.3) {
                                        var dE = TK.width / 2, dH = TK.height / 2;
                                        TL.globalAlpha = Math.min(1.5 * (jV - 0.3), 1);
                                        JZ(dE, dH, 'Joining Server...', 10 * j8, 10);
                                        if (jV > 3) {
                                            TL.globalAlpha = Math.min(1.5 * (jV - 3), 1);
                                            JZ(dE, dH + 8 * j8, 'If this takes too long, there might be a problem with the server or your connection.', 2.5 * j8, 10);
                                        }
                                        if (jV > 15) {
                                            TL.globalAlpha = Math.min(1.5 * (jV - 15), 1);
                                            JZ(dE, dH + 12 * j8, 'Reloading the page may fix the problem.', 2 * j8, 10);
                                        }
                                    }
                                    TL.globalAlpha = 1;
                                    break f4;
                                }
                                var dZ = dC.me, dV = dC.tanks, dT = dC.polygons, dj = dC.bullets, dJ = dC.rifts, dR = dC.mapSize, dL = dC.tickTime, dA = (dC.dt, dC.dimension), dI = dC.cameraSizeMultiplier;
                                if (LU(T6, dJ), VF = dA, !dZ) {
                                    break f4;
                                }
                                if (jZ && (jZ = false, Vj(true), window.addEventListener('mousedown', hN), window.addEventListener('mouseup', hW), window.addEventListener('keydown', hJ), window.addEventListener('keyup', hR), window.addEventListener('mousemove', hM), window.addEventListener('click', hM), window.addEventListener('touchstart', hZ), window.addEventListener('touchmove', hV), window.addEventListener('touchend', hT), window.addEventListener('focus', hG), window.addEventListener('blur', hG)), dL && !Number.isNaN(dL)) {
                                    var dP = AE(VW, dL);
                                    VW = VN;
                                    VN = Math.round(10 * dP) / 10;
                                }
                                VX = jR(jN(dZ.team, dZ.team, dZ.id, dZ.id), dZ.isInvulnerable, dZ.radiant);
                                lz && function (f3) {
                                    ;
                                    if (!EN) {
                                        if (hE -= f3, hS[1].selected && (hE = 0.3), hE > 0) {
                                            hK += 6 * hS[1].x;
                                            hC += 6 * hS[1].y;
                                        } else {
                                            var f4 = CZ(1, 0, 0.001, f3);
                                            hK *= f4;
                                            hC *= f4;
                                        }
                                        var f5 = hK / TN / 2, f6 = hC / TN / 2;
                                        f5 = C7(f5, -window.innerWidth / 2, window.innerWidth / 2);
                                        f6 = C7(f6, -window.innerHeight / 2, window.innerHeight / 2);
                                        l9(hK = f5 * TN * 2, hC = f6 * TN * 2);
                                    }
                                }(T6);
                                hX();
                                h6 && (h1 = WP = h1 + 1.2 * h2 * T6, l1(WP));
                                dZ.d = h1;
                                EP && EN && (EW.barrels && (dZ.barrels = EW.barrels), dZ.oldGadgets = dZ.gadgets, null != ED.gadgets && (dZ.gadgets = ED.gadgets), null != ED.layers && (dZ.layers = ED.layers), null != ED.outerSides && (dZ.outerSides = ED.outerSides), null != ED.outerSize && (dZ.outerSize = ED.outerSize), null != ED.sides && (dZ.sides = ED.sides), null != ED.radiant && (dZ.radiant = ED.radiant), null != ED.team && (dZ.team = ED.team), null != ED.visualTeam && (dZ.team = ED.visualTeam));
                                Tz = dR;
                                E9.staticCamera ? (TX = dZ.x + LQ, TG = dZ.y + LX) : (TX = CZ(TX, dZ.x, 0.000001, T6) + LQ, TG = CZ(TG, dZ.y, 0.000001, T6) + LX);
                                TD = TX;
                                TQ = TG;
                                if (dZ.size >= 0.1) {
                                    TW = CZ(TW, 2400 * (0.8 + dZ.size / 30 * 0.2) * (dI || 1), 0.05, T6);
                                    TN = TW / Math.max(TK.width, 1.7777777777777777 * TK.height);
                                }
                                var dN = dJ.filter(function (f3) {
                                        ;
                                        return 0 == f3.type;
                                    }), dW = 0;
                                if (dN.length > 0) {
                                    var dD = null, dQ = null, dX = null;
                                    dN.forEach(function (f3) {
                                        var f4 = Math.sqrt(Math.pow(f3.x - TX, 2) + Math.pow(f3.y - TG, 2)), f5 = f4 / f3.size;
                                        (null == dX || dD > 10 * dX.size && dQ > f5 || f3.size > dX.size) && (dD = f4, dQ = f5, dX = f3);
                                    });
                                    var dG = Math.min(1000, Math.max(1, Math.pow(dX.size, 1.5))) / 1000, dz = (0.5 + 0.5 * CV(Math.min(1, dD / (15 * dX.size)), 3, true) * dG) / (0.5 + 0.5 * dG), dF = 1 - dz;
                                    TD = CH(TD, dX.x, dF);
                                    TQ = CH(TQ, dX.y, dF);
                                    TB = CZ(TB, dz, 0.05, T6);
                                    dW = 0.35 * Math.min(0.5, 1 - Math.min(1, dD / (25 * dX.size)));
                                } else {
                                    TB = CZ(TB, 1, 0.05, T6);
                                }
                                TN *= TB;
                                Tq = dZ.x - TD;
                                TU = dZ.y - TQ;
                                TF = 5 / TN;
                                sW();
                                j5(dT, dV, dj, dJ, dZ, true, dW);
                                (function (f3, f4) {
                                    ;
                                    lz && E9.showDroneTrajectory && (function () {
                                        ;
                                        Math.abs(hK) + Math.abs(hC) > 2 && sK(TK.width / 2 + hK / TN, TK.height / 2 + hC / TN, 10 / TN, '#000000', false);
                                    }());
                                    E9.minimap && !EN && function (fG, fz) {
                                        var fF, fB = hq[VF];
                                        fF = fB || hU;
                                        var D0 = Tz / fF.trueMapSize, D2 = 85, D3 = 85, D4 = T1.visual.showMinimap, D5 = false;
                                        RN = CZ(RN, D4 ? 0.5 : 0, 0.5, T6);
                                        TL.globalAlpha = RN;
                                        TL.fillStyle = fF.visual.backgroundColor;
                                        TL.fillRect(D2 - 75, D3 - 75, 150, 150);
                                        RN = CZ(RN, D4 ? 0.5 : 0, 0.5, T6), TL.globalAlpha = RN, TL.fillStyle = fF.visual.backgroundColor, TL.fillRect(D2 - 75, D3 - 75, 150, 150);
                                        for (var D6 = 0; D6 < fF.bases.length; D6++) {
                                            var D7 = fF.bases[D6];
                                            TL.fillStyle = jN(0, D7.team, 0, 0);
                                            var D8 = D7.width * fF.trueMapSize, D9 = D7.height * fF.trueMapSize;
                                            TL.fillRect(D2 - (-D7.x / fF.trueMapSize + D8 / 2) * 150 / 2, D3 - (-D7.y / fF.trueMapSize + D9 / 2) * 150 / 2, D8 * 150 / 2, D9 * 150 / 2);
                                        }
                                        fG && D5 && !function (DM, DS, DK) {
                                            var DC = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 6, DE = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 10;
                                            TL.fillStyle = 'black';
                                            TL.translate(DM, DS);
                                            TL.rotate(DK - C9(90));
                                            TL.beginPath();
                                            TL.moveTo(DE / 2, 0);
                                            TL.lineTo(DE / -2, DC / 2);
                                            TL.lineTo(DE / -2, DC / -2);
                                            TL.fill();
                                            TL.setTransform(1, 0, 0, 1, 0, 0);
                                        }(D2 + fG.x / D0 * 150 / 2, D3 + fG.y / D0 * 150 / 2, fG.d);
                                        if (fz) {
                                            TL.globalAlpha = 0.5 * RN;
                                            for (var DO = 0; DO < fz.length; DO++) {
                                                var DY = fz[DO];
                                                if (DY.x > -D0 && DY.x < D0 && DY.y > -D0 && DY.y < D0) {
                                                    RW(D2 + DY.x / D0 * 150 / 2, D3 + DY.y / D0 * 150 / 2, DY);
                                                }
                                            }
                                            TL.globalAlpha = RN;
                                        }
                                        TL.lineCap = 'round';
                                        TL.strokeStyle = 'black';
                                        TL.lineWidth = 5;
                                        TL.strokeRect(D2 - 75, D3 - 75, 150, 150);
                                        TL.globalAlpha = 1;
                                    }(f3, f4);
                                    var f5 = jN(f3.nameColor, f3.nameColor);
                                    RV = CZ(RV, h3 ? 1 : 0, 0.05, T6);
                                    RZ = CZ(RZ, h4 ? 1 : 0, 0.05, T6);
                                    RV > 0.05 && RR(true, f3.isCelestial);
                                    RZ > 0.05 && RR(false, f3.isCelestial);
                                    TL.globalAlpha = 1;
                                    var f6 = TK.width / 2, f7 = TK.height;
                                    if (TL.lineCap = 'round', TL.strokeStyle = 'black', TL.lineWidth = 30, TL.beginPath(), TL.moveTo(-180 + f6, f7 - 20), TL.lineTo(180 + f6, f7 - 20), TL.stroke(), TL.strokeStyle = VX, TL.lineWidth = 20, TL.beginPath(), TL.moveTo(-180 + f6, f7 - 20), TL.lineTo(360 * Math.min(Math.max(f3.score / f3.xpToNextLevel, 0), 1) - 180 + f6, f7 - 20), TL.stroke(), JZ(f6, f7 - 19, WS(f3.score) + ' / ' + WS(f3.xpToNextLevel), 22, 5), E9.showHealthBarOnHUD) {
                                        var f8 = Math.min(Math.max(f3.hp / f3.maxHP, 0), 1), fO = 150;
                                        TL.lineCap = 'round';
                                        TL.strokeStyle = 'black';
                                        TL.lineWidth = 25;
                                        TL.beginPath();
                                        TL.moveTo(-fO + f6, f7 - 50);
                                        TL.lineTo(fO + f6, f7 - 50);
                                        TL.stroke();
                                        TL.strokeStyle = VX;
                                        TL.lineWidth = 15;
                                        TL.beginPath();
                                        TL.moveTo(-fO + f6, f7 - 50);
                                        TL.lineTo(300 * f8 - fO + f6, f7 - 50);
                                        TL.stroke();
                                        JZ(f6, f7 - 48.5, 'Health: '.concat(CC(100 * f8, 1), '%'), 18, 5);
                                        f7 -= 30;
                                    }
                                    var fY = f3.totalScore;
                                    AC && AC.entries[0] && (fY = AC.entries[0].score);
                                    var fM = Math.min(Math.max(f3.totalScore / fY, 0), 1) || 0, fS = E9.showHealthBarOnHUD ? 230 : 270, fK = fS / 2;
                                    TL.lineCap = 'round';
                                    TL.strokeStyle = 'black';
                                    TL.lineWidth = 25;
                                    TL.beginPath();
                                    TL.moveTo(-fK + f6, f7 - 50);
                                    TL.lineTo(fK + f6, f7 - 50);
                                    TL.stroke();
                                    TL.strokeStyle = VX;
                                    TL.lineWidth -= 10;
                                    TL.beginPath();
                                    TL.moveTo(-fK + f6, f7 - 50);
                                    TL.lineTo(fS * fM - fK + f6, f7 - 50);
                                    TL.stroke();
                                    JZ(f6, f7 - 48.5, 'Score: '.concat(WS(f3.totalScore)), 18, 5);
                                    JZ(f6, f7 - 77, 'Level '.concat(f3.level, ' ').concat(f3.className), 18, 10, f5);
                                    E9.showNames && JZ(f6, f7 - 113, f3.name, 50, 10, f5);
                                    EN || ((function () {
                                        ;
                                        J0 = false;
                                        for (var fG = 0; fG < I1.length; fG++) {
                                            if (I1[fG] < 15) {
                                                J0 = true;
                                                break;
                                            }
                                        }
                                        if (lz) {
                                            var fz = false, fF = I6[I6.length - 1];
                                            fF && (fF.offset > 0.2 || fF.showing) && (fz = true);
                                            var fq = I7[I7.length - 1];
                                            fq && (fq.offset > 0.2 || fq.showing) && (fz = true);
                                            JO = CZ(JO, I3 > 0 && J0 && !fz ? 1 : 0, 0.05, T6);
                                        } else {
                                            JO = CZ(JO, I3 > 0 && J0 || HF ? 1 : 0, 0.05, T6);
                                        }
                                        var fU = 400 * JO - 400;
                                        if (lz) {
                                            var fB = TK.width / 2, D2 = 0, D3 = 0;
                                            if (JO > 0.2) {
                                                J4 = CZ(J4, 1, 0.00001, T6);
                                                for (var D4 = Math.min(4, J7.length), D5 = 0; D5 < J7.length; D5++) {
                                                    var D6 = J7[D5];
                                                    J2[D5] = CZ(J2[D5], 1, 0.00001, T6);
                                                    I2[D5] = CZ(I2[D5], I1[D5], 0.1, T6);
                                                    JK(fB + 400 * (1 == D4 ? 0 : D2 / (D4 - 1) - 0.5), 0 + fU + 120 * D3 + 75, D6.name, D6.color, I1[D5], I2[D5], 100 * J2[D5]);
                                                    if (4 == ++D2) {
                                                        D2 = 0;
                                                        D3++;
                                                        D4 = Math.min(4, J7.length - D5 - 1);
                                                    }
                                                }
                                                D3 += D2 > 0 ? 1 : 0;
                                                D2 = 0;
                                                I3 > 0 && J0 && JZ(fB, 0 + fU - 45 + 120 * D3 + 75, 'x'.concat(I3), 30 * J4, 10, '#ffffff');
                                            }
                                        } else {
                                            var D7 = sz(hY);
                                            null != D7 && (TK.style.cursor = 'pointer');
                                            if (JO > 0.2) {
                                                J4 = CZ(J4, 1, 0.00001, T6);
                                                (function (D8, D9) {
                                                    ;
                                                    for (var DO = 0 + D8 + (EP ? 60 : 0), DY = TK.height, DM = 0; DM < 4; DM++) {
                                                        JY(DO + 20, DY - 20 - 32 * DM, c8.n[4 - DM - 1], 4 - DM, c8.k[4 - DM - 1], 1, D9);
                                                    }
                                                    I3 > 0 && J0 && JZ(DO + 295, DY - 20, 'x'.concat(I3), 30 * J4, 10, '#ffffff', 'left');
                                                }(fU, D7));
                                                (function (D8, D9) {
                                                    ;
                                                    for (var DO = TK.width - D8, DY = TK.height, DM = 0; DM < 4; DM++) {
                                                        JY(DO - 20, DY - 20 - 32 * DM, c8.j[4 - DM - 1], 4 - DM + 4, c8.k[4 - DM - 1], -1, D9);
                                                    }
                                                    I3 > 0 && J0 && JZ(DO - 295, DY - 20, ''.concat(I3, 'x'), 30 * J4, 10, '#ffffff', 'right');
                                                }(fU, D7));
                                            }
                                        }
                                    }()), (function () {
                                        var fG;
                                        lz || (fG = sG(hY)) && (TK.style.cursor = 'pointer');
                                        if (lz) {
                                            for (var fF = 0; fF < 2; fF++) {
                                                for (var fq = 0 == fF, fU = TK.width / 2, fB = 0, D0 = fq ? I6 : I7, D1 = 0; D1 < D0.length; D1++) {
                                                    var D2 = D0[D1], D3 = D2.showing;
                                                    if (!fq && D3) {
                                                        var D4 = I6[I6.length - 1];
                                                        D4 && (D4.offset > 0.2 || D4.showing) && (D3 = false);
                                                    }
                                                    D2.offset = CZ(D2.offset, D3 ? 1 : 0, 0.05, T6);
                                                    var D5 = 0, D6 = 0;
                                                    if (D2.offset > 0.2) {
                                                        for (var D7 = Math.min(4, D2.length), D8 = 0; D8 < D2.length; D8++) {
                                                            var D9 = D2[D8];
                                                            JM(fU + 400 * (1 == D7 ? 0 : D5 / (D7 - 1) - 0.5), 0 + (475 * D2.offset - 400) + 120 * D6, c8.c[D8], VX, D9, fq, 1, false, 100);
                                                            if (4 == ++D5) {
                                                                D5 = 0;
                                                                D6++;
                                                                D7 = Math.min(4, D2.length - D8 - 1);
                                                            }
                                                        }
                                                        D6 += D5 > 0 ? 1 : 0;
                                                        D5 = 0;
                                                        JC(fU, 0 + (475 * D2.offset - 400) - 60 + 120 * D6 + 30, 100, '#adadad');
                                                    } else {
                                                        D2.showing || (D2.removed = true);
                                                    }
                                                }
                                            }
                                        } else {
                                            for (var DO = 120, DY = 0; DY < 2; DY++) {
                                                var DM = 0 == DY, DS = void 0;
                                                DS = DM ? 0 : TK.width;
                                                for (var DK = TK.height, DC = DM ? I6 : I7, DE = 0; DE < DC.length; DE++) {
                                                    var DH = DC[DE];
                                                    DH.offset = CZ(DH.offset, DH.showing ? 1 : 0, 0.05, T6);
                                                    var DZ = 0, DV = 0;
                                                    if (DH.offset > 0.2) {
                                                        for (var DT = 0; DT < DH.length; DT++) {
                                                            var Dj = DH[DT], DJ = void 0;
                                                            DJ = DM ? DS + 475 * DH.offset - 400 + 120 * DZ : DS - (475 * DH.offset - 400) - 120 * DZ;
                                                            var DR = DK - 200 - 120 * DV, DL = fG.weapon == DM && fG.set == DE && fG.i == DT;
                                                            Dj.lerping = CZ(Dj.lerping, DL ? 1 : 0, 0.00001, T6);
                                                            JM(DJ, DR, jk(c8.c[DT], Math.floor(60 * Dj.lerping)), VX, Dj, DM, 1, false, 100 + 20 * Dj.lerping);
                                                            if (3 == ++DZ) {
                                                                DZ = 0;
                                                                DV++;
                                                            }
                                                        }
                                                        DV += DZ > 0 ? 1 : 0;
                                                        DZ = 0;
                                                        var DA = void 0;
                                                        DA = DM ? DS + 475 * DH.offset - 400 + 120 * DZ : DS - (475 * DH.offset - 400) - 120 * DZ;
                                                        var DI = DK - 200 - 120 * DV + 30, DP = fG.weapon == DM && fG.set == DE && -1 == fG.i;
                                                        DH.ignoreButton.lerping = CZ(DH.ignoreButton.lerping, DP ? 1 : 0, 0.00001, T6);
                                                        var DN = jk('#adadad', Math.floor(60 * DH.ignoreButton.lerping));
                                                        JC(DA, DI, 100 + 20 * DH.ignoreButton.lerping, DN);
                                                    } else {
                                                        DH.showing || (DH.removed = true);
                                                    }
                                                }
                                            }
                                        }
                                    }()), function (fG) {
                                        var fz = TK.width;
                                        if (JZ(fz - 120, 25, 'LEADERBOARD', 30, 10), AC) {
                                            for (var fq = Math.max(AC.length, 5), fU = 200 / fq, fB = fz - 120, D0 = 35 + 150 / fq, D1 = 0; D1 < AC.entries.length; D1++) {
                                                var D2 = AC.entries[D1], D3 = jR((1 == D2.type ? c8.c[D2.color] : null) || jN(fG.team, D2.team, fG.id, D2.id), false, D2.radiant), D4 = jN(D2.nameColor, D2.nameColor), D5 = D0 + fU * D2.index, D6 = fB + 300 * (1 - D2.fadeTime), D7 = 200, D8 = 150 / fq, D9 = D2.scoreRatio * 200;
                                                if (AC.showPlayers) {
                                                    var DO = D2.size / fq, DY = J1 / 10, DM = D6 - 100 - 150 / fq, DS = 0.2;
                                                    D2.outerSize > 0 && LA(DM, D5, DO + D2.outerSize * DO, '#5F676C', D2.outerSides, DY, false, 0.2, DO);
                                                    1 == !D2.type && s7(DM, D5, DO, DY, D2.barrels, false, 0.2);
                                                    LA(DM, D5, DO, D3, D2.sides, DY, false, 0.2);
                                                    if (1 == !D2.type) {
                                                        s1(DM, D5, DY, DO, D3, D2.layers, 0, D2.radiant, false, false, 0.2);
                                                        s4(DM, D5, DO, DY, D2.gadgets, D3, 0, D2.radiant, false, false, 0.2);
                                                    }
                                                }
                                                TL.lineCap = 'round';
                                                TL.strokeStyle = 'black';
                                                TL.lineWidth = D8;
                                                TL.beginPath();
                                                TL.moveTo(D6 - 100, D5);
                                                TL.lineTo(D6 + 100, D5);
                                                TL.stroke();
                                                TL.lineWidth = D8 - 50 / fq;
                                                TL.strokeStyle = D3;
                                                TL.beginPath();
                                                TL.moveTo(D6 - 100, D5);
                                                TL.lineTo(D6 - 100 + D9, D5);
                                                TL.stroke();
                                                JZ(D6, D5 + 1, AC.showPlayers ? E9.showNames ? ''.concat(D2.name.slice(0, 3 * fq)).concat('' != D2.name ? ' - ' : '').concat(D2.formattedScore) : ''.concat(D2.formattedScore) : D2.name.slice(0, 3 * fq), Math.min(120 / fq, 20), 25 / fq, D4);
                                            }
                                        }
                                    }(f3));
                                    !(function () {
                                        ;
                                        for (var fG = TK.width / 2, fF = 0, fq = 0; fq < AP.length; fq++) {
                                            var fU = AP[fq], fB = jq(fU.time, fU.maxTime);
                                            JH(fG, 20 + fF, fU.message, -1, 25, 0, true, fB);
                                            fF += fB * (fU.message.height + 5.5);
                                        }
                                        TL.globalAlpha = 1;
                                    }());
                                    var fC = 0;
                                    if ((VM -= T6) > 0 && VO) {
                                        f7 = 0;
                                        var fE = VM > 2, fH = CV(function (fG) {
                                                var fF = 1, fq = 20 - fG;
                                                return fq < 1 ? fF = fq / 1 : fq > 18 && (fF = 1 - (fq - 18) / 2), Math.max(Math.min(fF, 1), 0);
                                            }(VM), 2, true), fZ = fE ? fH : 2 - fH, fV = CV(Math.min(1, 1.15 * fH), 2, true);
                                        fC = fV;
                                        null == VS && (VS = JV(VO, 60, 10).width);
                                        TL.globalAlpha = fV;
                                        var fT, fj = eP(JT);
                                        try {
                                            for (fj.s(); !(fT = fj.n()).done;) {
                                                var fJ = fT.value;
                                                JZ(f6 + (VS / 2 - 20 + 70 * fZ) * fJ, f7 - 50 + 130 * fV, '-', 60, 10);
                                            }
                                        } catch (fG) {
                                            fj.e(fG);
                                        } finally {
                                            fj.f();
                                        }
                                        if (JZ(f6, f7 - 50 + 130 * fV, VO, 60, 10), VY) {
                                            null == VK && (VK = JV(VY, 30, 10).width);
                                            var fR, fL = eP(JT);
                                            try {
                                                for (fL.s(); !(fR = fL.n()).done;) {
                                                    var fA = fR.value;
                                                    JZ(f6 + (VK / 2 - 20 + 70 * fZ) * fA, f7 - 30 + 170 * fV, '-', 30, 10);
                                                }
                                            } catch (fz) {
                                                fL.e(fz);
                                            } finally {
                                                fL.f();
                                            }
                                            JZ(f6, f7 - 30 + 170 * fV, VY, 30, 10);
                                        }
                                    }
                                    if ((VE -= T6) > 0) {
                                        f7 = 0;
                                        var fI = function (fF, fq) {
                                            var fU = 1, fB = fq - fF;
                                            return fB < 2 ? fU = fB / 2 : fB > fq - 0.5 && (fU = 1 - (fB - (fq - 0.5)) / 0.5), Math.max(Math.min(fU, 1), 0);
                                        }(VE, VH);
                                        TL.globalAlpha = fI;
                                        JZ(f6, f7 + 100 + (VY ? 100 : 40) * fC, VZ, 35, 10);
                                        var fP = 0, fN = 0;
                                        if (VE < 20) {
                                            var fW = CV((20 - VE) / 20, 1.3, true);
                                            fP = (2 * Math.random() - 1) * fW;
                                            fN = (2 * Math.random() - 1) * fW;
                                        }
                                        var fD = 1, fQ = 0;
                                        VE < 15 && (fD = 1 + 0.7 * (fQ = (VE - Math.floor(VE)) * CV((15 - VE) / 15, 2, true)));
                                        var fX = jQ('ff0000', 'ffffff', fQ);
                                        JZ(f6 + 6 * fP, f7 + 6 * fN + 160 + (VY ? 100 : 40) * fC, Math.floor(VE), 60 * fD, 10, fX);
                                    }
                                    lz && !EN && (function () {
                                        var fF, fq = TK.height, fU = eP(hS);
                                        try {
                                            for (fU.s(); !(fF = fU.n()).done;) {
                                                var fB = fF.value;
                                                RJ(fB, (fB.align * E5 == 1 ? 0 : TK.width) + fB.align * E5 * +E9.joystickOffset, fq - +E9.joystickOffset, E9.joystickSize);
                                            }
                                        } catch (D0) {
                                            fU.e(D0);
                                        } finally {
                                            fU.f();
                                        }
                                    }());
                                    !(function () {
                                        ;
                                        if (RO = CZ(RO, RM, 0.000001, T6), RY = RO > 0.005) {
                                            var fq = TK.width / 2, fU = TK.height / 2, D0 = sF(hY);
                                            null != D0 && (TK.style.cursor = 'pointer');
                                            TL.globalAlpha = 1;
                                            JZ(fq, CH(-100, fU - 250 - 110, RO), 'Quick Chat', 50, 10);
                                            for (var D1 = R9.length, D2 = 2 * Math.PI / D1, D3 = 25, D4 = 0.3 * D3, D5 = RO, D6 = 0; D6 < D1; D6++) {
                                                var D7 = R9[D6], D8 = D6 * D2 + Math.PI / 2;
                                                D7.lerping = CZ(D7.lerping, D0 && D6 == D0.value && 0 == D0.type && !lz ? 1 : 0, 0.00001, T6);
                                                D7.buttonLerping = CZ(D7.buttonLerping, D0 && D6 == D0.value && 1 == D0.type && !lz ? 1 : 0, 0.00001, T6);
                                                var D9 = (1 + 0.1 * D7.lerping) * RO, DO = 250 * D9, DY = D8 + D2 / 2, DM = CV(1 - Math.min(1, 1.5 * RO), 2) * 250 * 0.1, DS = fq + Math.cos(DY) * DM, DK = fU + Math.sin(DY) * DM, DC = !D7.add && !lz && D6 < 9 ? D6 + 1 : null;
                                                if (TL.fillStyle = D7.lerping < 0.05 && !D7.add ? '#000000' : jz('#000000', '#ffffff', 0.25 * D7.lerping + (D7.add ? 0.15 : 0)), TL.strokeStyle = '#000000', TL.lineJoin = 'round', TL.lineWidth = 5, TL.globalAlpha = 0.5 * D5, TL.beginPath(), DC && TL.arc(DS, DK, 0.35 * DO, D8, D8 + D2, false), TL.moveTo(DS, DK), TL.arc(DS, DK, DO, D8, D8 + D2, false), TL.lineTo(DS, DK), TL.fill(), TL.globalAlpha = 1 * D5, TL.stroke(), D7.add) {
                                                    var DE = Math.min(D2 * DO / 2, DO / 3.5), DH = DO - DE;
                                                    sS(DS + Math.cos(D8 + D2 / 2) * DH, DK + Math.sin(D8 + D2 / 2) * DH, DE, 0.25 * DE, 0);
                                                    TL.fillStyle = '#000000';
                                                    TL.strokeStyle = '#000000';
                                                    TL.lineWidth = 5;
                                                    TL.globalAlpha = 0.5 * D5;
                                                    TL.fill();
                                                    TL.globalAlpha = 1 * D5;
                                                    TL.stroke();
                                                } else {
                                                    if (!D7.rect) {
                                                        for (var DZ = Cz(DS, DK, 250, D8, D8 + D2, 250 / (8 + 2 * D1), 250 * (DC ? 0.35 : 0)), DV = JV('...', D3).width, DT = 0.9 * DZ.width, Dj = '', DJ = void 0, DR = 0; DR < D7.message.length; DR++) {
                                                            var DL = D7.message[DR];
                                                            if ((DJ = JV(Dj + DL, D3).width) / (D3 / D4) > DT - DV) {
                                                                Dj = Dj.trim() + '...';
                                                                break;
                                                            }
                                                            Dj += DL;
                                                        }
                                                        D7.textSize = D3 / Math.max(DJ / DT, 1);
                                                        D7.rotation = Math.atan2(DZ.y - DK, DZ.x - DS);
                                                        D7.distance = Math.sqrt(Math.pow(DZ.x - DS, 2) + Math.pow(DZ.y - DK, 2)) / 250;
                                                        D7.rect = DZ;
                                                        D7.text = Dj;
                                                    }
                                                    TL.globalAlpha = 1 * D5;
                                                    JZ(DS + Math.cos(D7.rotation) * D7.distance * DO, DK + Math.sin(D7.rotation) * D7.distance * DO, D7.text, D7.textSize * D9);
                                                }
                                                if (DC) {
                                                    var DA = Math.min(D2 * DO / 1.5, DO / 2.5), DI = 0.35 * DO - Math.min(DA, DO / 5) * CH(0.3, 0.7, C7(2.2 * D2 - 1, 0, 1));
                                                    JZ(DS + Math.cos(D8 + D2 / 2) * DI, DK + Math.sin(D8 + D2 / 2) * DI + 0.01 * DA, DC, 0.3 * DA);
                                                }
                                                if (!D7.add) {
                                                    var DP = Math.min(DO * D2 * 0.45, 0.08 * DO), DN = 1 + 0.4 * D7.buttonLerping, DW = CH(DO, DO / D9 * RO, 0.5) + 2 * DP, DD = DS + Math.cos(D8 + D2 / 2) * DW, DQ = DK + Math.sin(D8 + D2 / 2) * DW;
                                                    TL.beginPath();
                                                    TL.arc(DD, DQ, DP * DN, 0, 2 * Math.PI, false);
                                                    TL.strokeStyle = '#000000';
                                                    TL.fillStyle = D7.buttonLerping < 0.05 ? '#000000' : jz('#000000', '#ffffff', 0.25 * D7.buttonLerping);
                                                    TL.lineJoin = 'round';
                                                    TL.lineWidth = 5;
                                                    TL.globalAlpha = 0.5 * D5;
                                                    TL.fill();
                                                    TL.globalAlpha = 1 * D5;
                                                    TL.stroke();
                                                    for (var DX = DP * DN / 3 / 2, DG = 0; DG < 3; DG++) {
                                                        var Dz = DD + (DG / 2 - 0.5) * DP * DN, DF = DQ;
                                                        TL.beginPath();
                                                        TL.arc(Dz, DF, DX, 0, 2 * Math.PI, false);
                                                        TL.fillStyle = '#ffffff';
                                                        TL.lineJoin = 'round';
                                                        TL.lineWidth = 5;
                                                        TL.globalAlpha = 0.5 * D5;
                                                        TL.fill();
                                                    }
                                                }
                                            }
                                        }
                                    }());
                                }(dZ, dJ));
                                EP && EN && dZ.oldGadgets && (dZ.gadgets = dZ.oldGadgets, delete dZ.oldGadgets);
                                TL = TE;
                                var dq = Math.round(10 * (performance.now() - WW)) / 10;
                                Number.isNaN(dq) || (dq = AE(VQ, dq), VQ = VD, VD = Math.round(10 * dq) / 10);
                                j3(T6);
                                var dU = VI < 100 ? VI.toFixed(1) : VI.toFixed(0);
                                eQ.textContent = 'Ping: '.concat(dU, 'ms');
                                eX.textContent = 'Server Tick Time: '.concat(VN, 'ms');
                                eG.textContent = 'Client Tick Time: '.concat(VD, 'ms');
                                ez.textContent = 'FPS: '.concat(j2);
                                eF.textContent = 'Player Count: '.concat(AC ? AC.showPlayers ? AC.playerCount : '???' : 0);
                                eq.textContent = 'Global Player Count: '.concat(AC && AC.showPlayers ? Math.max(A9.players + 1, AC.playerCount) : A9.players + 1);
                                eU.textContent = 'Extra Performance Info: T:'.concat(dV.length + 1, ' S:').concat(dT.length, ' B:').concat(dj.length, ' P:').concat(Vz.length, '/').concat(E6);
                                eB.textContent = 'Position: '.concat(CK(dZ.x, 2), ', ').concat(CK(-dZ.y, 2));
                                eQ.style.color = VI > 250 ? VI > 500 ? 'red' : 'yellow' : 'white';
                                eX.style.color = VN > 8 ? VN > 33.333333333333336 ? 'red' : 'yellow' : 'white';
                                eG.style.color = VD > 5 ? VD > 16.66 ? 'red' : 'yellow' : 'white';
                                ez.style.color = j2 < 50 ? j2 < 15 ? 'red' : 'yellow' : 'white';
                                Vk = false;
                            }
                        (TL = TJ).clearRect(0, 0, TS.width, TS.height);
                        (function () {
                            ;
                            RF.length > 0 ? Rq = 0.5 : Rq -= T6;
                            if ((RG = Math.min(1, Math.max(0, RG + (Rq > 0 ? 1 : -1) * T6))) != Rz) {
                                Rz = RG;
                                0 == RG ? vZ.classList.remove('hide') : vZ.classList.add('hide');
                            }
                            if (0 == Rz) {
                                return;
                            }
                            RX = CZ(RX, 1, 0.00001, T6);
                            RB = RU;
                            (RU = CZ(RU, 0, 0.1, T6)) != RB && (L0 = RU < 0 ? jQ(c8.c[1].substring(1), 'ffffff', Math.abs(RU)) : jQ('#FFE449'.substring(1), 'ffffff', RU));
                            if (RD != RQ) {
                                RQ = RD;
                                Rk = CP(RD);
                            }
                            var f3 = 2 * j8, f4 = TS.width, f5 = 1.5 * f3;
                            switch (N6) {
                            case 2:
                                f5 += 9 * f3;
                                break;
                            case 0:
                                f3 = 20 / j6 * j7, f5 = 320 / j6 * j7;
                            }
                            var f6 = function (fS) {
                                var fK = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                                fK && (fS = 1 - fS);
                                var fE = 2.70158 * fS * fS * fS - 1.70158 * fS * fS;
                                return fK ? 1 - fE : fE;
                            }(1 - RG) * f3 * 9;
                            sT(f4 - 7 * f3 + f6, f5, f3, f3 / 2, 5, '#FFE449', '#000000', 0.1 * f3, 0);
                            TL.setTransform(1, 0, 0, 1, 0, 0);
                            JZ(f4 - 5.9 * f3 + f6, f5 + 0.2 * f3, Rk, 1.5 * f3 * RX, 0.2 * f3, L0, 'left');
                            for (var f7 = 0, f8 = RF.length - 1; f8 >= 0; f8--) {
                                Rq = 2;
                                var f9 = RF[f8];
                                if (f9.size = CZ(f9.size, 1, 0.00001, T6), 0 == f9.valueToUse) {
                                    f9.time -= 0.5 * T6;
                                } else {
                                    if (RF.length == f8 + 1 && 1 == RG && (f9.timeUntilUse -= T6, f9.timeUntilUse <= 0)) {
                                        f9.timeUntilUse += 0.15;
                                        var fO = 1 == Math.sign(f9.step) ? Math.min(f9.valueToUse, f9.step) : Math.max(f9.valueToUse, f9.step);
                                        f9.valueToUse -= fO;
                                        RX = 1.1;
                                        RU = Math.sign(f9.step);
                                        f9.size = 0.9;
                                        RD += fO;
                                    }
                                }
                                if (f9.valueToUse != f9.lastValue) {
                                    f9.lastValue = f9.valueToUse;
                                    f9.text = (-1 != Math.sign(f9.value) ? '+' : '-') + CP(Math.abs(f9.valueToUse));
                                }
                                var fY = RF[f8].time, fM = CV(1 - 4 * fY, 3, false);
                                fY < 0 && (RF.length = f8);
                                JZ(f4 - (5.9 - 10 * fM) * f3 + f6, f5 + (1.8 + 1.5 * f7) * f3, f9.text, 1.25 * f3 * f9.size, 0.2 * f3, 1 == Math.sign(f9.value) ? '#ffffff' : c8.c[1], 'left');
                                f7 += 1 - fM;
                            }
                        }());
                        (function () {
                            ;
                            for (var f3 = j8 / 6, f4 = TS.width / 2, f5 = 0 + 95 * f3, f6 = 0; f6 < L2.length; f6++) {
                                var f7 = L2[f6];
                                if (0 != f6) {
                                    break;
                                }
                                f7.time -= 0.2 * T6;
                                var f8 = f7.time;
                                if (f8 < 0) {
                                    L2.splice(f6, 1);
                                    break;
                                }
                                var f9 = CV(1 - jB(f8, 0.1), 3, false);
                                if (2 == N6) {
                                    var fO = 320 * f3, fY = 120 * f3, fM = 400 * f3;
                                    TL.globalAlpha = 0.75;
                                    sO(f4, f5 - 170 * f9 * f3 - fM / 2, fO, fY + fM, 5 * f3, '#000000');
                                    TL.globalAlpha = 1;
                                }
                                L4(f4, f5 - 170 * f9 * f3, f7.object, f3, true);
                                JZ(f4, f5 - 70 * f3 - 300 * f9 * f3, 'New Achievement!'.concat(1 == L2.length ? '' : ' (+'.concat(L2.length - 1, ')')), 30 * f3 * (2 == N6 && 1 != L2.length ? 0.8 : 1), 5 * f3);
                            }
                        }());
                        TL = TE;
                    } catch (f3) {
                        console.error(f3);
                    } finally {
                        if (V4) {
                            if (0 == V7.length) {
                                rB();
                            } else {
                                var dB = V7[V7.length - 1], f0 = rF.some(function (f4) {
                                        ;
                                        return f4.type == dB.type && f4.index == dB.index;
                                    });
                                !Cq(V7, V8) || 0 == rF.length || f0 && V5 ? V9 = 0 : V9++;
                                var f1 = V7[V7.length - 1 - V9];
                                f1 ? rU(f1.type, f1.index, V5, f1.stack) : rB();
                            }
                            V4 = false;
                        }
                        V6 = false;
                        setTimeout(j1, 1);
                    }
                }
                function j1() {
                    requestAnimationFrame(function () {
                        j0();
                    });
                }
                var j2 = 60, j3 = (0, c7.throttle)(500, function (WI) {
                        ;
                        j2 = Math.round(1 / WI);
                    });
                function j4() {
                    ;
                    eQ.classList.toggle('hidden', !E9.showPing);
                    eX.classList.toggle('hidden', !E9.showTickTime);
                    eG.classList.toggle('hidden', !E9.showTickTime);
                    ez.classList.toggle('hidden', !E9.showFPS);
                    eF.classList.toggle('hidden', !E9.showPlayerCount);
                    eq.classList.toggle('hidden', !E9.showGlobalPlayerCount);
                    eU.classList.toggle('hidden', !E9.showExtraPerformanceInfo);
                    eB.classList.toggle('hidden', !E9.showPosition);
                    V0.classList.toggle('hidden', !E9.showServerName);
                }
                function j5(WI, WP, WN, WW, WD) {
                    var WQ = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5], Wk = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0;
                    if (T7 = WD, J1 += 1.2 * T6, WQ && (Vz.forEach(function (dA) {
                            ;
                            jO(dA) && dA.below && LJ(dA);
                        }), sQ(), WW.forEach(function (dA) {
                            jO(dA, 12) && Lj(WD, dA);
                        }), WP.forEach(function (dA) {
                            LT(WD, dA);
                        }), WI.forEach(function (dA) {
                            ;
                            LT(WD, dA, c8.c[dA.color] || (WD ? jN(WD.team, dA.team, WD.id, dA.id) : jN(dA.team, dA.team, 0, 0)));
                        }), WN.forEach(function (dA) {
                            LT(WD, dA);
                        }), WD && LT(WD, WD), WI.forEach(function (dA) {
                            ;
                            LZ(dA, c8.c[dA.color] || (WD ? jN(WD.team, dA.team, WD.id, dA.id) : jN(dA.team, dA.team, 0, 0)), dA.sides, false);
                        }), WD && LH(WD, WD), WP.forEach(function (dA) {
                            LH(WD, dA);
                        }), WN.forEach(function (dA) {
                            LV(WD, dA);
                        }), WN.forEach(function (dA) {
                            s2(dA);
                        }), WD && s2(WD), WP.forEach(function (dA) {
                            s2(dA);
                        }), Vz.forEach(function (dA) {
                            ;
                            jO(dA) && !dA.below && LJ(dA);
                        })), TL = TZ, T1.visual.darkness) {
                        var WX = TK.width / 2 - TD / TN, WG = TK.height / 2 - TQ / TN;
                        TL.globalAlpha = T1.visual.darkness.alpha || 0.9;
                        TL.fillStyle = T1.visual.darkness.color;
                        TL.clearRect(0, 0, T9.width, T9.height);
                        TL.fillRect(0, 0, T9.width, T9.height);
                        TL.globalAlpha = 1;
                        var Wz = T1.visual.darkness.intensity * (1 + 0.1 * Math.sin(performance.now() / 1000));
                        if (WD) {
                            sP(WX + WD.x / TN, WG + WD.y / TN, (WD.size + 150) / Wz / TN, 1);
                            sP(WX + WD.x / TN, WG + WD.y / TN, 1.5 * (WD.size + 150) / Wz / TN, 0.5);
                            sJ(WX, WG, Wz, WD);
                            WD.radiant > 0 && sR(WX, WG, Wz, WD);
                            for (var WF = 0; WF < WD.barrels.length; WF++) {
                                var Wq = WD.barrels[WF], WU = Wq.distance + 2 * Wq.length, WB = WD.d + Wq.rot, d0 = WD.x + (WU * Math.sin(WB) + Wq.offset * Math.sin(WB + s8)) * WD.size, d1 = WD.y - (Wq.offset * Math.cos(WB + s8) + WU * Math.cos(WB)) * WD.size;
                                sP(WX + d0 / TN, WG + d1 / TN, 8 * WD.size * Wq.width / Wz / TN, 0.5);
                                sA(WX + d0 / TN, WG + d1 / TN, WB, 8 * WD.size * Wq.length / Wz / TN, 8 * WD.size * Wq.width / Wz / TN, 2 * WD.size * Wq.width / Wz / TN, 1);
                            }
                        }
                        WP.forEach(function (dA) {
                            ;
                            dA.gadgets && sJ(WX, WG, Wz, dA);
                            dA.radiant > 0 && sR(WX, WG, Wz, dA);
                        });
                        WI.forEach(function (dA) {
                            ;
                            dA.radiant > 0 && sR(WX, WG, Wz, dA);
                        });
                        Vz.forEach(function (dA) {
                            ;
                            jO(dA) && dA.radiant > 0 && sL(WX, WG, Wz, dA);
                        });
                        WN.forEach(function (dA) {
                            ;
                            dA.gadgets && sJ(WX, WG, Wz, dA);
                            dA.radiant > 0 && sR(WX, WG, Wz, dA);
                        });
                        WW.forEach(function (dA) {
                            ;
                            if (jO(dA, 12)) {
                                switch (dA.type) {
                                case 0:
                                    var dI = (dQ = performance.now() / 500) + 0.5, dP = 10 - 9 * (dW = dQ - Math.floor(dQ)), dN = 10 - 9 * (dD = dI - Math.floor(dI));
                                    sP(WX + dA.x / TN, WG + dA.y / TN, dA.size * dP / TN, 0.3 * Math.min(2 * dW, 1)), sP(WX + dA.x / TN, WG + dA.y / TN, dA.size * dN / TN, 0.3 * Math.min(2 * dD, 1));
                                    break;
                                case 1:
                                    switch (dA.subtype) {
                                    case 0:
                                        dI = (dQ = performance.now() / 2500) + 0.5, dP = 1 + 3 * (dW = dQ - Math.floor(dQ)), dN = 1 + 3 * (dD = dI - Math.floor(dI)), (sP(WX + dA.x / TN, WG + dA.y / TN, dA.size * dP / TN, 0.2 * Math.min(2 * (1 - dW), 1)), sP(WX + dA.x / TN, WG + dA.y / TN, dA.size * dN / TN, 0.2 * Math.min(2 * (1 - dD), 1)));
                                        break;
                                    case 1:
                                        var dW, dD;
                                        dI = (dQ = performance.now() / -1250) + 0.5, dP = 1 + 5 * (dW = dQ - Math.floor(dQ)), dN = 1 + 5 * (dD = dI - Math.floor(dI)), (sP(WX + dA.x / TN, WG + dA.y / TN, dA.size * dP / TN, 0.2 * Math.min(2 * (1 - dW), 1)), sP(WX + dA.x / TN, WG + dA.y / TN, dA.size * dN / TN, 0.2 * Math.min(2 * (1 - dD), 1)));
                                    }
                                    break;
                                case 2:
                                    var dQ, dX = (dQ = performance.now()) * dA.sign / 1000;
                                    sI(WX + dA.x / TN, WG + dA.y / TN, dX, 2 * dA.size / Wz / TN, 4, 1), TL.globalAlpha = 0.5, sI(WX + dA.x / TN, WG + dA.y / TN, dX, 3 * dA.size / Wz / TN, 4, 0.5);
                                }
                            }
                        });
                        var d2, d3 = eP(T1.gates);
                        try {
                            for (d3.s(); !(d2 = d3.n()).done;) {
                                var d4 = d2.value, d5 = {
                                        'x': d4.x * Tz,
                                        'y': d4.y * Tz,
                                        'size': d4.size / 2 * Tz
                                    }, d6 = c8.m[d4.type];
                                if (d6) {
                                    var d7 = d6[d4.open ? 'open' : 'closed'] || d6.open;
                                    if (jO(d5, 3)) {
                                        var d8 = performance.now(), d9 = d7.auras, dO = d7.radiant;
                                        if (!dO) {
                                            continue;
                                        }
                                        for (var dY = 0; dY < d9.length; dY++) {
                                            var dM = d9[dY];
                                            if (!dM[3]) {
                                                var dS = d8 / 2500 * dM[1], dK = dS + 0.5, dC = dM[0], dE = dM[2], dH = 0 == dC ? 2 : 1, dZ = dS - Math.floor(dS), dV = dK - Math.floor(dK), dT = (0.5 + dZ * dE) * dH, dj = (0.5 + dV * dE) * dH, dJ = 30 * dT;
                                                sN(WX + (d5.x - Math.sin(-d4.rot - s8) * dJ * dC) / TN, WG + (d5.y - Math.cos(-d4.rot - s8) * dJ * dC) / TN, dJ / TN, d5.size / TN, d4.rot, 0.2 * Math.min(2 * (1 - dZ), 1));
                                                var dR = 30 * dj;
                                                sN(WX + (d5.x - Math.sin(-d4.rot - s8) * dR * dC) / TN, WG + (d5.y - Math.cos(-d4.rot - s8) * dR * dC) / TN, dR / TN, d5.size / TN, d4.rot, 0.2 * Math.min(2 * (1 - dV), 1));
                                            }
                                        }
                                        sN(WX + d5.x / TN, WG + d5.y / TN, 30 / TN, d5.size / TN, d4.rot, dO);
                                        TL.globalAlpha = 1;
                                    }
                                }
                            }
                        } catch (dA) {
                            d3.e(dA);
                        } finally {
                            d3.f();
                        }
                        T1.visual.lights && T1.visual.lights.forEach(function (dI) {
                            ;
                            sI(WX + dI.x / TN, WG + dI.y / TN, dI.d, dI.size / Wz / TN, dI.sides, dI.transparency);
                            sI(WX + dI.x / TN, WG + dI.y / TN, dI.d, 1.5 * dI.size / Wz / TN, dI.sides, 0.2 * dI.transparency);
                        });
                    }
                    T1.visual.darkness || TL.clearRect(0, 0, T9.width, T9.height);
                    var dL = T1.visual.fog;
                    dL && (TL.globalCompositeOperation = 'destination-over', TL.globalAlpha = dL.intensity + dL.amplitude * Math.cos(performance.now() / 100 * dL.frequency), TL.fillStyle = dL.color, TL.fillRect(0, 0, T9.width, T9.height), TL.globalCompositeOperation = 'source-over');
                    Wk && (TL.fillStyle = jQ('000000', jG(jJ).substring(1), 0.9), TL.globalAlpha = Wk, TL.fillRect(0, 0, T9.width, T9.height));
                    TL = TT;
                    !E9.showNamesAndChatInScreenshotMode && VT || (WI.forEach(function (dI) {
                        ;
                        LP(dI, c8.c[dI.color] || (WD ? jN(WD.team, dI.team, WD.id, dI.id) : jN(dI.team, dI.team, 0, 0)), dI.showName, 0);
                    }), WD && LI(WD, WD, 0), WP.forEach(function (dI) {
                        LI(WD, dI, 0);
                    }), WD && LI(WD, WD, 1), WI.forEach(function (dI) {
                        ;
                        LP(dI, c8.c[dI.color] || (WD ? jN(WD.team, dI.team, WD.id, dI.id) : jN(dI.team, dI.team, 0, 0)), dI.showName, 1);
                    }), WP.forEach(function (dI) {
                        LI(WD, dI, 1);
                    }));
                    TL = Tj;
                }
                var j6 = 1, j7 = 1, j8 = 1;
                function j9() {
                    ;
                    j6 = Math.max(1, 800 / Math.min(window.innerWidth, window.innerHeight));
                    j7 = Math.max(window.devicePixelRatio || 1, 1);
                    TK.width = j6 * window.innerWidth;
                    TK.height = j6 * window.innerHeight;
                    T8.width = window.innerWidth * j7;
                    T8.height = window.innerHeight * j7;
                    TY.width = TK.width;
                    TY.height = TK.height;
                    TM.width = TK.width;
                    TM.height = TK.height;
                    T9.width = TK.width;
                    T9.height = TK.height;
                    j8 = Math.min(window.innerHeight, window.innerWidth) / 100 * j7;
                    TS.width = window.innerWidth * j7;
                    TS.height = window.innerHeight * j7;
                    TC.width = 40 * j8;
                    TC.height = 13 * j8;
                    W9(j6);
                }
                function jO(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, WN = Math.max(Math.abs(TD - WI.x), Math.abs(TQ - WI.y));
                    return TW / 2 > WN - WI.size * WP;
                }
                function jY(WI) {
                    ;
                    setTimeout(function () {
                        var WP, WN = Math.min(0.2 * WI.size, 100) * E7, WW = 0;
                        switch (WI.type) {
                        case 0:
                            switch (WI.gateType) {
                            case 1:
                                WP = 40, WW = 0.7;
                                break;
                            case 3:
                                WP = 60;
                            }
                            break;
                        case 1:
                            switch (WI.gateType) {
                            case 1:
                                WP = 70, WW = 10;
                                break;
                            case 3:
                                WP = 100;
                            }
                            break;
                        case 2:
                            switch (WN *= WI.power / 10000, WI.gateType) {
                            case 1:
                                WP = 100, WW = 10, WN *= 0.125;
                                break;
                            case 3:
                                WP = 100, WN *= 0.125;
                            }
                        }
                        for (var WD = Math.random(); WD < WN; WD += Math.random()) {
                            var WQ = AL(0.12, 0.24) * WP * (WI.direction || CM()), Wk = AL(0.3, 0.6) * 66.66666666666667, WX = (2 * Math.random() - 1) * (WI.size - Wk), WG = WI.x + Math.cos(WI.rot + s8) * WX, Wz = WI.y + Math.sin(WI.rot + s8) * WX, WF = WI.rot + 0.3 * (2 * Math.random() - 1);
                            LF(WG, Wz, WQ * Math.cos(WF), WQ * Math.sin(WF), Wk, Math.random() * Math.PI * 2, 0, '#000000', 50, 1, WW, 0.95);
                        }
                    }, E9.renderDelay);
                }
                function jM(WI) {
                    ;
                    setTimeout(function () {
                        var WP, WN, WW = WI.size / 4 * E7;
                        Lz(WI.x, WI.y, 0.05 * WI.size, 0.1 * Math.sqrt(WI.size));
                        for (var WD = jN(null === (WP = T7) || void 0 === WP ? void 0 : WP.team, WI.team, null === (WN = T7) || void 0 === WN ? void 0 : WN.id, WI.id), WQ = Math.random(); WQ < WW; WQ += Math.random()) {
                            var Wk = Math.random() * Math.PI * 2, WX = AL(0.08 * WI.size, 0.15 * WI.size), WG = AL(45, 75);
                            LF(WI.x, WI.y, WX * Math.sin(Wk), WX * Math.cos(Wk), AL(0.15, 0.22) * WI.size, Math.random() * Math.PI * 2, 4, WD, WG, 1, WI.radiant, 0.95);
                        }
                    }, 1.2 * E9.renderDelay);
                }
                function jS(WI) {
                    ;
                    setTimeout(function () {
                        ;
                        Lz(WI.x, WI.y, 0.03 * WI.size, 0.1 * Math.sqrt(WI.size));
                        for (var WP = WI.size / 4 * E7, WN = Math.random(); WN < WP; WN += Math.random()) {
                            var WW = Math.random() * Math.PI * 2, WD = AL(0.15 * WI.size, 0.3 * WI.size), WQ = AL(45, 75);
                            LF(WI.x, WI.y, WD * Math.sin(WW), WD * Math.cos(WW), AL(8, 12), Math.random() * Math.PI * 2, 0, jz(T1.visual.backgroundColor, T1.visual.gridColor, Math.random()), WQ, 1, 0, AL(0.93, 0.96));
                        }
                    }, 1.2 * E9.renderDelay);
                }
                function jK(WI) {
                    ;
                    setTimeout(function () {
                        ;
                        WI.size = Math.min(WI.size, 1000);
                        var WP = WI.size / 2 * E7;
                        Lz(WI.x, WI.y, 0.1 * WI.size, 0.2 * Math.sqrt(WI.size));
                        for (var WN = Math.random(); WN < WP; WN += Math.random()) {
                            var WW = Math.random() * Math.PI * 2, WD = AL(0.08 * WI.size, 0.15 * WI.size), WQ = AL(45, 75);
                            LF(WI.x, WI.y, WD * Math.sin(WW), WD * Math.cos(WW), AL(0.5, 0.8) * WI.size, Math.random() * Math.PI * 2, 0, '#000000', WQ, 1, 0, 1);
                        }
                    }, E9.renderDelay);
                }
                function jC(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], WN = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], WW = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
                    setTimeout(function () {
                        ;
                        WI.size = Math.min(WI.size, 1000);
                        var WD = WI.size / 2 * E7 * (WP ? 0.5 : 1) * (WN ? 1.5 : 1) * WW;
                        Lz(WI.x, WI.y, 0.1 * WI.size * (WP ? 1.5 : 1), 0.1 * Math.sqrt(WI.size));
                        var WQ = '#ffffff';
                        WP && (WQ = c8.c[0]);
                        for (var Wk = Math.random(); Wk < WD; Wk += Math.random()) {
                            if (WP) {
                                var WX = Math.random() * Math.PI * 2, WG = AL(0.1 * WI.size, 0.2 * WI.size) / 2 * WW, Wz = AL(0.5, 0.8) * WI.size / 2, WF = AL(30, 60), Wq = 0.95;
                                WN && (Wz *= 1.5, WG *= 1.5);
                                if (Math.random() < 0.2) {
                                    Wz /= 3;
                                    WG *= 2;
                                    WF *= 1.5;
                                    Wq = 0.97;
                                }
                                LF(WI.x, WI.y, WG * Math.sin(WX), WG * Math.cos(WX), Wz, Math.random() * Math.PI * 2, 0, WQ, WF, 1, 1, Wq);
                            } else {
                                var WU = Math.random() * Math.PI * 2, WB = AL(0.1 * WI.size, 0.2 * WI.size), d0 = AL(30, 60);
                                LF(WI.x, WI.y, WB * Math.sin(WU), WB * Math.cos(WU), AL(0.5, 0.8) * WI.size, Math.random() * Math.PI * 2, 0, WQ, d0, 1, 0, 0.95);
                            }
                        }
                    }, E9.renderDelay);
                }
                function jE(WI) {
                    ;
                    setTimeout(function () {
                        var WP = WI.size * E7;
                        Lz(WI.x, WI.y, 0.2 * WI.size, 0.1 * Math.sqrt(WI.size));
                        for (var WN = jN(T7 ? T7.team : 0, WI.team, T7 ? T7.id : 0, WI.id), WW = Math.random(); WW < WP; WW += Math.random()) {
                            var WD = Math.random() * Math.PI * 2, WQ = AL(0.1 * WI.size, 0.2 * WI.size), Wk = AL(30, 60);
                            LF(WI.x, WI.y, WQ * Math.sin(WD), WQ * Math.cos(WD), AL(3, 12), Math.random() * Math.PI * 2, 0, WN, Wk, 1, WI.radiant, 0.95);
                        }
                    }, 1.2 * E9.renderDelay);
                }
                function jH(WI) {
                    ;
                    setTimeout(function () {
                        var WP = Math.pow(WI.size, 0.5), WN = WP * E7 * 2;
                        Lz(WI.x, WI.y, 0.5 * WP, 0.3);
                        for (var WW = jN(T7 ? T7.team : 0, WI.team, T7 ? T7.id : 0, WI.id), WD = Math.random(); WD < WN; WD += Math.random()) {
                            var WQ = Math.random() * Math.PI * 2, Wk = AL(1.6 * WP / 5, 3 * WP / 5), WX = AL(15, 30);
                            LF(WI.x + WI.size * AL(0.25, 0.75) * Math.sin(WQ), WI.y + WI.size * AL(0.25, 0.75) * Math.cos(WQ), Wk * Math.sin(WQ), Wk * Math.cos(WQ), AL(0.4, 0.8) * WI.size, Math.random() * Math.PI * 2, 0, WW, WX, 1, WI.radiant, 1);
                        }
                    }, E9.renderDelay);
                }
                window.addEventListener('resize', (0, c7.debounce)(40, function () {
                    j9();
                }));
                var jZ = false, jV = 0;
                function jT() {
                    ;
                    window.onbeforeunload = function () {
                    };
                    VA = true;
                    Lq();
                    LG();
                    Vj(false);
                    V1.classList.add('hidden');
                    EQ.classList.add('hidden');
                }
                var jj = false, jJ = '#ff0000';
                function jR(WI, WP, WN) {
                    var WW = WI;
                    return WN > 0 ? (jj || jL(), WW = jQ(WW.substring(1), jG(jJ).substring(1), 0.5 / WN)) : WN < 0 && (WW = jQ('#c0c0c0'.substring(1), WW.substring(1), Math.min(1, -WN))), WP && (WW = jk(WW, Math.round(30 * Math.abs(Math.sin(T5 / 50))))), WW;
                }
                function jL() {
                    ;
                    jJ = [
                        128 * (1 + Math.sin(T5 / 500)),
                        128 * (1 + Math.sin(T5 / 500 + Math.PI * 0.3333333333333333)),
                        128 * (1 + Math.sin(T5 / 500 + Math.PI * 0.6666666666666666))
                    ];
                }
                function jA(WI, WP, WN) {
                    if (null != WP) {
                        return jN(WP, WP);
                    }
                    switch (WI) {
                    case 0:
                        return c8.c[1];
                    case 1:
                        return c8.c[4];
                    case 3:
                        return c8.c[0];
                    case 4:
                        return c8.c[5];
                    default:
                        return WN;
                    }
                }
                var jI = C8(c8.l);
                function jP(WI) {
                    ;
                    return jI[WI] || '#ffffff';
                }
                function jN(WI, WP, WN, WW) {
                    var WD;
                    switch (WP) {
                    default:
                        if ('string' == typeof WP) {
                            return WP;
                        }
                        WD = WP <= 0 && WN == WW ? c8.a[0] : c8.a[1];
                        break;
                    case -1:
                        WD = '#c0c0c0';
                        break;
                    case 1:
                        WD = c8.c[1];
                        break;
                    case 2:
                        WD = '#f177dd';
                        break;
                    case 3:
                        WD = '#999999';
                        break;
                    case 4:
                        WD = c8.c[0];
                        break;
                    case 5:
                        WD = '#000000';
                        break;
                    case 6:
                        WD = '#ffffff';
                        break;
                    case 7:
                        WD = '#5F676C';
                        break;
                    case 10:
                        WD = c8.a[0];
                        break;
                    case 11:
                        WD = c8.a[1];
                        break;
                    case 12:
                        WD = c8.a[2];
                        break;
                    case 13:
                        WD = c8.a[3];
                        break;
                    case 20:
                        WD = c8.c[0];
                        break;
                    case 21:
                        WD = c8.c[1];
                        break;
                    case 22:
                        WD = c8.c[2];
                        break;
                    case 23:
                        WD = c8.c[3];
                        break;
                    case 24:
                        WD = c8.c[4];
                        break;
                    case 25:
                        WD = c8.c[5];
                        break;
                    case 26:
                        WD = c8.c[6];
                        break;
                    case 27:
                        WD = c8.c[7];
                        break;
                    case 28:
                        WD = c8.c[8];
                        break;
                    case 29:
                        WD = c8.c[9];
                        break;
                    case 30:
                        WD = c8.c[10];
                    }
                    return WD;
                }
                Object.keys(jI).forEach(function (WI) {
                    ;
                    jI[WI] = jQ(jI[WI].substring(1), 'ffffff', 0.65);
                });
                var jW = {};
                function jD(WI) {
                    return jW[WI] || (jW[WI] = jk(WI, -30)), jW[WI];
                }
                function jQ(WI, WP) {
                    var WN = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0.25;
                    function WW(WF) {
                        return WF.toString(16);
                    }
                    function WD(WF) {
                        return parseInt(WF, 16);
                    }
                    for (var WQ = '#', Wk = 0; Wk <= 5; Wk += 2) {
                        for (var WX = WD(WI.substring(Wk, Wk + 2)), WG = WD(WP.substring(Wk, Wk + 2)), Wz = WW(Math.floor(WG + (WX - WG) * WN)); Wz.length < 2;) {
                            Wz = '0' + Wz;
                        }
                        WQ += Wz;
                    }
                    return WQ;
                }
                function jk(WI, WP) {
                    ;
                    return '#' + WI.replace(/^#/, '').replace(/../g, function (WN) {
                        ;
                        return ('0' + Math.min(255, Math.max(0, parseInt(WN, 16) + WP)).toString(16)).substr(-2);
                    });
                }
                function jX(WI) {
                    var WP = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(WI);
                    return WP ? [
                        parseInt(WP[1], 16),
                        parseInt(WP[2], 16),
                        parseInt(WP[3], 16)
                    ] : null;
                }
                function jG(WI) {
                    ;
                    return '#' + ((1 << 24) + (WI[0] << 16) + (WI[1] << 8) + WI[2]).toString(16).slice(1);
                }
                function jz(WI, WP, WN) {
                    return jG(jF(jX(WI), jX(WP), WN));
                }
                function jF(WI, WP, WN) {
                    ;
                    arguments.length < 3 && (WN = 0.5);
                    for (var WW = WI.slice(), WD = 0; WD < 3; WD++) {
                        WW[WD] = Math.round(WW[WD] + WN * (WP[WD] - WI[WD]));
                    }
                    return WW;
                }
                function jq(WI, WP) {
                    var WN = 1, WW = WP - WI;
                    return WW < 0.5 ? WN = WW / 0.5 : WW > WP - 0.5 && (WN = 1 - (WW - (WP - 0.5)) / 0.5), CT(Math.max(Math.min(WN, 1), 0));
                }
                function jU(WI, WP) {
                    var WN = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 20, WW = 1, WD = (WP /= 60) - WI;
                    return WD > WP - (WN /= 60) ? WW = 1 - (WD - (WP - WN)) / WN : WD < WN && (WW = WD / WN), WW;
                }
                function jB(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.2, WN = 1, WW = 1 - WI;
                    return WW < WP ? WN = WW / WP : WW > 1 - WP && (WN = (1 - WW) / WP), WN;
                }
                var J0 = false, J1 = 0, J2 = [], J3 = [], J4 = 1;
                function J5(WI) {
                    J4 = WI;
                }
                for (var J6 = 0; J6 < 8; J6++) {
                    J2.push(1);
                    J3.push(1);
                }
                for (var J7 = [], J8 = 0; J8 < c8.n.length; J8++) {
                    J7.push({
                        'name': c8.n[J8].split(' '),
                        'color': c8.k[J8]
                    });
                }
                for (var J9 = 0; J9 < c8.j.length; J9++) {
                    J7.push({
                        'name': c8.j[J9].split(' '),
                        'color': c8.k[J9]
                    });
                }
                var JO = 0;
                function JY(WI, WP, WN, WW, WD, WQ, Wk) {
                    ;
                    I2[WW - 1] = CZ(I2[WW - 1], I1[WW - 1], 0.1, T6);
                    var WX = 250 * WQ, WG = I1[WW - 1] / 15 * (WX - 25 * WQ), Wz = I2[WW - 1] / 15 * (WX - 25 * WQ);
                    J2[WW - 1] = CZ(J2[WW - 1], Wk == WW ? 1.1 : 1, 0.00001, T6);
                    var WF = J2[WW - 1];
                    TL.lineCap = 'round';
                    TL.strokeStyle = 'black';
                    TL.lineWidth = 30;
                    TL.beginPath();
                    TL.moveTo(WI, WP);
                    TL.lineTo(WI + WX, WP);
                    TL.stroke();
                    TL.lineWidth = 20;
                    TL.globalAlpha = 0.5;
                    if (0 != I1[WW - 1]) {
                        TL.strokeStyle = WD;
                        TL.beginPath();
                        TL.moveTo(WI, WP);
                        TL.lineTo(WI + WG, WP);
                        TL.stroke();
                    }
                    TL.globalAlpha = 1;
                    if (I2[WW - 1] > 0.1) {
                        TL.beginPath();
                        TL.moveTo(WI, WP);
                        TL.lineTo(WI + Wz, WP);
                        TL.stroke();
                    }
                    var Wq = I3 > 0 && I1[WW - 1] < 15 ? 1 : 0;
                    J3[WW - 1] = CZ(J3[WW - 1], Wq, 0.00001, T6);
                    var WU = jQ('ffffff', '#5F676C'.substring(1), J3[WW - 1]);
                    TL.strokeStyle = WU;
                    TL.lineWidth *= WF;
                    TL.beginPath();
                    TL.moveTo(WI + WX, WP);
                    TL.lineTo(WI + WX, WP);
                    TL.stroke();
                    TL.strokeStyle = 'black';
                    TL.lineCap = 'butt';
                    TL.lineWidth = 4 * WF;
                    TL.beginPath();
                    TL.moveTo(WI + WX + 7 * WF, WP);
                    TL.lineTo(WI + WX - 7 * WF, WP);
                    TL.moveTo(WI + WX, WP + 7 * WF);
                    TL.lineTo(WI + WX, WP - 7 * WF);
                    TL.stroke();
                    TL.lineCap = 'round';
                    TL.globalAlpha = J3[WW - 1];
                    JZ(WI + WX - 28 * WQ, WP + 1.5, '['.concat(WW, ']'), 15, 5, WU);
                    TL.globalAlpha = 1;
                    JZ(WI + (WX - 25 * WQ) / 2 - 6 * WQ * J3[WW - 1], WP + 2, WN, 20, 5);
                }
                function JM(WI, WP, WN, WW, WD, WQ) {
                    var Wk = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, WX = arguments.length > 7 && void 0 !== arguments[7] && arguments[7], WG = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 100, Wz = !(arguments.length > 9 && void 0 !== arguments[9]) || arguments[9], WF = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : '#000000';
                    TL.lineCap = 'round';
                    TL.strokeStyle = WF;
                    TL.lineWidth = 5 * Wk;
                    WX && (WN = '#999999');
                    var Wq = WG / 100, WU = WG / 2, WB = WG / 4;
                    if (sO(WI, WP, WG * Wk, WG * Wk, 5, WN), sO(WI, WP + WB * Wk, WG * Wk, WU * Wk, 5, jD(WN)), sY(WI, WP, WG * Wk, WG * Wk, 5), TL.stroke(), Wz) {
                        var d0 = (WD.isCelestial ? 40 : 20) * Wk * Wq, d1 = WX ? '#c0c0c0' : WW, d2 = J1 / (WX ? 10 : 1);
                        JS(WI, WP, d0, d2, d1, WD, WQ, Wk * Wq);
                    }
                    TL.lineCap = 'round';
                    JZ(WI, WP + 35 * Wk * Wq, WD.name, 15 * Wk * Wq, 6.666666666666667 * Wk * Wq, WX ? '#c0c0c0' : '#ffffff');
                }
                function JS(WI, WP, WN, WW, WD, WQ, Wk, WX) {
                    var WG = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0;
                    null != WQ.isCelestial && (WG = WQ.isCelestial ? 1 : 0);
                    Wk ? (s7(WI, WP, WN, WW, WQ.barrels, false, WX), LA(WI, WP, WN, WD, 1 == WG ? 3 : 0, WW, false, WX)) : (WQ.outerSize > 0 && LA(WI, WP, WN + WQ.outerSize * WN, '#5F676C', WQ.outerSides, WW, false, WX, WN), LA(WI, WP, WN, WD, WQ.sides, WW, false, WX), s1(WI, WP, WW, WN, WD, WQ.layers, 0, 0, false, false, WX), s4(WI, WP, WN, WW, WQ.gadgets, WD, 0, 0, false, false, WX));
                }
                function JK(WI, WP, WN, WW, WD, WQ) {
                    var Wk = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 100, WX = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 1;
                    TL.lineCap = 'round';
                    TL.strokeStyle = 'black';
                    TL.lineWidth = 5 * WX;
                    var WG = Wk / 100, Wz = Wk / 2, WF = Wk / 4, Wq = WX * WG;
                    sO(WI, WP, Wk * WX, Wk * WX, 5, WW);
                    sO(WI, WP + WF * WX, Wk * WX, Wz * WX, 5, jD(WW));
                    sY(WI, WP, Wk * WX, Wk * WX, 5);
                    TL.stroke();
                    TL.lineCap = 'round';
                    for (var WU = 0; WU < WN.length; WU++) {
                        JZ(WI, WP + (20 * WU - 25) * Wq, WN[WU], 15 * Wq, 6.666666666666667 * Wq, '#ffffff');
                    }
                    JZ(WI, WP + 15 * Wq, ''.concat(WD, '/').concat(15), 15 * Wq, 6.666666666666667 * Wq, '#ffffff');
                    var WB = WP + 35 * Wq, d0 = 15 * Wq, d1 = 80 * Wq, d2 = WD / 15 * d1, d3 = WQ / 15 * d1;
                    TL.lineCap = 'round';
                    TL.strokeStyle = 'black';
                    TL.lineWidth = d0;
                    TL.beginPath();
                    TL.moveTo(WI - d1 / 2, WB);
                    TL.lineTo(WI + d1 / 2, WB);
                    TL.stroke();
                    TL.lineWidth = d0 - 10;
                    if (0 != WD) {
                        TL.globalAlpha = 0.5;
                        TL.strokeStyle = WW;
                        TL.beginPath();
                        TL.moveTo(WI - d1 / 2, WB);
                        TL.lineTo(WI + d2 - d1 / 2, WB);
                        TL.stroke();
                    }
                    TL.globalAlpha = 1;
                    if (WQ > 0.1) {
                        TL.strokeStyle = WW;
                        TL.beginPath();
                        TL.moveTo(WI - d1 / 2, WB);
                        TL.lineTo(WI + d3 - d1 / 2, WB);
                        TL.stroke();
                    }
                }
                function JC(WI, WP) {
                    var WN = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 100, WW = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : '#adadad';
                    TL.lineCap = 'round';
                    TL.strokeStyle = 'black';
                    TL.lineWidth = 5;
                    var WD = 0.4 * WN, WQ = WD / 2, Wk = WD / 4;
                    sO(WI, WP, WN, WD, 5, WW);
                    sO(WI, WP + Wk, WN, WQ, 5, jD(WW));
                    sY(WI, WP, WN, WD, 5);
                    TL.stroke();
                    TL.lineCap = 'round';
                    JZ(WI, WP, 'IGNORE', WQ, 10);
                }
                function JE(WI, WP) {
                    ;
                    try {
                        var WN = TL;
                        (TL = WI.getContext('2d')).clearRect(0, 0, WI.width, WI.height);
                        (function (WW, WD) {
                            var WQ = WW / 2, Wk = WW / 2;
                            WW /= 2;
                            var WX = WD.scale * (1 == WD.tankType ? 2 : 1), WG = WW * WD.size / 60 / WX * (1 == WD.tankType ? 3.3333333333333335 : 1), Wz = 5 * WW / 60 / WX, WF = 1 / ((WD.gridScale || 0) < 0.1 ? 1 : WD.gridScale) * WD.gridSize, Wq = Math.ceil(WF * WX - 1), WU = WW / WF / WX;
                            s7(d2, d3, WG, d1, WD.barrels, false, Wz);
                            LA(d2, d3, WG, d0, WD.sides, d1, false, Wz);
                            s1(d2, d3, d1, WG, d0, WD.layers, 0, 0, false, false, Wz);
                            s4(d2, d3, WG, d1, WD.gadgets, d0, 0, false, false, false, Wz);
                            (function (d4) {
                                var d5 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                                TL.globalCompositeOperation = 'destination-in';
                                TL.beginPath();
                                TL.arc(d4 / 2, d4 / 2, d4 / 2 - d5, 0, 2 * Math.PI, false);
                                TL.fill();
                                TL.globalCompositeOperation = 'source-over';
                            }(TL.canvas.width, 5 * Wz / 2));
                            sM(WQ, Wk, WW - 5 * Wz / 2, void 0, WD.borderColor || WD.gridColor, 5 * Wz);
                            TL.lineWidth = Wz;
                            TL.lineCap = 'round';
                            TL.strokeStyle = WD.gridColor;
                            TL.beginPath();
                            TL.moveTo(WQ, Wk + WW);
                            TL.lineTo(WQ, Wk - WW);
                            TL.moveTo(WQ + WW, Wk);
                            TL.lineTo(WQ - WW, Wk);
                            for (var WB = 1; WB < Wq + 1; WB++) {
                                TL.moveTo(WQ + WU * WB, Wk + WW);
                                TL.lineTo(WQ + WU * WB, Wk - WW);
                                TL.moveTo(WQ - WU * WB, Wk + WW);
                                TL.lineTo(WQ - WU * WB, Wk - WW);
                                TL.moveTo(WQ + WW, Wk + WU * WB);
                                TL.lineTo(WQ - WW, Wk + WU * WB);
                                TL.moveTo(WQ + WW, Wk - WU * WB);
                                TL.lineTo(WQ - WW, Wk - WU * WB);
                            }
                            TL.stroke();
                            var d0 = jN(0, WD.team), d1 = WD.rot;
                            Wz /= 5;
                            var d2 = WQ + WW * WD.offsetX / 2 / WX, d3 = Wk + WW * WD.offsetY / 2 / WX;
                            WD.outerSize > 0 && LA(d2, d3, WG + WD.outerSize * WG, '#5F676C', WD.outerSides, d1, false, Wz, WG);
                            s7(d2, d3, WG, d1, WD.barrels, false, Wz), LA(d2, d3, WG, d0, WD.sides, d1, false, Wz), s1(d2, d3, d1, WG, d0, WD.layers, 0, 0, false, false, Wz), s4(d2, d3, WG, d1, WD.gadgets, d0, 0, false, false, false, Wz), function (d4) {
                                var d5 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                                TL.globalCompositeOperation = 'destination-in';
                                TL.beginPath();
                                TL.arc(d4 / 2, d4 / 2, d4 / 2 - d5, 0, 2 * Math.PI, false);
                                TL.fill();
                                TL.globalCompositeOperation = 'source-over';
                            }(TL.canvas.width, 5 * Wz / 2), sM(WQ, Wk, WW - 5 * Wz / 2, void 0, WD.borderColor || WD.gridColor, 5 * Wz);
                        }(WI.width, WP));
                        TL = WN;
                    } catch (WW) {
                        console.error(WW);
                    }
                }
                function JH(WI, WP, WN) {
                    var WW = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1, WD = arguments.length > 4 ? arguments[4] : void 0, WQ = arguments.length > 5 ? arguments[5] : void 0, Wk = arguments.length > 6 ? arguments[6] : void 0, WX = arguments.length > 7 ? arguments[7] : void 0, WG = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, Wz = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, WF = arguments.length > 10 ? arguments[10] : void 0, Wq = arguments.length > 11 && void 0 !== arguments[11] ? arguments[11] : 1, WU = TL.globalAlpha;
                    if (TL.globalAlpha = WX * WU, TL.textAlign = 'left', TL.textBaseline = 'middle', TL.lineJoin = 'miter', TL.miterLimit = 2, TL.strokeStyle = 'black', WN && !WN.width) {
                        TL.font = 'bold ' + WD + 'px Roboto';
                        for (var d0 = [], d1 = {
                                    'fullText': '',
                                    'sections': []
                                }, d2 = 0; d2 < WN.sections.length; d2++) {
                            var d3 = WN.sections[d2], d4 = TL.measureText(d1.fullText + d3.text).width;
                            d4 < 900 || '' == d1.fullText ? (d1.fullText += d3.text, d1.sections.push(d3)) : (d0.push(d1), d1 = {
                                'fullText': d3.text,
                                'sections': [d3]
                            });
                        }
                        d0.push(d1);
                        for (var d5 = 0, d6 = d0; d5 < d6.length; d5++) {
                            for (var d7 = d6[d5], d8 = [], d9 = 0; d9 < d7.sections.length; d9++) {
                                for (var dO = d7.sections[d9], dY = d8[d8.length - 1], dM = void 0, dS = void 0, dK = d9; dK < d7.sections.length; dK++) {
                                    var dC = d7.sections[dK];
                                    if ('' != dC.text.trim()) {
                                        dM = dC;
                                        dS = dK;
                                        break;
                                    }
                                }
                                dY && dY.color == dO.color && dY.link == dO.link && dS && (dS == d9 || dS > d9 && dM.color == dO.color && dM.link == dO.link) ? d8[d8.length - 1].text += dO.text : d8.push(dO);
                            }
                            d7.sections = d8;
                        }
                        for (var dE = 0, dH = d0; dE < dH.length; dE++) {
                            var dZ = dH[dE];
                            dZ.width = TL.measureText(dZ.fullText).width;
                            var dV, dT = eP(dZ.sections);
                            try {
                                for (dT.s(); !(dV = dT.n()).done;) {
                                    var dj = dV.value;
                                    dj.width = TL.measureText(dj.text).width;
                                }
                            } catch (f4) {
                                dT.e(f4);
                            } finally {
                                dT.f();
                            }
                        }
                        ;
                        ;
                        ;
                    }
                    var dJ = 1, dR = 1;
                    if (Wk) {
                        var dL = 0, dA = 0;
                        WN ? (dL = WN.height, dA = WN.width + WD, Wq < 1 && (dL = CH(1.5 * WD, dL, Wq), dA = CH(2.5 * WD, dA, Wq), dJ = dL / WN.height, dR = dA / (WN.width + WD))) : (dL = 1.5 * WD, dA = 2.5 * WD);
                        sO(WI, WP - dL / 2 * WW, dA, dL, 0.4 * WD, '#0000008c', WG * WD, Wz * WD);
                    }
                    if (TL.font = 'bold ' + WD * dR + 'px Roboto', WN) {
                        var dI = WI - WN.width * dR / 2, dP = WP - (WN.height / 2 * WW + (WN.lines.length - 1) * WD * 1.2 / 2) * dJ, dN = dI;
                        TL.globalAlpha = WX * WU * Wq;
                        var dW, dD = eP(WN.lines);
                        try {
                            for (dD.s(); !(dW = dD.n()).done;) {
                                var dQ = dW.value;
                                dI = dN;
                                var dX, dG = eP(dQ.sections);
                                try {
                                    for (dG.s(); !(dX = dG.n()).done;) {
                                        var dz = dX.value;
                                        if (Vk && dz.link && V3) {
                                            var dF = {
                                                'x': dI,
                                                'y': dP - 12,
                                                'width': dz.width,
                                                'height': 25
                                            };
                                            if (AZ(VG, dF)) {
                                                R0(dz.text);
                                                break;
                                            }
                                        }
                                        TL.fillStyle = jN(dz.color, dz.color);
                                        dz.link && TL.fillRect(dI, dP + 11, dz.width, 3);
                                        0 != WQ && TL.strokeText(dz.text, dI, dP);
                                        TL.fillText(dz.text, dI, dP);
                                        dI += dz.width * dR;
                                    }
                                } catch (f5) {
                                    dG.e(f5);
                                } finally {
                                    dG.f();
                                }
                                dP += 1.2 * WD * dJ;
                            }
                        } catch (f6) {
                            dD.e(f6);
                        } finally {
                            dD.f();
                        }
                    }
                    if (Wq < 1 || !WN) {
                        var dU = performance.now() / 200, dB = 30, f0 = 1.5 * WD;
                        WN && (dB = CH(dB, WN.width / 2, Wq), f0 = CH(f0, WN.height, Wq));
                        for (var f1 = 0.5 * f0 / 3, f2 = 0; f2 < 3; f2++) {
                            var f3 = 0.5 + (1 + Math.sin(-dU + f2 * Math.PI / 3)) * WX / 4;
                            TL.beginPath();
                            TL.arc(WI - dB / 2 + f2 / 2 * dB, WP - f0 / 2 * WW, f1 * f3, 0, 2 * Math.PI, false);
                            TL.fillStyle = WF;
                            TL.globalAlpha = WU * f3 * WX * (1 - Wq);
                            TL.fill();
                        }
                    }
                    TL.globalAlpha = WU;
                }
                function JZ(WI, WP, WN, WW, WD) {
                    var WQ = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 'white', Wk = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 'center';
                    TL.font = 'bold ' + WW + 'px Roboto';
                    TL.textAlign = Wk;
                    TL.textBaseline = 'middle';
                    TL.lineJoin = 'miter';
                    TL.miterLimit = 2;
                    TL.lineWidth = WD;
                    TL.fillStyle = WQ;
                    WD && (TL.strokeStyle = 'black', TL.strokeText(WN, WI, WP));
                    TL.fillText(WN, WI, WP);
                }
                function JV(WI, WP) {
                    var WN = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                    return TL.font = 'bold ' + WP + 'px Roboto', TL.textAlign = 'center', TL.textBaseline = 'middle', TL.lineJoin = 'miter', TL.miterLimit = 2, TL.lineWidth = WN, TL.measureText(WI);
                }
                var JT = [
                        1,
                        -1
                    ], Jj = [
                        {
                            'sign': 1,
                            'size': 1
                        },
                        {
                            'sign': -1,
                            'size': 1
                        }
                    ], JJ = [
                        {
                            'sign': 1,
                            'size': 1
                        },
                        {
                            'sign': -1,
                            'size': 1
                        }
                    ], JR = [
                        {
                            'id': 'gamemode',
                            'hovered': false,
                            'size': 1
                        },
                        {
                            'id': 'region',
                            'hovered': false,
                            'size': 1
                        }
                    ], JL = '#c0c0c0', JA = 'Connecting...', JI = 0, JP = 1, JN = '???', JW = 0, JD = 1, JQ = false, Jk = false, JX = 0, JG = document.getElementById('link-confirm-popup'), Jz = document.getElementById('link-confirm-title'), JF = document.getElementById('link-confirm-text'), Jq = document.getElementById('link-confirm'), JU = document.getElementById('link-cancel'), JB = false;
                function R0(WI) {
                    ;
                    PM(true);
                    JG.classList.remove('hide');
                    Jz.innerText = 'Open Link?';
                    JF.innerHTML = 'Are you sure that you want to open the link '.concat(W1(WI), '?<br />Never open links from people you don\'t trust.');
                    Jq.onclick = function () {
                        ;
                        R1();
                        window.open(WI, '_blank');
                    };
                    JU.onclick = function () {
                        R1();
                    };
                }
                function R1() {
                    ;
                    PM(false);
                    JG.classList.add('hide');
                    JB = false;
                }
                var R2 = document.getElementById('apply-quick-chat'), R3 = document.getElementById('delete-quick-chat'), R4 = document.getElementById('cancel-quick-chat'), R5 = document.getElementById('quick-chat-title'), R6 = document.getElementById('quick-chat-popup'), R7 = document.getElementById('quick-chat-input'), R8 = false, R9 = [], RO = 0, RY = false, RM = false;
                function RS(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], WN = R9[WI];
                    WN.add && WP || WN && !WN.add && (l2(WN.message), RM = false);
                }
                function RK(WI) {
                    ;
                    PM(true);
                    R6.classList.remove('hide');
                    R8 = true;
                    var WP = R9.filter(function (WW) {
                        return !WW.add;
                    }).map(function (WW) {
                        ;
                        return WW.message;
                    });
                    if (null == WI) {
                        R5.textContent = 'Create Quick Chat Message';
                        R2.textContent = 'CREATE';
                        R3.classList.add('hidden');
                        R7.value = '';
                        R2.onclick = function () {
                            ;
                            R7.value.trim() && (WP.push(R7.value.trim()), RC(WP));
                            RE();
                            RM = true;
                        };
                        R4.onclick = function () {
                            RE();
                            RM = true;
                        };
                    } else {
                        var WN = WP[WI];
                        R5.textContent = 'Edit Quick Chat Message';
                        R2.textContent = 'APPLY';
                        R3.classList.remove('hidden');
                        R7.value = WN;
                        R2.onclick = function () {
                            ;
                            R7.value.trim() ? WP[WI] = R7.value.trim() : WP.splice(WI, 1);
                            RC(WP);
                            RE();
                            RM = true;
                        };
                        R3.onclick = function () {
                            WP.splice(WI, 1);
                            RE();
                            RC(WP);
                            RM = true;
                        };
                        R4.onclick = function () {
                            RE();
                            RM = true;
                        };
                    }
                    setTimeout(function () {
                        ;
                        R7.focus();
                    }, 0);
                }
                function RC(WI) {
                    ;
                    WI && 'string' != typeof WI || (WI = []);
                    WO('quick_chat', JSON.stringify(WI));
                    R9 = WI.map(function (WN) {
                        return {
                            'message': WN,
                            'lerping': 0,
                            'buttonLerping': 0
                        };
                    });
                    for (var WP = 0; WP < Math.max(0, 3 - WI.length) + 1; WP++) {
                        R9.push({
                            'add': true,
                            'lerping': 0,
                            'buttonLerping': 0
                        });
                    }
                }
                function RE() {
                    ;
                    R7.blur();
                    PM(false);
                    R6.classList.add('hide');
                    R8 = false;
                }
                function RH() {
                    RM = !RM;
                }
                var RZ = 0, RV = 0, RT = 0, Rj = 0;
                function RJ(WI, WP, WN, WW) {
                    ;
                    TL.globalAlpha = 0.5;
                    sK(WP, WN, WW, '#000000');
                    sK(WP + WI.x * WW, WN + WI.y * WW, 0.5 * WW, '#000000');
                }
                function RR(WI, WP) {
                    ;
                    for (var WN = WI ? RV : RZ, WW = TK.width / 2, WD = TK.height / 2 - TK.height * (1 - WN), WQ = WI ? RL : RA, Wk = (WP ? AO.celestial : AO.normal)[WI ? 'weapon' : 'body'], WX = [], WG = 0, Wz = Object.entries(Wk); WG < Wz.length; WG++) {
                        for (var WF = eN(Wz[WG], 2), Wq = WF[0], WU = WF[1], WB = +Wq, d0 = 0; d0 < WU.length; d0++) {
                            for (var d1 = WU[d0], d2 = Math.min(TK.width / (200 * WU.length), 1), d3 = WW + TK.width * WN * ((d0 + 1) / (WU.length + 1) * 0.6 - 0.3), d4 = WD + TK.height * WN * (WB / Wk.maxTier * 0.6 - 0.3), d5 = 0; d5 < d1.evolutions.length; d5++) {
                                var d6, d7 = Wk[WB + 1], d8 = d1.evolutions[d5], d9 = 0;
                                for (d9 = 0; d9 < d7.length; d9++) {
                                    if (d7[d9].id == d8) {
                                        d6 = d7[d9];
                                        break;
                                    }
                                }
                                if (!d6) {
                                    return;
                                }
                                var dO = Math.min(TK.width / (200 * d7.length), 1), dY = WW + TK.width * WN * ((d9 + 1) / (d7.length + 1) * 0.6 - 0.3), dM = WD + TK.height * WN * ((WB + 1) / Wk.maxTier * 0.6 - 0.3), dS = WQ.includes(d1.id) && WQ.includes(d8);
                                WX.push({
                                    'points': [
                                        {
                                            'x': d3,
                                            'y': d4 + 50 * d2
                                        },
                                        {
                                            'x': d3,
                                            'y': d4 + 50 * d2 + 10
                                        },
                                        {
                                            'x': dY,
                                            'y': dM - 50 * dO - 10
                                        },
                                        {
                                            'x': dY,
                                            'y': dM - 50 * dO
                                        }
                                    ],
                                    'width': 5 * d2,
                                    'priority': dS ? 1 : 0,
                                    'color': dS ? 'black' : '#999999'
                                });
                            }
                        }
                        WX.sort(function (dI, dP) {
                            ;
                            return dI.priority - dP.priority;
                        });
                        for (var dK = 0; dK < WX.length; dK++) {
                            var dC = WX[dK];
                            TL.strokeStyle = dC.color;
                            TL.lineWidth = dC.width;
                            TL.beginPath();
                            TL.moveTo(dC.points[0].x, dC.points[0].y);
                            for (var dE = 1; dE < dC.points.length; dE++) {
                                var dH = dC.points[dE];
                                TL.lineTo(dH.x, dH.y);
                            }
                            TL.stroke();
                        }
                    }
                    for (var dZ = 0, dV = Object.entries(Wk); dZ < dV.length; dZ++) {
                        for (var dT = eN(dV[dZ], 2), dj = dT[0], dJ = dT[1], dR = +dj, dL = 0; dL < dJ.length; dL++) {
                            var dA = dJ[dL];
                            dA.upgradeType = 0;
                            dA.isCelestial = WP;
                            JM(WW + TK.width * WN * ((dL + 1) / (dJ.length + 1) * 0.6 - 0.3), WD + TK.height * WN * (dR / Wk.maxTier * 0.6 - 0.3), c8.c[dR], VX, dA, WI, Math.min(TK.width / (200 * dJ.length), 1), !WQ.includes(dA.id));
                        }
                    }
                }
                var RL = [], RA = [];
                function RI(WI) {
                    ;
                    for (var WP = WI ? T7.weaponUpgrade : T7.bodyUpgrade, WN = (T7.isCelestial ? AO.celestial : AO.normal)[WI ? 'weapon' : 'body'], WW = 0, WD = Object.entries(WN); WW < WD.length; WW++) {
                        for (var WQ = eN(WD[WW], 2), Wk = WQ[0], WX = WQ[1], WG = +Wk, Wz = 0; Wz < WX.length; Wz++) {
                            WX[Wz].id == WP && (WI ? RT = WG : Rj = WG);
                        }
                    }
                    for (var WF, Wq = [WP], WU = WI ? RT : Rj, WB = 0; WB < WN[WU].length; WB++) {
                        var d0 = WN[WU][WB];
                        if (d0.id == WP) {
                            WF = d0;
                            break;
                        }
                    }
                    WF && (Wq = Wq.concat(RP(WN, WU, WP)), WI ? RL = Wq : RA = Wq);
                }
                function RP(WI, WP, WN) {
                    ;
                    for (var WW = WI[WP], WD = 0; WD < WW.length; WD++) {
                        var WQ = WW[WD];
                        if (WQ.id == WN) {
                            for (var Wk = [], WX = 0; WX < WQ.evolutions.length; WX++) {
                                var WG = WQ.evolutions[WX];
                                (Wk = Wk.concat(RP(WI, WP + 1, WG))).push(WG);
                            }
                            return CB(Wk);
                        }
                    }
                    return 0;
                }
                var RN = 0.5;
                function RW(WI, WP, WN) {
                    var WW = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 4;
                    switch (WN.type) {
                    default:
                        TL.fillStyle = '#000000';
                    case 0:
                        TL.fillStyle = jR('#c0c0c0', false, 1);
                        break;
                    case 1:
                        if (2 === WN.subtype) {
                            TL.fillStyle = jR(c8.c[0], false, 1);
                            WW *= 2;
                        } else {
                            TL.fillStyle = '#000000';
                        }
                    }
                    TL.beginPath();
                    TL.arc(WI, WP, WW, 0, 2 * Math.PI, false);
                    TL.fill();
                }
                var RD = 0, RQ = 0, Rk = '0', RX = 1, RG = 0, Rz = 0, RF = [], Rq = 0, RU = 0, RB = 0, L0 = '#ffffff';
                function L1(WI) {
                    RD = WI;
                }
                var L2 = [];
                function L3(WI, WP, WN, WW) {
                    var WD = L6(WI, WP, WN, WW, true);
                    L2.push({
                        'object': WD,
                        'time': 1
                    });
                }
                function L4(WI, WP, WN) {
                    var WW = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1, WD = 5 * WW / 2, WQ = 300 * WW - WD, Wk = 100 * WW - 2 * WD, WX = WQ / 2, WG = Wk / 2, Wz = Wk / 4;
                    TL.lineCap = 'round';
                    TL.strokeStyle = '#000000';
                    TL.lineWidth = WD;
                    var WF = WN.completed ? '#ffffff' : '#c0c0c0';
                    sO(WI, WP, WQ, Wk, 5 * WW, WN.color);
                    sO(WI, WP + Wz, WQ, WG, 5 * WW, WN.strokeColor);
                    sY(WI, WP, WQ, Wk, 5 * WW);
                    TL.stroke();
                    JZ(WI - WX + 10 * WW, WP - WG + 20 * WW, WN.name, 20 * WW, 2 * WD, WF, 'left');
                    WN.progress && JZ(WI - WX + 10 * WW, WP - WG + 40 * WW, WN.progress, 10 * WW, 2 * WD, WF, 'left');
                    var Wq = 15 * WW;
                    if (!WN.description) {
                        var WU = function d1() {
                            var d2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 2, d3 = WQ - 20 * WW, d4 = WN.rawDescription.split(/(\s+)/), d5 = [], d6 = '';
                            TL.lineWidth = 2 * WD;
                            TL.font = 'bold ' + Wq + 'px Roboto';
                            for (var d7 = 0; d7 < d4.length; d7++) {
                                var d8 = d4[d7].trim();
                                if (d8) {
                                    var d9 = TL.measureText(d6.trim() + ' ' + d8).width;
                                    d9 < d3 || '' == d6.fullText ? d6 += ' ' + d8 : (d5.push(d6.trim()), d6 = d8);
                                }
                            }
                            d5.push(d6.trim());
                            ;
                            ;
                            if (d5.length > d2) {
                                Wq = 15 * WW * Math.pow(0.72, d2 - 1);
                                d1(d2 + 1);
                            }
                        };
                        WU();
                    }
                    Wq = WN.descriptionFontSize * WW;
                    for (var WB = 0; WB < WN.description.length; WB++) {
                        var d0 = WN.description[WB];
                        JZ(WI - WX + 10 * WW, WP + 12 * WW + WB * (1.23 * Wq), d0, Wq, 2 * WD, WF, 'left');
                    }
                    WN.stars || (WN.stars = CP(WN.rawStars), TL.lineWidth = 2 * WD, TL.font = 'bold ' + 18 * WW + 'px Roboto', WN.starTextWidth = TL.measureText(WN.stars).width / WW);
                    JZ(WI + WX - 8 * WW, WP - WG + 22 * WW, WN.stars, 18 * WW, 2 * WD, WF, 'right');
                    sT(WI + WX - (25 + WN.starTextWidth) * WW, WP - WG + 20 * WW, 14 * WW, 7 * WW, 5, WN.completed ? '#FFE449' : '#c0c0c0', '#000000', WD, 0);
                    TL.setTransform(1, 0, 0, 1, 0, 0);
                }
                function L5(WI, WP, WN) {
                    var WW = TL;
                    (TL = WI.getContext('2d')).clearRect(0, 0, WI.width, WI.height);
                    L4(WI.width / 2, WI.height / 2, WP, WN);
                    TL = WW;
                }
                function L6(WI, WP, WN, WW, WD, WQ) {
                    var Wk = WD ? c8.d[WN] : '#5F676C';
                    return {
                        'name': WI,
                        'rawDescription': WP,
                        'rarity': WN,
                        'color': Wk,
                        'strokeColor': jD(Wk),
                        'rawStars': WW,
                        'completed': WD,
                        'progress': WQ
                    };
                }
                var L7 = TL;
                function L8() {
                    L7 = TL;
                    TL = TT;
                }
                function L9() {
                    TL = L7;
                }
                function LO(WI, WP, WN) {
                    var WW = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : '#ffffff', WD = arguments.length > 4 ? arguments[4] : void 0, WQ = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
                    WN -= Math.PI / 2;
                    L8();
                    null == WD && (WD = Math.max(TK.width, TK.height));
                    WI += Math.cos(WN) * WQ;
                    WP += Math.sin(WN) * WQ;
                    var Wk = WI + WD * Math.cos(WN), WX = WP + WD * Math.sin(WN);
                    TL.strokeStyle = WW;
                    TL.lineCap = 'round';
                    TL.lineWidth = +E9.guideLineWidth;
                    TL.beginPath();
                    TL.moveTo(WI, WP);
                    TL.lineTo(Wk, WX);
                    TL.stroke();
                    L9();
                }
                function LY(WI, WP, WN) {
                    var WW = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : '#ffffff';
                    L8();
                    TL.strokeStyle = WW;
                    TL.lineCap = 'round';
                    TL.lineWidth = +E9.guideLineWidth;
                    TL.beginPath();
                    TL.arc(WI, WP, WN, 0, 2 * Math.PI, false);
                    TL.stroke();
                    L9();
                }
                function LM(WI, WP, WN, WW, WD) {
                    var WQ = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : '#ffffff';
                    WW -= Math.PI / 2;
                    WD -= Math.PI / 2;
                    L8();
                    TL.strokeStyle = WQ;
                    TL.lineCap = 'round';
                    TL.lineWidth = +E9.guideLineWidth;
                    TL.beginPath();
                    TL.arc(WI, WP, WN, WW, WD, false);
                    TL.stroke();
                    L9();
                }
                function LS(WI, WP, WN, WW) {
                    var WD = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : '#ffffff';
                    L8();
                    TL.strokeStyle = WD;
                    TL.lineCap = 'round';
                    TL.lineWidth = +E9.guideLineWidth;
                    TL.strokeRect(WI, WP, WN, WW);
                    L9();
                }
                function LK(WI, WP, WN, WW, WD, WQ, Wk) {
                    ;
                    WW -= Math.PI / 2;
                    L8();
                    var WX = WI + WN * Math.cos(WW), WG = WP + WN * Math.sin(WW), Wz = WX + WQ * Math.cos(WW + WD), WF = WG + WQ * Math.sin(WW + WD), Wq = WX - WQ * Math.cos(WW - WD), WU = WG - WQ * Math.sin(WW - WD);
                    TL.strokeStyle = Wk;
                    TL.lineCap = 'round';
                    TL.lineWidth = +E9.guideLineWidth;
                    TL.beginPath();
                    TL.moveTo(WX, WG);
                    TL.lineTo(Wz, WF);
                    TL.moveTo(WX, WG);
                    TL.lineTo(Wq, WU);
                    TL.stroke();
                    L9();
                }
                var LC = false, LE = [];
                function LH(WI, WP) {
                    var WN;
                    WN = WI ? jN(WI.team, WP.team, WI.id, WP.id) : jN(0, WP.team, 0, WP.parentID);
                    LC = WI && WI.id == WP.id && V4;
                    LZ(WP, WN, WP.sides, true);
                    LC = false;
                }
                function LZ(WI, WP, WN, WW) {
                    var WD = Math.round(80 * (1 - WI.damageTime || 0)), WQ = jk(jR(WP, WI.isInvulnerable, WI.radiant), WD);
                    WI.lastColor = WQ;
                    var Wk = WI.fadeTime || 1, WX = WI.x, WG = WI.y, Wz = WI.d, WF = WI.size;
                    TL.globalAlpha = 1;
                    var Wq = false;
                    if (WI.fadeType) {
                        var WU = WI.fadeType[1];
                        switch (WI.fadeType[0]) {
                        case 0:
                            WF *= 1 + 0.5 * (1 - Wk), Wk < 1 && (Wq = true, A3(Wk));
                            break;
                        case 1:
                            WF *= Wk;
                            break;
                        case 2:
                            var WB = Math.pow(1 - Wk, 2);
                            WF *= 1 + 2 * (1 - Wk), Wz += WB * WU[0] * 4, WX += WB * Math.cos(WU[1]) * 2000, WG += WB * Math.sin(WU[1]) * 2000, Wk < 1 && (Wq = true, A3(Wk));
                            break;
                        case 3:
                            var d0 = Math.pow(1 - Wk, 2);
                            WF *= 1 - d0, Wz += d0 * WU[0] * 4, WX = CH(WX, WU[1], d0), WG = CH(WG, WU[2], d0);
                        }
                    }
                    if (WI.outerSize > 0 && LA(WX, WG, WF + WI.outerSize * WF, '#5F676C', WI.outerSides, Wz, true, 1, WF), WI.barrels && WI.barrels.length > 0 && s7(WX, WG, WF, Wz, WI.barrels, true), LA(WX, WG, WF, WQ, WN, Wz, true), WI.layers && s1(WX, WG, Wz, WF, WQ, WI.layers, WD, WI.radiant, WI.isInvulnerable), WI.gadgets && WI.gadgets.length > 0 && s4(WX, WG, WF, Wz, WI.gadgets, WQ, WD, WI.radiant, WI.isInvulnerable, true), Wq && A4(), V6 && Wk >= 1) {
                        var d1 = {
                            'x': TK.width / 2 + (WX - TD) / TN,
                            'y': TK.height / 2 + (WG - TQ) / TN,
                            'r': WI.size / TN,
                            'rot': Wz
                        };
                        AH(VG, d1) && (!function (d2) {
                            ;
                            AU('Copied '.concat(d2.name, '\'s ID to clipboard. (').concat(d2.id, ')'));
                            navigator.clipboard.writeText(d2.id);
                        }(WI), V6 = false);
                    }
                    h8 && E9.showHitboxes && Wk >= 1 && LY(TK.width / 2 + (WX - TD) / TN, TK.height / 2 + (WG - TQ) / TN, WI.size / TN, '#ffffff');
                }
                function LV(WI, WP) {
                    var WN = WP.x, WW = WP.y, WD = WP.d, WQ = WP.size, Wk = WP.fadeTime || 1;
                    TL.globalAlpha = 1;
                    var WX, WG = false;
                    if (WP.fadeType) {
                        var Wz = WP.fadeType[1];
                        switch (WP.fadeType[0]) {
                        case 0:
                            WQ *= 1 + 0.5 * (1 - Wk), Wk < 1 && (WG = true, A3(Wk));
                            break;
                        case 1:
                            WQ *= Wk;
                            break;
                        case 2:
                            var WF = Math.pow(1 - Wk, 2);
                            WQ *= 1 + 2 * (1 - Wk), WD += WF * Wz[0] * 4, WN += WF * Math.cos(Wz[1]) * 2000, WW += WF * Math.sin(Wz[1]) * 2000, Wk < 1 && (WG = true, A3(Wk));
                            break;
                        case 3:
                            var Wq = Math.pow(1 - Wk, 2);
                            WQ *= 1 - Wq, WD += Wq * Wz[0] * 4, WN = CH(WN, Wz[1], Wq), WW = CH(WW, Wz[2], Wq);
                            break;
                        case 4:
                            var WU = 0.35 * (1 - Math.pow(Wk, 1.5));
                            WQ *= 1 + 0.5 * (1 - Wk), Wk < 1 && (WG = true, A3(Wk)), WN += Wz[0] * WU, WW += Wz[1] * WU;
                        }
                    }
                    WX = WI ? null != WP.color ? jN(WI.team, WP.color, WI.id, WP.parentID) : jN(WI.team, WP.team, WI.id, WP.parentID) : jN(0, WP.team, 0, WP.parentID);
                    var WB = Math.round(80 * (1 - WP.damageTime || 0)), d0 = jk(jR(WX, false, WP.radiant), WB);
                    ;
                    WP.outerSize > 0 && LA(WN, WW, WQ + WP.outerSize * WQ, '#5F676C', WP.outerSides, WD, true, 1, WQ);
                    WP.barrels && WP.barrels.length > 0 && s7(WN, WW, WQ, WD, WP.barrels, true);
                    LA(WN, WW, WQ, d0, WP.sides, WD, true);
                    WP.layers && s1(WN, WW, WD, WQ, d0, WP.layers, WB, WP.radiant, false);
                    WP.gadgets && WP.gadgets.length > 0 && s4(WN, WW, WQ, WD, WP.gadgets, d0, WB, WP.radiant, false, true);
                    WG && A4();
                    h8 && E9.showHitboxes && Wk >= 1 && LY(TK.width / 2 + (WN - TD) / TN, TK.height / 2 + (WW - TQ) / TN, WP.size / TN, '#ffffff');
                }
                function LT(WI, WP, WN) {
                    ;
                    if (WP.radiant > 0) {
                        var WW = performance.now(), WD = WP.size, WQ = WP.x, Wk = WP.y, WX = WP.d, WG = WP.fadeTime || 1, Wz = 1;
                        if (WP.fadeType) {
                            var WF = WP.fadeType[1];
                            switch (WP.fadeType[0]) {
                            case 0:
                                WD *= 1 + 0.5 * (1 - WG), WG < 1 && (Wz = WG);
                                break;
                            case 1:
                                WD *= WG;
                                break;
                            case 2:
                                var Wq = Math.pow(1 - WG, 2);
                                WD *= 1 + 2 * (1 - WG), WX += Wq * WF[0] * 4, WQ += Wq * Math.cos(WF[1]) * 2000, Wk += Wq * Math.sin(WF[1]) * 2000, WG < 1 && (Wz = WG);
                                break;
                            case 3:
                                var WU = Math.pow(1 - WG, 2);
                                WD *= 1 - WU, WX += WU * WF[0] * 4, WQ = CH(WQ, WF[1], WU), Wk = CH(Wk, WF[2], WU);
                            }
                        }
                        if (TL.globalAlpha = Wz, WN || (WN = WI ? jN(WI.team, WP.team, WI.id, WP.parentID || WP.id) : jN(0, WP.team, 0, WP.parentID)), Math.random() / E7 < 1 / (600 / WP.size)) {
                            var WB = Math.random() * Math.PI * 2, d0 = Math.random() * WP.size;
                            LF(WQ + d0 * Math.sin(WB), Wk + d0 * Math.cos(WB), (1 * Math.random() - 0.5) * WP.radiant, (1 * Math.random() - 0.5) * WP.radiant, AL(6, 6 * WP.radiant), Math.random(), 0, WN, 60, 1, WP.radiant);
                        }
                        var d1 = jQ(jG(jJ).substring(1), 'ffffff', 0.5);
                        if (WP.radiant > 1) {
                            var d2 = Math.min(TL.globalAlpha, 1);
                            TL.globalAlpha = d2 * (1 - 0.7 / ((2 + WP.radiant) / 3));
                            var d3 = Math.max(1.2 + 0.1 * (1 + Math.sin(WW / 800 * ((2 + WP.radiant) / 4))) * WP.radiant, 0.1);
                            LA(WQ, Wk, (WD + (WP.outerSize || 0) * WD) * d3, d1, WP.outerSize > 0 ? WP.outerSides : WP.sides, WX, true, 1, WD * d3);
                            TL.globalAlpha = d2;
                        }
                        if (WP.radiant > 2) {
                            if (WP.radiant > 3) {
                                var d4 = Math.max(1.5 + WP.radiant / 5 + 0.06 * (1 + Math.sin(WW / 800 * ((1 + WP.radiant) / 2))) * WP.radiant, 0.1);
                                LA(WQ, Wk, (WD + (WP.outerSize || 0) * WD) * d4, d1, -3, 20 * Math.cos(WW / 25000) * (1 + WP.radiant) / 2, true, 1, 0.4 * WD);
                            }
                            var d5 = 2 / ((WP.radiant + 2) / 5);
                            LA(WQ, Wk, (WD + (WP.outerSize || 0) * WD) * (Math.cos(WW / 500 + Math.PI) / d5 + 1), d1, -6, WW / 2000 * (1 + WP.radiant) / 2, true, 1);
                            LA(WQ, Wk, (WD + (WP.outerSize || 0) * WD) * (Math.cos(WW / 500) / d5 + 1), d1, -6, -WW / 2000 * (1 + WP.radiant) / 2, true, 1);
                        }
                    }
                }
                function Lj(WI, WP) {
                    var WN = WP.x, WW = WP.y, WD = WP.size;
                    switch (TL.globalAlpha = 1, WP.type) {
                    case 0:
                        h8 && E9.showHitboxes && (LY(TK.width / 2 + (WN - TD) / TN, TK.height / 2 + (WW - TQ) / TN, WD / 4 / TN, '#ffffff'), LY(TK.width / 2 + (WN - TD) / TN, TK.height / 2 + (WW - TQ) / TN, 10 * WD / TN, '#ff0000'));
                        var WQ = jR('#ffffff', false, 10);
                        Lz(WN, WW, 0.1 * WP.size);
                        var Wk = (D5 = performance.now() / 500) + 0.5, WX = D5 - Math.floor(D5), WG = Wk - Math.floor(Wk), Wz = 10 - 9 * WX, WF = 10 - 9 * WG, Wq = 5 * Math.sin(D5 / 5);
                        TL.globalAlpha = 0.2 * Math.min(2 * WX, 1), LA(WP.x, WP.y, WP.size * Wz, WQ, -10, Wq, true, 1, WP.size * Wz * 0.9), TL.globalAlpha = 0.2 * Math.min(2 * WG, 1), LA(WP.x, WP.y, WP.size * WF, WQ, -8, Wq, true, 1, WP.size * WF * 0.9), TL.globalAlpha = 1;
                        var WU = WP.backgroundColor, WB = WP.gridColor, d0 = WP.gridSize, d1 = 5 / TN;
                        if (LA(WP.x, WP.y, WD, WU, 0, 0, true, 0), d1 > 0.3) {
                            var d2 = d0 / TN, d3 = TK.width / 2 + (WP.x - TD) / TN, d4 = TK.height / 2 + (WP.y - TQ) / TN, d5 = WD / TN, d6 = d3 - d5, d7 = d4 - d5, d8 = d3 + d5, d9 = d4 + d5, dO = -WP.x / TN % d2, dY = -WP.y / TN % d2;
                            TL.lineWidth = d1;
                            TL.strokeStyle = WB;
                            TL.beginPath();
                            for (var dM = d6 + dO; dM < d8; dM += d2) {
                                var dS = Math.sqrt(1 - Math.pow(Math.abs(dM - d3) / d5, 2)) * d5;
                                TL.moveTo(dM, d4 - dS);
                                TL.lineTo(dM, d4 + dS);
                            }
                            for (var dK = d7 + dY; dK < d9; dK += d2) {
                                var dC = Math.sqrt(1 - Math.pow(Math.abs(dK - d4) / d5, 2)) * d5;
                                TL.moveTo(d3 - dC, dK);
                                TL.lineTo(d3 + dC, dK);
                            }
                            TL.stroke();
                        }
                        for (var dE = CK(C7(0.12 * WP.size, 10, 20)), dH = WP.size / dE * 4, dZ = 0.2 * Math.sin(D5 / 2) + Math.PI / 2, dV = 10 * Math.sin(D5 / 10), dT = 0; dT < dE; dT++) {
                            var dj = dT / dE * Math.PI * 2 + dV, dJ = WP.size * (1 + 0.05 * Math.sin(dj - dV + 3 * D5)), dR = 1 + 0.05 * Math.sin(dj - dV + D5 / 2);
                            LA(WP.x + Math.sin(dj) * dJ, WP.y + Math.cos(dj) * dJ, dH * dR, WQ, -2, dZ - dj, true, 1, 0.85 * dH);
                        }
                        for (var dL = 30 * Math.min(1, WP.size / 30) * Math.min(T6, 0.1) * E7, dA = Math.random(); dA < dL; dA += Math.random()) {
                            if (Math.random() < 0.1) {
                                var dI = Math.random() * Math.PI * 2, dP = AL(1, 2), dN = AL(60, 120);
                                LF(WN, WW, dP * Math.sin(dI), dP * Math.cos(dI), AL(4, 8), Math.random() * Math.PI * 2, 0, '#ffffff', dN, 1, 10);
                            } else {
                                var dW = Math.random() * Math.PI * 2, dD = AL(3, 5) * Math.max(1, WD / 30), dQ = AL(30, 60), dX = dD * dQ;
                                LF(WN + -Math.sin(dW) * dX, WW + -Math.cos(dW) * dX, dD * Math.sin(dW), dD * Math.cos(dW), AL(4, 8 * Math.max(1, WD / 15)), Math.random() * Math.PI * 2, 0, '#ffffff', dQ, 1, 10, 1, false, WP.id);
                            }
                        }
                        break;
                    case 1:
                        switch (h8 && E9.showHitboxes && LY(TK.width / 2 + (WN - TD) / TN, TK.height / 2 + (WW - TQ) / TN, WD / TN, '#ffffff'), Lz(WN, WW, 1.3), WP.subtype) {
                        case 0:
                            var dG = jP(WP.gamemode), dz = performance.now() / 2500, dF = dz + 0.5, dq = dz - Math.floor(dz), dU = dF - Math.floor(dF), dB = 1 + 3 * dq, f0 = 1 + 3 * dU;
                            TL.globalAlpha = 0.2 * Math.min(2 * (1 - dq), 1), LA(WP.x, WP.y, WP.size * dB, dG, 0, 0, true), TL.globalAlpha = 0.2 * Math.min(2 * (1 - dU), 1), LA(WP.x, WP.y, WP.size * f0, dG, 0, 0, true), TL.globalAlpha = 1;
                            var f1 = '#000000', f2 = 1 - Math.min(WP.lifetime / 30, 1);
                            0 !== f2 && (f1 = jk(f1, Math.floor(256 * f2))), LA(WP.x, WP.y, WP.size, f1, 0, 0, true);
                            for (var f3 = 30 * Math.min(T6, 0.1) * E7, f4 = Math.random(); f4 < f3; f4 += Math.random()) {
                                var f5 = Math.random() * Math.PI * 2, f6 = 0.06 * WP.size;
                                LF(WN, WW, f6 * Math.sin(f5), f6 * Math.cos(f5), AL(0.5, 0.8) * (WP.size / 1.5), Math.random() * Math.PI * 2, 0, '#ffffff', 50, 1, 0, 1, true);
                            }
                            break;
                        case 1:
                            var f7 = performance.now() / 2500, f8 = '#000000', f9 = jP(WP.gamemode), fO = 1 - Math.min(WP.lifetime / 30, 1), fY = 2 * -f7, fM = fY + 0.5, fS = fY - Math.floor(fY), fK = fM - Math.floor(fM), fC = 1 + 5 * fS, fE = 1 + 5 * fK;
                            TL.globalAlpha = 0.2 * Math.min(2 * (1 - fS), 1), LA(WP.x, WP.y, WP.size * fC, f9, 0, 0, true), TL.globalAlpha = 0.2 * Math.min(2 * (1 - fK), 1), LA(WP.x, WP.y, WP.size * fE, f9, 0, 0, true), TL.globalAlpha = 1, LA(WP.x, WP.y, 4 * WP.size, '#ffffff', -3, 20 * Math.cos(f7 / 10) * WP.sign, true, 1, 0.4 * WP.size), LA(WP.x, WP.y, 0.5 * WP.size * (Math.sin(10 * f7 + Math.PI) + 4), '#ffffff', -6, 4 * -f7 * WP.sign, true), LA(WP.x, WP.y, 0.5 * WP.size * (Math.sin(10 * f7) + 4), '#ffffff', -6, 4 * f7 * WP.sign, true), TL.globalAlpha = 1, 0 !== fO && (f8 = jk(f8, Math.floor(256 * fO))), LA(WP.x, WP.y, 1.3 * WP.size, f8, -8, -f7 * WP.sign, true, 1, 0.4 * WP.size), LA(WP.x, WP.y, 1.6 * WP.size, f8, -6, f7 * WP.sign, true, 1, 0.4 * WP.size), LA(WP.x, WP.y, WP.size, f8, 0, 0, true), LA(WP.x, WP.y, 1.3 * WP.size - 10, f8, -8, -f7 * WP.sign, true, 0, 0.4 * WP.size - 5), LA(WP.x, WP.y, 1.6 * WP.size - 10, f8, -6, f7 * WP.sign, true, 0, 0.4 * WP.size - 5);
                            for (var fH = 12 * Math.min(T6, 0.1) * E7, fZ = 0.08 * WP.size, fV = 50 * fZ, fT = Math.random(); fT < fH; fT += Math.random()) {
                                var fj = Math.random() * Math.PI * 2;
                                LF(WN - fV * (D1 = Math.sin(fj)), WW - fV * (D2 = Math.cos(fj)), fZ * D1, fZ * D2, AL(0.5, 0.8) * (WP.size / 1.5), Math.random() * Math.PI * 2, 0, '#ffffff', 50, 1, 0, 1, true);
                            }
                            break;
                        case 2:
                            var fJ = c8.c[0], fR = jR(fJ, false, 1), fL = performance.now() / 3500, fA = fL + 0.5, fI = fL - Math.floor(fL), fP = fA - Math.floor(fA), fN = 1 + 1 * fI, fW = 1 + 1 * fP;
                            TL.globalAlpha = 0.2 * Math.min(2 * (1 - fI), 1), LA(WP.x, WP.y, WP.size * fN, fR, 0, 0, true), TL.globalAlpha = 0.2 * Math.min(2 * (1 - fP), 1), LA(WP.x, WP.y, WP.size * fW, fR, 0, 0, true), TL.globalAlpha = 1, LA(WP.x, WP.y, 1.1 * WP.size, fR, -12, Math.sin(fL / 1000) * WP.sign * 1000, true, 1, WP.size), LA(WP.x, WP.y, WP.size, '#000000', 0, 0, true);
                            for (var fD = 0; fD < 4; fD++) {
                                var fQ = 3 * -fL, fX = (4 - fD - 1) / 4 + (fQ - Math.floor(fQ)) / 4, fG = fX, fz = jz(fR, '#000000', fX);
                                LA(WP.x, WP.y, WP.size * fG, fz, 0, 0, true);
                            }
                            for (var fF = 18 * Math.min(T6, 0.1) * E7, fq = Math.random(); fq < fF; fq += Math.random()) {
                                var fU = Math.random() * Math.PI * 2, fB = 0.01 * WP.size;
                                LF(WN + Math.sin(fU) * WP.size * 0.9, WW + Math.cos(fU) * WP.size * 0.9, fB * Math.sin(fU), fB * Math.cos(fU), AL(0.5, 0.8) * (WP.size / 3), Math.random() * Math.PI * 2, 0, fJ, 50, 1, 1, 1, true);
                            }
                            if (Math.random() / E7 < 0.00005) {
                                var D0 = Math.random() * Math.PI * 2, D1 = Math.sin(D0), D2 = Math.cos(D0), D3 = 0.01 * WP.size * (0.5 + Math.random()), D4 = WP.size / D3;
                                LF(WP.x + 0 * Math.sin(D0), WP.y + 0 * Math.cos(D0), D3 * D1, D3 * D2, AL(6, 6), Math.random(), 0, fJ, D4, 1, 1);
                            }
                        }
                        break;
                    case 2:
                        h8 && E9.showHitboxes && LY(TK.width / 2 + (WN - TD) / TN, TK.height / 2 + (WW - TQ) / TN, WD / 2 / TN, '#ffffff');
                        var D5, D6 = jR(WQ = jN(WI && WI.team, WP.lTeam, WI ? WI.id : '', WP.lID), false, WP.lRadiant), D7 = (D5 = performance.now()) * WP.sign / 1000;
                        if (TL.globalAlpha = 0.5, LA(WP.x, WP.y, WP.size * (2 + Math.cos(D5 / 1000) / 2), D6, 4, D7, true), TL.globalAlpha = 1, LA(WP.x, WP.y, WP.size, D6, 4, D7, true), Math.random() / E7 < 1 / (300 / WP.size)) {
                            var D8 = Math.random() * Math.PI * 2, D9 = Math.random(), DO = D9 * WP.size * (2 + Math.cos(D5 / 1000) / 2);
                            LF(WP.x + DO * Math.sin(D8), WP.y + DO * Math.cos(D8), 1 * Math.random() - 0.5, 1 * Math.random() - 0.5, 18 - 8 * D9, Math.random() * Math.PI * 2, 4, WQ, 30, 0.5, WP.lRadiant);
                        }
                        if (WP.lRadiant > 0) {
                            if (Math.random() / E7 < 1 / (600 / WP.size)) {
                                var DY = Math.random() * Math.PI * 2, DM = Math.random() * WP.size;
                                LF(WP.x + DM * Math.sin(DY), WP.y + DM * Math.cos(DY), (1 * Math.random() - 0.5) * WP.lRadiant, (1 * Math.random() - 0.5) * WP.lRadiant, AL(6, 6 * WP.lRadiant), Math.random(), 0, WQ, 60, 1, WP.lRadiant);
                            }
                            break;
                        }
                    }
                }
                function LJ(WI) {
                    var WP = jR(WI.color, false, WI.radiant), WN = WI.size;
                    TL.globalAlpha = WI.transparency * jU(WI.lifetime, WI.maxLifetime);
                    LA(WI.x, WI.y, WN, WP, WI.sides, WI.d, true);
                    TL.globalAlpha = 1;
                }
                function LR(WI, WP, WN, WW, WD, WQ, Wk) {
                    var WX, WG, Wz = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 1, WF = Wk ? TN : 1;
                    Wk ? (WX = TK.width / 2 + (WI - TD) / WF, WG = TK.height / 2 + (WP - TQ) / WF) : (WX = WI, WG = WP);
                    sC(WX, WG, 2 * WN / WF, 2 * WW / WF, WD, WQ, jD(WQ), 5 * Wz / WF);
                }
                function LL(WI, WP, WN, WW, WD, WQ, Wk) {
                    var WX, WG, Wz = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 1, WF = Wk ? TN : 1;
                    Wk ? (WX = TK.width / 2 + (WI - TD) / WF, WG = TK.height / 2 + (WP - TQ) / WF) : (WX = WI, WG = WP);
                    sE(WX, WG, WN / WF, WW / WF, WQ, WD, 5 * Wz / WF);
                }
                function LA(WI, WP, WN, WW, WD, WQ, Wk) {
                    var WX = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 1, WG = arguments.length > 8 ? arguments[8] : void 0, Wz = !(arguments.length > 9 && void 0 !== arguments[9]) || arguments[9];
                    null == WG && (WG = WN / 2);
                    var WF, Wq, WU = Wk ? TN : 1;
                    Wk ? (WF = TK.width / 2 + (WI - TD) / WU, Wq = TK.height / 2 + (WP - TQ) / WU) : (WF = WI, Wq = WP);
                    var WB = Wz ? WW : null, d0 = jD(WW);
                    0 == WD ? sM(WF, Wq, WN / WU, WB, d0, 5 * WX / WU) : WD > 0 ? sj(WF, Wq, WN / WU, WD, WB, d0, 5 * WX / WU, WQ) : sT(WF, Wq, WN / WU, WG / WU, -WD, WB, d0, 5 * WX / WU, WQ);
                    TL.setTransform(1, 0, 0, 1, 0, 0);
                }
                function LI(WI, WP, WN) {
                    var WW;
                    WW = WI ? jN(WI.team, WP.team, WI.id, WP.id) : jN(0, WP.team, 0, WP.parentID);
                    var WD = WP.showName;
                    E9.showNames ? WI && WI.id == WP.id && !E9.showOwnName && (WD = false) : WD = false;
                    LP(WP, WW, WD, WN);
                }
                function LP(WI, WP, WN, WW) {
                    var WD = WI.x, WQ = WI.y, Wk = (WI.d, WI.size), WX = WI.fadeTime || 1;
                    TL.globalAlpha = 1;
                    var WG = false;
                    if (WI.fadeType) {
                        var Wz = WI.fadeType[1];
                        switch (WI.fadeType[0]) {
                        case 0:
                            Wk *= 1 + 0.5 * (1 - WX), WX < 1 && (WG = true, A3(WX, 1 == WW));
                            break;
                        case 1:
                            Wk *= WX, WX < 1 && (WG = true, A3(WX, 1 == WW));
                            break;
                        case 2:
                            var WF = Math.pow(1 - WX, 2);
                            Wk *= 1 + 2 * (1 - WX), WF * Wz[0] * 4, WD += WF * Math.cos(Wz[1]) * 2000, WQ += WF * Math.sin(Wz[1]) * 2000, WX < 1 && (WG = true, A3(WX, 1 == WW));
                            break;
                        case 3:
                            var Wq = Math.pow(1 - WX, 2);
                            Wk *= 1 - Wq, Wq * Wz[0] * 4, WD = CH(WD, Wz[1], Wq), WQ = CH(WQ, Wz[2], Wq), WX < 1 && (WG = true, A3(WX, 1 == WW));
                        }
                    }
                    var WU, WB, d0 = TK.width / 2 + (WD - TD) / TN, d1 = TK.height / 2 + (WQ - TQ) / TN, d2 = jN(WI.nameColor, WI.nameColor);
                    if (0 == WW) {
                        var d3 = jR(WP, WI.isInvulnerable, WI.radiant);
                        if (WN && (JZ(d0, d1 - Wk / TN - 20, 'lv. ' + Math.round(WI.level), 15, 10, d2), JZ(d0, d1 - Wk / TN - 50, WI.name, 30, 10, d2)), h8) {
                            var d4 = [];
                            E9.showIds && d4.push(WI.id);
                            E9.showClassNames && d4.push(WI.className);
                            for (var d5 = 0; d5 < d4.length; d5++) {
                                JZ(d0, d1 - Wk / TN + 10 + 23 * d5, d4[d5], 15, 10, d2);
                            }
                        }
                        if (WI.healthBarFade && WI.healthBarFade > 0.01) {
                            var d6 = 1;
                            WI.healthBarFade < 0.05 && (d6 = WI.healthBarFade / 0.05);
                            var d7 = WI.healthBarFade, d8 = function (dI) {
                                    ;
                                    for (var dP = jX(dI), dN = dP.reduce(function (dQ, dX) {
                                                return dQ + dX;
                                            }) / dP.length, dW = Math.floor(Math.max(dN, 70) - dN), dD = 0; dD < dP.length; dD++) {
                                        dP[dD] = Math.min(dP[dD] + dW, 255);
                                    }
                                    return jG(dP);
                                }(d3), d9 = Wk / TN * d7, dO = Wk / TN * d7 * 2, dY = d1 + (Wk + 8) / TN;
                            TL.lineCap = 'round';
                            TL.strokeStyle = 'black';
                            TL.lineWidth = 2 * TF * d6;
                            TL.beginPath();
                            TL.moveTo(d0 - d9, dY);
                            TL.lineTo(d0 - d9 + dO, dY);
                            TL.stroke();
                            TL.strokeStyle = jG(jF(jX(d8), '#000000', 0.8));
                            TL.lineWidth = TF * d6;
                            TL.beginPath();
                            TL.moveTo(d0 - d9, dY);
                            TL.lineTo(d0 - d9 + dO * Math.max(1, 0), dY);
                            TL.stroke();
                            TL.strokeStyle = jk(d8, Math.round(80 * (1 - WI.damageTime || 0)));
                            TL.lineWidth = TF * d6;
                            TL.beginPath();
                            TL.moveTo(d0 - d9, dY);
                            TL.lineTo(d0 - d9 + dO * (Math.max(WI.hp, 0) / WI.maxHP), dY);
                            TL.stroke();
                            E9.showPercentagesOnHealthBars && 10 / TN > 3 && JZ(d0, dY, Math.max(0, CC(WI.hp / WI.maxHP * 100, 1)) + '%', 10 / TN * d7 * d6, 5 / TN * d7 * d6, d2);
                        }
                    } else {
                        var dM = false, dS = 0, dK = false;
                        if (AI[WI.id] && (dM = (dS = CT(AI[WI.id].lerping)) > 0.05, dK = AI[WI.id].time < 0), (WI.id in AA || dM) && E9.showChat && 0 == N6) {
                            for (var dC = AA[WI.id] || [], dE = 0, dH = 0, dZ = (WN ? '' == WI.name ? 55 : 95 : 25) - 20, dV = 0, dT = dM ? -1 : 0; dT < dC.length; dT++) {
                                var dj = void 0, dJ = void 0, dR = void 0, dL = void 0;
                                if (-1 == dT) {
                                    dH += dJ = dS;
                                    dR = 37.5;
                                    dL = dK ? 1 : dJ;
                                } else {
                                    dj = dC[dT];
                                    dV > 3 && (dj.time = Math.min(dj.time, 0.5));
                                    dH += dJ = jq(dj.time, 12);
                                    var dA = (WU = dj.time, (WB = 12) - WU > WB - 0.5 ? dH - dJ + 1 : dH);
                                    dL = 0 != dT || dM ? Math.max(0, 1 - (dA - 1)) : dA;
                                }
                                JH(d0, d1 - Wk / TN - dZ - dE - 0.5 * dL * 25, -1 == dT ? null : dj.message, 1, 25, 0, true, dJ, 0 == dL ? 0 : 0.4, 0.4 * dL, d2, dj ? CT(dj.typingFade) : 0);
                                if (-1 != dT) {
                                    dV += CH(1, dj.message.lines.length, dj.typingFade);
                                    dR = CH(37.5, dj.message.height, dj.typingFade);
                                }
                                dE += dJ * (dR + 5.5 + 0.5 * dL * 25);
                            }
                        }
                    }
                    WG && A4();
                }
                function LN(WI) {
                    ;
                    TL = TV;
                    TO.width = 4096;
                    TO.height = 4096;
                    var WP = TO.width / 2, WN = TO.height / 2, WW = 1.5 * WI.size, WQ = WI.d, Wk = c8.c[WI.color] || jR(jN(WI.team, WI.team, 0, 0));
                    if (WI.gadgets) {
                        for (var WX = 0; WX < WI.gadgets.length; WX++) {
                            var WG = WI.gadgets[WX];
                            ;
                            0 == WG.type && delete WG.rot;
                            2 == WG.type && (WG.enabled = true);
                        }
                        for (var Wz = 0; Wz < WI.barrels.length; Wz++) {
                            WI.barrels[Wz].animTime = 0;
                        }
                    }
                    WI.outerSize > 0 && LA(WP, WN, WW + WI.outerSize * WW, '#5F676C', WI.outerSides, WQ, false, 1.5, WW);
                    WI.gadgets && s7(WP, WN, WW, WQ, WI.barrels, false, 1.5);
                    LA(WP, WN, WW, Wk, WI.sides, WQ, false, 1.5);
                    WI.gadgets && (s1(WP, WN, WQ, WW, Wk, WI.layers, 0, 0, false, false, 1.5), s4(WP, WN, WW, WQ, WI.gadgets, Wk, 0, 0, false, false, 1.5));
                    TL = TE;
                    (function (WF, Wq) {
                        var WU = WF.toDataURL(), WB = document.createElement('a');
                        WB.href = WU;
                        WB.download = Wq;
                        document.body.appendChild(WB);
                        WB.click();
                    }(function (WF) {
                        var Wq = WF.getContext('2d'), WU = document.createElement('canvas').getContext('2d'), WB = LW(Wq.getImageData(0, 0, WF.width, WF.height)), d0 = WB.bottom - WB.top, d1 = WB.right - WB.left, d2 = Wq.getImageData(WB.left, WB.top, d1, d0);
                        return WU.canvas.width = d1, WU.canvas.height = d0, WU.putImageData(d2, 0, 0), WU.canvas;
                    }(TO), ''.concat(WI.filename, '.png')));
                    console.log('Downloading entity: ', WI);
                }
                function LW(WI) {
                    ;
                    for (var WP, WN, WD = 0; WD < WI.data.length; WD += 4) {
                        if (0 !== WI.data[WD + 3]) {
                            WP = WD / 4 % WI.width;
                            WN = ~~(WD / 4 / WI.width);
                            null === WW.top && (WW.top = WN);
                            (null === null || WP < WW.left) && (null = WP);
                            (null === WW.right || WW.right < WP) && (WW.right = WP);
                            (null === WW.bottom || null < WN) && (null = WN);
                        }
                    }
                    return WW.bottom++, null++, WW;
                }
                var LD = [], LQ = 0, LX = 0;
                function LG() {
                    LD = [];
                    LQ = 0;
                    LX = 0;
                }
                function Lz(WI, WP, WN) {
                    var WW = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.0001;
                    0 != E9.cameraShake && LD.push({
                        'x': WI,
                        'y': WP,
                        'power': WN * E9.cameraShake / 100,
                        'time': WW,
                        'maxTime': WW
                    });
                }
                function LF(WI, WP, WN, WW, WD, WQ, Wk, WX, WG) {
                    var Wz = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 1, WF = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : 0, Wq = arguments.length > 11 && void 0 !== arguments[11] ? arguments[11] : 1, WU = arguments.length > 12 && void 0 !== arguments[12] && arguments[12], WB = arguments.length > 13 ? arguments[13] : void 0, d0 = arguments.length > 14 && void 0 !== arguments[14] ? arguments[14] : 1;
                    Vz.length < E6 && Vz.push({
                        'x': WI,
                        'y': WP,
                        'xVel': WN,
                        'yVel': WW,
                        'size': WD,
                        'd': WQ,
                        'sides': Wk,
                        'color': WX,
                        'lifetime': WG / 60,
                        'maxLifetime': WG,
                        'startSize': WD,
                        'endSize': d0 * WD,
                        'transparency': Wz,
                        'radiant': WF,
                        'friction': Wq,
                        'below': WU,
                        'riftAnchorID': WB
                    });
                }
                function Lq() {
                    Vz = [];
                }
                function LU(WI) {
                    ;
                    for (var WP = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], WN = {
                                WP: WA[WP],
                                WP: WA[WP],
                                value: (null == Zj[WP.key] ? WP.default || 1 : Zj[WP.key]) / (WP.multiplier || 1),
                                lines: d0,
                                width: d0.slice().sort(function (f5, f6) {
                                    ;
                                    return f6.width - f5.width;
                                })[0].width,
                                height: WN.lines.length * WD * 1.2 + 0.3 * WD,
                                descriptionFontSize: Wq / WW,
                                description: d5
                            }, WW = 0; WW < WP.length; WW++) {
                        var WD = WP[WW];
                        0 == WD.type && (WN[WD.id] = {
                            'x': WD.x,
                            'y': WD.y
                        });
                    }
                    Vz.forEach(function (WQ, Wk) {
                        ;
                        if (WQ.lifetime -= WI, WQ.x += 60 * WQ.xVel * WI, WQ.y += 60 * WQ.yVel * WI, WQ.size = CH(WQ.startSize, WQ.endSize, 1 - WQ.lifetime / (WQ.maxLifetime / 60)), 1 != WQ.friction) {
                            var WX = 1 - 60 * (1 - WQ.friction) * WI;
                            ;
                            ;
                        }
                        if (WQ.riftAnchorID) {
                            var WG = WN[WQ.riftAnchorID];
                            WG && (null == WQ.anchorX && (WQ.anchorX = WG.x, WQ.anchorY = WG.y), WQ.x = WG.x + (WQ.x - WQ.anchorX), WQ.y = WG.y + (WQ.y - WQ.anchorY), WQ.anchorX = WG.x, WQ.anchorY = WG.y);
                        }
                        WQ.lifetime < 0 && Vz.splice(Wk, 1);
                    });
                }
                function LB(WI) {
                    var WP = WI.x, WN = -WI.y, WW = c8.c[WI.level], WD = 20;
                    if (WI.polyp) {
                        WD = 45;
                        WW = '#f177dd';
                    } else {
                        for (var WQ = 0; WQ < WI.level; WQ++) {
                            WD *= 1.5;
                        }
                    }
                    WI.radiant && (LT(null, {
                        'x': WP,
                        'y': WN,
                        'size': WD,
                        'sides': WI.polyp ? 3 : 3 + WI.level,
                        'outerSides': 0,
                        'outerSize': 0,
                        'radiant': WI.radiant
                    }, WW), WW = jR(WW, false, WI.radiant));
                    LA(WP, WN, WD, WW, WI.polyp ? 3 : 3 + WI.level, WI.d, true);
                }
                function s0(WI, WP, WN, WW, WD, WQ, Wk, WX, WG) {
                    var Wz = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : [], WF = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : [], Wq = arguments.length > 11 && void 0 !== arguments[11] ? arguments[11] : 0;
                    WP = -WP;
                    Wq && (LT(null, {
                        'x': WI,
                        'y': WP,
                        'size': WN,
                        'sides': WD,
                        'outerSides': WQ,
                        'outerSize': Wk,
                        'radiant': Wq
                    }, WX), WX = jR(WX, false, Wq));
                    Wk > 0 && LA(WI, WP, WN + Wk * WN, '#5F676C', WQ, WW, true, 1, WN);
                    s7(WI, WP, WN, WW, WG, true);
                    LA(WI, WP, WN, WX, WD, WW, true);
                    s1(WI, WP, WW, WN, WX, WF, 0, 0, false, true);
                    s4(WI, WP, WN, WW, Wz, WX, 0, false, WX, true);
                }
                function s1(WI, WP, WN, WW, WD, WQ, Wk, WX, WG) {
                    ;
                    for (var Wz = !(arguments.length > 9 && void 0 !== arguments[9]) || arguments[9], WF = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : 1, Wq = 0; Wq < WQ.length; Wq++) {
                        var WU = WQ[Wq], WB = WD;
                        WU.hasOwnProperty('team') && (WB = jk(jR(jN(WU.team, WU.team, 0, 0), WG, WX), Wk));
                        WU.offsetX || (WU.offsetX = 0);
                        WU.offsetY || (WU.offsetY = 0);
                        var d0 = WF;
                        1 == WU.hideBorder && (d0 = 0);
                        var d1 = WN + (WU.rot || 0), d2 = WI + (WU.offsetX * Math.sin(1.57079633 - WN) + WU.offsetY * Math.cos(WN + 1.57079633)) * WW, d3 = WP + (WU.offsetY * Math.cos(WN) + WU.offsetX * Math.sin(-WN + Math.PI)) * WW;
                        if (WU.outerSize > 0 && LA(d2, d3, (WU.size + WU.outerSize) * WW, WU.selected ? jQ('#5F676C'.substring(1), 'ffffff', 0.2 + (1 + Math.sin(performance.now() / 250)) / 2 * 0.8) : '#5F676C', WU.outerSides, d1, Wz, d0, WU.size * WW), LA(d2, d3, WU.size * WW, WU.selected ? jQ(WB.substring(1), 'ffffff', 0.2 + (1 + Math.sin(performance.now() / 250)) / 2 * 0.8) : WB, WU.sides, d1, Wz, d0), LC && V3) {
                            var d4 = WI + (-WU.offsetY * Math.sin(WN) + WU.offsetX * Math.sin(WN + s8)) * WW, d5 = WP - (WU.offsetX * Math.cos(WN + s8) + -WU.offsetY * Math.cos(WN)) * WW, d6 = {
                                    'x': TK.width / 2 + (d4 - TD) / TN,
                                    'y': TK.height / 2 + (d5 - TQ) / TN,
                                    'r': (WU.size + WU.outerSize) * WW / TN,
                                    'rot': WN
                                };
                            AH(VG, d6) && V7.push({
                                'type': 'layer',
                                'index': Wq,
                                'stack': eI(LE)
                            });
                        }
                    }
                }
                function s2(WI) {
                    var WP = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (WI.gadgets) {
                        var WN, WW = WI.fadeTime || 1, WD = WI.size, WQ = WI.x, Wk = WI.y, WX = WI.d, WG = 1;
                        if (WI.fadeType) {
                            var Wz = WI.fadeType[1];
                            switch (WI.fadeType[0]) {
                            case 0:
                                WD *= 1 + 0.5 * (1 - WW), WW < 1 && (WG = WW);
                                break;
                            case 1:
                                WD *= WW;
                                break;
                            case 2:
                                var WF = Math.pow(1 - WW, 2);
                                WD *= 1 + 2 * (1 - WW), WX += WF * Wz[0] * 4, WQ += WF * Math.cos(Wz[1]) * 2000, Wk += WF * Math.sin(Wz[1]) * 2000, WW < 1 && (WG = WW);
                                break;
                            case 3:
                                var Wq = Math.pow(1 - WW, 2);
                                WD *= 1 - Wq, WX += Wq * Wz[0] * 4, WQ = CH(WQ, Wz[1], Wq), Wk = CH(Wk, Wz[2], Wq);
                            }
                        }
                        var WU = null !== (WN = WI.lastColor) && void 0 !== WN ? WN : '#ffffff', WB = function d0(d1, d2, d3, d4, d5) {
                                ;
                                for (var d6 = 0; d6 < d5.length; d6++) {
                                    var d7 = d5[d6];
                                    if (2 == d7.type && 0 != d7.alpha) {
                                        var d8 = 1;
                                        null != d7.enableFade && (d8 = CT(d7.enableFade));
                                        var d9 = WG * (d7.alpha || 0.3);
                                        s3(d1, d2, d7.offsetX, d7.offsetY, d7.subtype, d7.auraColor, d7.hideBorder, d7.rotationType, d3, d7.rot, d4, d7.sides, d7.radius, WU, d8, d9, null == d7.deactivatedApha ? 0.3 : d7.deactivatedApha, WP && 0 == d7.showParticles);
                                    }
                                    if (3 == d7.type) {
                                        var dO = void 0;
                                        switch (d7.rotationType) {
                                        case 0:
                                            dO = d7.baseRot + d3;
                                            break;
                                        case 1:
                                        case 4:
                                            dO = null == d7.rot ? d7.baseRot + d3 : d7.rot;
                                            break;
                                        case 3:
                                        case 2:
                                            dO = 0 == d7.anchored ? null == d7.rot ? d7.baseRot + d3 : d7.baseRot + d3 + d7.rot : null == d7.rot ? d7.baseRot : d7.rot;
                                        }
                                        d0(d1 + (d7.offsetX * Math.sin(1.57079633 - d3) + d7.offsetY * Math.cos(d3 + 1.57079633)) * d4, d2 + (d7.offsetY * Math.cos(d3) + d7.offsetX * Math.sin(-d3 + Math.PI)) * d4, dO, d7.width * d4, d7.tank.gadgets);
                                    }
                                }
                            };
                        WB(WQ, Wk, WX, WD, WI.gadgets);
                        TL.globalAlpha = 1;
                    }
                }
                function s3(WI, WP, WN, WW, WD, WQ, Wk, WX, WG, Wz, WF, Wq, WU, WB, d0, d1, d2) {
                    var d3 = !(arguments.length > 17 && void 0 !== arguments[17]) || arguments[17], d4 = jA(WD, WQ, WB), d5 = TK.width / 2 + (WI - TD) / TN, d6 = TK.height / 2 + (WP - TQ) / TN;
                    if (d3 && Math.random() / E7 < 1 / (300 / (WF * WU * d0 * d0))) {
                        var d7 = Math.random() * Math.PI * 2, d8 = Math.random() * (WF * WU);
                        LF(WI + d8 * Math.sin(d7) + (WN * Math.sin(1.57079633 - WG) + WW * Math.cos(WG + 1.57079633)) * WF * d0, WP + d8 * Math.cos(d7) + (WW * Math.cos(WG) + WN * Math.sin(-WG + Math.PI)) * WF * d0, 1 * Math.random() - 0.5, 1 * Math.random() - 0.5, 6, Math.random() * Math.PI * 2, Wq, d4, 30, d1);
                    }
                    if (0 != d2 || 0 != d0) {
                        TL.globalAlpha = d1 * CH(d2, 1, d0);
                        TL.translate(d5, d6);
                        TL.rotate(WG);
                        TL.translate(-d5, -d6);
                        var d9 = d4;
                        0 == d0 ? d9 = '#5F676C' : d0 < 1 && (d9 = jQ(d4.substring(1), '#5F676C'.substring(1), d0));
                        LA(WI + WN * WF, WP + WW * WF, WF * WU, d9, Wq, (0 == WX ? 0 : -WG) + Wz, true, 1 == Wk ? 0 : 1);
                    }
                }
                function s4(WI, WP, WN, WW, WD, WQ, Wk, WX, WG, Wz) {
                    ;
                    for (var WF = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : 1, Wq = 0; Wq < WD.length; Wq++) {
                        var WU = WD[Wq];
                        3 == WU.type ? s6(Wq, WI, WP, WN, WW, WU, WQ, Wk, WX, WG, Wz, WF) : s5(Wq, WI, WP, WN, WW, WU, WQ, Wz, 1 == WU.hideBorder ? 0 : WF);
                    }
                }
                function s5(WI, WP, WN, WW, WD, WQ, Wk, WX) {
                    var WG, Wz, WF, Wq = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 1, WU = WX ? TN : 1, WB = WQ.width * (1.5 - 0.8 * Math.max(0, WQ.animTime || 0)) * WW, d0 = WQ.length * (1 - 0.2 * Math.max(0, WQ.animTime || 0));
                    WX ? (Wz = TK.width / 2 + (WP - TD) / WU, WF = TK.height / 2 + (WN - TQ) / WU) : (Wz = WP, WF = WN);
                    var d1 = null == WQ.color ? '#999999' : jN(WQ.color, WQ.color);
                    if (TL.lineJoin = 'round', TL.fillStyle = WQ.selected ? jQ(d1.substring(1), 'ffffff', 0.2 + (1 + Math.sin(performance.now() / 250)) / 2 * 0.8) : d1, TL.lineWidth = 5 * Wq / WU, TL.strokeStyle = jD(TL.fillStyle), TL.beginPath(), TL.translate(Wz, WF), TL.rotate(WD), TL.translate(WQ.offsetX * WW / WU, WQ.offsetY * WW / WU), 0 === WQ.type) {
                        TL.rotate(-WD);
                        TL.rotate(null !== (WG = WQ.rot) && void 0 !== WG ? WG : WD + WQ.baseRot);
                        TL.rect(-1 * WQ.width * WW / WU, -2 * d0 * WW / WU, WQ.width * WW * 2 / WU, 2 * WW * d0 / WU);
                    }
                    switch (TL.fill(), Wq && TL.stroke(), WQ.type) {
                    case 0:
                        if (sM(0, 0, 1.5 * WQ.width * WW / WU, TL.fillStyle, TL.strokeStyle, 5 * Wq / WU), EN && WQ.selected && E9.showAutoCannonRangeGuideLines) {
                            var d2 = Wz + Math.cos(WD) * (WQ.offsetX * WW) / WU - Math.sin(WD) * (WQ.offsetY * WW) / WU, d3 = WF + Math.sin(WD) * (WQ.offsetX * WW) / WU + Math.cos(WD) * (WQ.offsetY * WW) / WU, d4 = (30 * WQ.minDistance || 0) + WW, d5 = (30 * WQ.maxDistance || 0) + WW;
                            d4 == d5 && d4 > 0 ? LY(d2, d3, d4 / WU, '#ffffff') : (d4 > 0 && LY(d2, d3, d4 / WU, '#00ff00'), d5 > 0 && LY(d2, d3, d5 / WU, '#ff0000'));
                        }
                        break;
                    case 1:
                        TL.rotate(WQ.rot), TL.beginPath(), TL.rect(WB / WU * -0.5, WB / WU * -0.5, WB / WU, WB / WU), TL.fill(), Wq && TL.stroke();
                        break;
                    case 2:
                        TL.setTransform(1, 0, 0, 1, 0, 0), TL.translate(Wz, WF), TL.rotate(WD), TL.translate(-Wz, -WF);
                        var d6 = 1;
                        null != WQ.enableFade && (d6 = WQ.enableFade), LA(WP + WQ.offsetX * WW, WN + WQ.offsetY * WW, WQ.width * WW, TL.fillStyle, WQ.backSides, WQ.rot, WX, Wq);
                        var d7 = jA(WQ.subtype, WQ.auraColor, Wk), d8 = d7;
                        if (0 == d8 ? d8 = '#5F676C' : d6 < 1 && (d8 = jQ('#5F676C'.substring(1), d7.substring(1), 1 - d6)), TL.translate(Wz, WF), TL.rotate(WD), TL.translate(-Wz, -WF), LA(WP + WQ.offsetX * WW, WN + WQ.offsetY * WW, WQ.width * WW * 0.5, d8, WQ.sides, (0 == WQ.rotationType ? 0 : -WD) + WQ.rot, WX, Wq), d6 < 1 && d6 > 0) {
                            TL.translate(Wz, WF);
                            TL.rotate(WD);
                            TL.translate(-Wz, -WF);
                            var d9 = TL.globalAlpha;
                            TL.globalAlpha = 0.45 * d9 * Math.min(1, 3 * (1 - d6));
                            LA(WP + WQ.offsetX * WW, WN + WQ.offsetY * WW, WQ.width * WW * 0.5 * Math.max(0, 6 * d6 - 1), d7, WQ.sides, (0 == WQ.rotationType ? 0 : -WD) + WQ.rot, WX, Wq);
                            TL.globalAlpha = d9;
                        }
                    }
                    if (LC && V3) {
                        var dO = WP + (-WQ.offsetY * Math.sin(WD) + WQ.offsetX * Math.sin(WD + s8)) * WW, dY = WN - (WQ.offsetX * Math.cos(WD + s8) + -WQ.offsetY * Math.cos(WD)) * WW, dM = {
                                'x': TK.width / 2 + (dO - TD) / TN,
                                'y': TK.height / 2 + (dY - TQ) / TN,
                                'r': WQ.width * WW * (0 == WQ.type ? 1.5 : 1) / TN
                            };
                        AH(VG, dM) && V7.push({
                            'type': 'gadget',
                            'index': WI,
                            'stack': eI(LE)
                        });
                    }
                    TL.setTransform(1, 0, 0, 1, 0, 0);
                }
                function s6(WI, WP, WN, WW, WD, WQ, Wk, WX, WG, Wz, WF) {
                    var Wq, WU = arguments.length > 11 && void 0 !== arguments[11] ? arguments[11] : 1;
                    switch (WQ.rotationType) {
                    case 0:
                        Wq = WQ.baseRot + WD;
                        break;
                    case 1:
                    case 4:
                        Wq = null == WQ.rot ? WQ.baseRot + WD : WQ.rot;
                        break;
                    case 3:
                    case 2:
                        Wq = 0 == WQ.anchored ? null == WQ.rot ? WQ.baseRot + WD : WQ.baseRot + WD + WQ.rot : null == WQ.rot ? WQ.baseRot : WQ.rot;
                    }
                    var WB, d0 = WP + (WQ.offsetX * Math.sin(-WD + s8) + WQ.offsetY * Math.cos(WD + s8)) * WW, d1 = WN + (WQ.offsetY * Math.cos(WD) + WQ.offsetX * Math.sin(-WD + Math.PI)) * WW, d2 = Wk;
                    if (null != WQ.team && (d2 = 1 == WQ.suppressColor ? jk(jR(jN(WQ.team, WQ.team, 0, 0), Wz, WG), WX) : jN(WQ.team, WQ.team, 0, 0)), LC && V3 && (WB = eI(LE), LE.push(WI)), WQ.outerSize > 0 && LA(d0, d1, (WQ.width + WQ.outerSize) * WW, WQ.selected ? jQ('#5F676C'.substring(1), 'ffffff', 0.2 + (1 + Math.sin(performance.now() / 250)) / 2 * 0.8) : '#5F676C', WQ.outerSides, Wq, WF, WU, WQ.width * WW), s7(d0, d1, WW * WQ.width, Wq, WQ.tank.barrels, WF, WU), LC && V3) {
                        var d3 = WP + (-WQ.offsetY * Math.sin(WD) + WQ.offsetX * Math.sin(WD + s8)) * WW, d4 = WN - (WQ.offsetX * Math.cos(WD + s8) + -WQ.offsetY * Math.cos(WD)) * WW, d5 = {
                                'x': TK.width / 2 + (d3 - TD) / TN,
                                'y': TK.height / 2 + (d4 - TQ) / TN,
                                'r': WQ.width * WW / TN
                            };
                        AH(VG, d5) && V7.push({
                            'type': 'gadget',
                            'index': WI,
                            'stack': eI(LE).slice(0, -1)
                        });
                    }
                    if (LA(d0, d1, WQ.width * WW, WQ.selected ? jQ(d2.substring(1), 'ffffff', 0.2 + (1 + Math.sin(performance.now() / 250)) / 2 * 0.8) : d2, WQ.sides, Wq, WF, WU), s1(d0, d1, Wq, WW * WQ.width, d2, WQ.tank.layers, WX, WG, Wz, WF, WU), s4(d0, d1, WW * WQ.width, Wq, WQ.tank.gadgets, d2, WX, WG, Wz, WF, WU), LC && V3 && (LE = WB), EN && WQ.selected) {
                        var d6 = WF ? TN : 1, d7 = TK.width / 2 + (d0 - TD) / d6, d8 = TK.height / 2 + (d1 - TQ) / d6;
                        if (1 == WQ.rotationType && E9.showAutoCannonRangeGuideLines) {
                            var d9 = (30 * WQ.minDistance || 0) + WW, dO = (30 * WQ.maxDistance || 0) + WW;
                            E9.showTankSectionFrontGuideLines && LO(d7, d8, Wq, '#ffffff');
                            WQ.maxSpread > 0 && WQ.maxSpread < 360 && 0 == WQ.spreadDetection || (d9 == dO && d9 > 0 ? LY(d7, d8, d9 / d6, '#ffffff') : (d9 > 0 && LY(d7, d8, d9 / d6, '#00ff00'), dO > 0 && LY(d7, d8, dO / d6, '#ff0000')));
                            WQ.maxSpread > 0 && WQ.maxSpread < 360 && (0 == WQ.spreadDetection ? d9 == dO && d9 > 0 ? (LO(d7, d8, Wq + C9(WQ.maxSpread / 2), '#ffffff', d9 / d6), LO(d7, d8, Wq - C9(WQ.maxSpread / 2), '#ffffff', d9 / d6), LM(d7, d8, d9 / d6, Wq - C9(WQ.maxSpread / 2), Wq + C9(WQ.maxSpread / 2), '#ffffff')) : (LO(d7, d8, Wq + C9(WQ.maxSpread / 2), '#ff0000', (dO - d9) / d6, d9 / d6), LO(d7, d8, Wq - C9(WQ.maxSpread / 2), '#ff0000', (dO - d9) / d6, d9 / d6), LM(d7, d8, dO / d6, Wq - C9(WQ.maxSpread / 2), Wq + C9(WQ.maxSpread / 2), '#ff0000'), LO(d7, d8, Wq + C9(WQ.maxSpread / 2), '#00ff00', d9 / d6), LO(d7, d8, Wq - C9(WQ.maxSpread / 2), '#00ff00', d9 / d6), LM(d7, d8, d9 / d6, Wq - C9(WQ.maxSpread / 2), Wq + C9(WQ.maxSpread / 2), '#00ff00')) : (LO(d7, d8, Wq + C9(WQ.maxSpread / 2), '#ffffff'), LO(d7, d8, Wq - C9(WQ.maxSpread / 2), '#ffffff')));
                        } else {
                            if (2 == WQ.rotationType && E9.showRotatingTankSectionGuideLines && WQ.rotationSpeed) {
                                E9.showTankSectionFrontGuideLines ? (LO(d7, d8, Wq, '#ffffff'), LM(d7, d8, WQ.width * WW / d6 + 10, Wq + C9(30), Wq - C9(30), '#ffffff')) : LY(d7, d8, WQ.width * WW / d6 + 10, '#ffffff');
                                for (var dY = performance.now(), dM = 8 + Math.floor((WQ.width * WW / d6 + 10 - 30) / 10), dS = 0; dS < dM; dS++) {
                                    var dK = dS / dM * Math.PI * 2 + 1.2 * dY / 3000 * WQ.rotationSpeed;
                                    E9.showTankSectionFrontGuideLines && !CI(dK, Wq + C9(30), Wq - C9(30)) || LK(d7, d8, WQ.width * WW / d6 + 10, dK, -Math.sign(WQ.rotationSpeed) * C9(45), 6.5, '#ffffff');
                                }
                                if (E9.showTankSectionFrontGuideLines) {
                                    for (var dC = 0, dE = [
                                                Wq + C9(30),
                                                Wq - C9(30)
                                            ]; dC < dE.length; dC++) {
                                        var dH = dE[dC];
                                        LK(d7, d8, WQ.width * WW / d6 + 10, dH, -Math.sign(WQ.rotationSpeed) * C9(45), 8, '#ffffff');
                                    }
                                }
                            } else {
                                if (3 == WQ.rotationType && E9.showRotatingTankSectionGuideLines && WQ.rotationSpeed) {
                                    var dZ = performance.now(), dV = 8 + Math.floor((WQ.width * WW / d6 + 10 - 30) / 10), dT = Math.abs(WQ.maxRotation) || 0;
                                    if (dT) {
                                        LO(d7, d8, Wq + dT / 2, '#ffffff');
                                        LO(d7, d8, Wq - dT / 2, '#ffffff');
                                        LM(d7, d8, WQ.width * WW / d6 + 10, Wq - dT / 2, Wq + dT / 2, '#ffffff');
                                        for (var dj = 0, dJ = [
                                                    Wq - dT / 2,
                                                    Wq + dT / 2
                                                ]; dj < dJ.length; dj++) {
                                            var dR = dJ[dj];
                                            LK(d7, d8, WQ.width * WW / d6 + 10, dR, -Math.sign(WQ.rotationSpeed) * C9(45), 8, '#ffffff');
                                        }
                                    } else {
                                        if (E9.showTankSectionFrontGuideLines) {
                                            LO(d7, d8, Wq, '#ffffff');
                                            LM(d7, d8, WQ.width * WW / d6 + 10, Wq + C9(30), Wq - C9(30), '#ffffff');
                                            for (var dL = 0, dA = [
                                                        Wq + C9(30),
                                                        Wq - C9(30)
                                                    ]; dL < dA.length; dL++) {
                                                var dI = dA[dL];
                                                LK(d7, d8, WQ.width * WW / d6 + 10, dI, -Math.sign(WQ.rotationSpeed) * C9(45), 8, '#ffffff');
                                            }
                                        } else {
                                            LY(d7, d8, WQ.width * WW / d6 + 10, '#ffffff');
                                        }
                                    }
                                    for (var dP = 0; dP < dV; dP++) {
                                        var dN = dP / dV * Math.PI * 2 + 1.2 * dZ / 3000 * WQ.rotationSpeed;
                                        (dT ? CI(dN, Wq - dT / 2, Wq + dT / 2) : !E9.showTankSectionFrontGuideLines || CI(dN, Wq + C9(30), Wq - C9(30))) && LK(d7, d8, WQ.width * WW / d6 + 10, dN, -Math.sign(WQ.rotationSpeed) * C9(45), 6.5, '#ffffff');
                                    }
                                } else {
                                    4 == WQ.rotationType ? (E9.showTankSectionFrontGuideLines && LO(d7, d8, Wq, '#ffffff'), WQ.maxSpread > 0 && WQ.maxSpread < 360 && E9.showOtherTankSectionGuideLines && (LO(d7, d8, Wq + C9(WQ.maxSpread / 2), '#ffffff'), LO(d7, d8, Wq - C9(WQ.maxSpread / 2), '#ffffff'))) : E9.showTankSectionFrontGuideLines && LO(d7, d8, Wq, '#ffffff');
                                }
                            }
                        }
                    }
                }
                function s7(WI, WP, WN, WW, WD, WQ) {
                    ;
                    for (var Wk = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, WX = 0; WX < WD.length; WX++) {
                        var WG = WD[WX];
                        s9(WX, WI, WP, WN, WW + WG.rot, WG.offset, WG.distance, WG.width, WG.length, WG.animTime, null == WG.visualType ? WG.type : WG.visualType, WQ, 1 == WG.hideBorder ? 0 : Wk, WG.selected, WG.color);
                    }
                }
                var s8 = Math.PI / 2;
                function s9(WI, WP, WN, WW, WD, WQ, Wk, WX, WG, Wz, WF, Wq) {
                    var WU, WB, d0 = arguments.length > 12 && void 0 !== arguments[12] ? arguments[12] : 1, d1 = arguments.length > 13 ? arguments[13] : void 0, d2 = arguments.length > 14 ? arguments[14] : void 0, d3 = Wq ? TN : 1, d4 = WG * (1 - 0.2 * Math.max(0, Wz || 0));
                    Wq ? (WU = TK.width / 2 + (WP - TD) / d3, WB = TK.height / 2 + (WN - TQ) / d3) : (WU = WP, WB = WN);
                    var d5 = null == d2 ? '#999999' : jN(0, d2);
                    switch (TL.lineJoin = 'round', TL.fillStyle = d1 ? jQ(d5.substring(1), 'ffffff', 0.2 + (1 + Math.sin(performance.now() / 250)) / 2 * 0.8) : d5, d0 && (TL.lineWidth = 5 * d0 / d3, TL.strokeStyle = jD(TL.fillStyle)), TL.beginPath(), TL.translate(WU, WB), TL.rotate(WD), TL.translate(WQ * WW / d3, -Wk * WW / d3), WF) {
                    case 0:
                        TL.rect(-1 * WX * WW / d3, -2 * d4 * WW / d3, WX * WW * 2 / d3, 2 * WW * d4 / d3);
                        break;
                    case 1:
                        sH(-1 * WX * WW / d3, 0 / d3, WX * WW * 2 / d3, -2 * WW * d4 / d3, WX * WW / d3);
                        break;
                    case 2:
                        TL.rect(-0.5 * WX * WW / d3, -1.5 * d4 * WW / d3, WX * WW / d3, 1.5 * WW * d4 / d3), TL.fill(), d0 && TL.stroke(), sH(-1 * WX * WW / d3, -1.5 * WW * d4 / d3, WX * WW * 2 / d3, -2 * WW * d4 / d3, WX * WW / d3);
                        break;
                    case 3:
                        TL.rect(-WX * WW / d3, -1.33333333333 * d4 * WW / d3, WX * WW * 2 / d3, 1.33333333333 * WW * d4 / d3), TL.fill(), d0 && TL.stroke(), TL.rect(-0.7 * WX * WW / d3, -1.3333333333 * d4 * WW / d3, 1.4 * WX * WW / d3, -0.3333333333 * WW * d4 / d3), TL.fill(), d0 && TL.stroke(), TL.rect(-WX * WW / d3, -1.66666666666666 * d4 * WW / d3, WX * WW * 2 / d3, -0.3333333333 * WW * d4 / d3);
                        break;
                    case 4:
                        sH(-1 * WX * WW / d3, 0 / d3, WX * WW * 2 / d3, -1.3333333333 * WW * d4 / d3, WX * WW / d3), TL.rect(-0.7 * WX * WW / d3, -1.3333333333 * d4 * WW / d3, 1.4 * WX * WW / d3, -0.3333333333 * WW * d4 / d3), TL.fill(), d0 && TL.stroke(), sH(-0.5 * WX * WW / d3, -1.66666666666666 * d4 * WW / d3, WX * WW / d3, -2 * WW * d4 / d3, WX * WW * 2 / d3);
                        break;
                    case 5:
                        sH(-1 * WX * WW / d3, 0 / d3, WX * WW * 2 / d3, -1.3333333333 * WW * d4 / d3, WX * WW / d3), TL.rect(-0.7 * WX * WW / d3, -1.3333333333 * d4 * WW / d3, 1.4 * WX * WW / d3, -0.3333333333 * WW * d4 / d3), TL.fill(), d0 && TL.stroke(), sH(-1 * WX * WW / d3, -1.66666666666666 * d4 * WW / d3, 2 * WX * WW / d3, -2 * WW * d4 / d3, WX * WW / d3);
                        break;
                    case 6:
                        sH(-0.5 * WX * WW / d3, 0 / d3, WX * WW * 1 / d3, -2 * WW * d4 / d3, WX * WW * 2 / d3);
                        break;
                    case 7:
                        TL.rect(-WX * WW / d3, -1.33333333333 * d4 * WW / d3, WX * WW * 2 / d3, 1.33333333333 * WW * d4 / d3), TL.fill(), d0 && TL.stroke(), sH(-1 * WX * WW / d3, -1.33333333333 * d4 * WW / d3, 2 * WX * WW / d3, -1.6666666666666 * WW * d4 / d3, WX * WW / d3), TL.rect(-WX * WW / d3, -1.66666666666666 * d4 * WW / d3, WX * WW * 2 / d3, -0.3333333333 * WW * d4 / d3);
                        break;
                    case 8:
                        TL.rect(-0.5 * WX * WW / d3, -1.33333333333 * d4 * WW / d3, WX * WW / d3, 1.33333333333 * WW * d4 / d3), TL.fill(), d0 && TL.stroke(), sH(-1 * WX * WW / d3, -1.33333333333 * d4 * WW / d3, 2 * WX * WW / d3, -1.6666666666666 * WW * d4 / d3, WX * WW / d3), TL.rect(-WX * WW / d3, -1.66666666666666 * d4 * WW / d3, WX * WW * 2 / d3, -0.3333333333 * WW * d4 / d3);
                        break;
                    case 9:
                        sH(-0.5 * WX * WW / d3, 0 / d3, WX * WW / d3, -1.3333333333 * WW * d4 / d3, WX * WW * 2 / d3), TL.fill(), d0 && TL.stroke(), TL.rect(-0.6666666666666 * WX * WW / d3, -1.3333333333 * d4 * WW / d3, 1.3333333333 * WX * WW / d3, -0.3333333333 * WW * d4 / d3), TL.fill(), d0 && TL.stroke(), sH(-1 * WX * WW / d3, -1.66666666666666 * d4 * WW / d3, 2 * WX * WW / d3, -2 * WW * d4 / d3, WX * WW / d3);
                        break;
                    case -1:
                        sZ(-0.5 * WX * WW / d3, 0 / d3, -2 * WW * d4 / d3, WX * WW * 2 / d3), TL.fill(), d0 && TL.stroke();
                        break;
                    case -2:
                        sV(-0.5 * WX * WW / d3, 0 / d3, -2 * WW * d4 / d3, WX * WW * 2 / d3), TL.fill(), d0 && TL.stroke();
                    }
                    if (TL.fill(), d0 && TL.stroke(), TL.setTransform(1, 0, 0, 1, 0, 0), LC && V3) {
                        var d6 = d4, d7 = Wk + d6, d8 = WQ, d9 = WP + (d7 * Math.sin(WD) + d8 * Math.sin(WD + s8)) * WW, dO = WN - (d8 * Math.cos(WD + s8) + d7 * Math.cos(WD)) * WW, dY = WX * WW * 2, dM = d6 * WW * 2, dS = {
                                'x': TK.width / 2 + (d9 - TD) / d3,
                                'y': TK.height / 2 + (dO - TQ) / d3,
                                'height': dM / d3,
                                'width': dY / d3,
                                'rot': WD
                            };
                        AT(VG, dS) && V7.push({
                            'type': 'barrel',
                            'index': WI,
                            'stack': eI(LE)
                        });
                    }
                }
                function sO(WI, WP, WN, WW, WD, WQ) {
                    var Wk = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0, WX = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 0;
                    WN < 2 * WD && (WD = WN / 2);
                    WW < 2 * WD && (WD = WW / 2);
                    WI -= WN / 2;
                    WP -= WW / 2;
                    TL.beginPath();
                    TL.moveTo(WI + WD, WP);
                    TL.arcTo(WI + WN, WP, WI + WN, WP + WW, WD);
                    TL.arcTo(WI + WN, WP + WW, WI, WP + WW, WD);
                    if (0 != Wk) {
                        Wk = Math.min(Wk, WN - 2 * WD);
                        TL.lineTo(WI + WN / 2 + Wk, WP + WW);
                        TL.lineTo(WI + WN / 2, WP + WW + WX);
                        TL.lineTo(WI + WN / 2 - Wk, WP + WW);
                    }
                    TL.arcTo(WI, WP + WW, WI, WP, WD);
                    TL.arcTo(WI, WP, WI + WN, WP, WD);
                    TL.closePath();
                    TL.fillStyle = WQ;
                    TL.fill();
                }
                function sY(WI, WP, WN, WW, WD) {
                    ;
                    WN < 2 * WD && (WD = WN / 2);
                    WW < 2 * WD && (WD = WW / 2);
                    WI -= WN / 2;
                    WP -= WW / 2;
                    TL.beginPath();
                    TL.moveTo(WI + WD, WP);
                    TL.arcTo(WI + WN, WP, WI + WN, WP + WW, WD);
                    TL.arcTo(WI + WN, WP + WW, WI, WP + WW, WD);
                    TL.arcTo(WI, WP + WW, WI, WP, WD);
                    TL.arcTo(WI, WP, WI + WN, WP, WD);
                    TL.closePath();
                }
                function sM(WI, WP, WN, WW, WD, WQ) {
                    ;
                    TL.lineJoin = 'round';
                    TL.beginPath();
                    TL.arc(WI, WP, Math.abs(WN), 0, 2 * Math.PI, false);
                    WW && (TL.fillStyle = WW, TL.fill());
                    WQ && (TL.lineWidth = WQ, TL.strokeStyle = WD, TL.stroke());
                }
                function sS(WI, WP, WN, WW, WD) {
                    var WQ = WN / 2, Wk = WW / 2;
                    TL.beginPath();
                    for (var WX = false, WG = function () {
                                var WF = Wz / 4 * Math.PI * 2 + WD, Wq = Math.cos(WF), WU = Math.sin(WF), WB = function (d0, d1) {
                                        var d2 = WI + d0 * Wq - d1 * WU, d3 = WP + d0 * WU + d1 * Wq;
                                        WX ? TL.lineTo(d2, d3) : TL.moveTo(d2, d3);
                                        WX = true;
                                    };
                                WB(Wk, Wk);
                                WB(Wk, WQ);
                                WB(-Wk, WQ);
                                WB(-Wk, Wk);
                            }, Wz = 0; Wz < 4; Wz++) {
                        WG();
                    }
                }
                function sK(WI, WP, WN, WW) {
                    var WD = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                    TL.beginPath();
                    TL.arc(WI, WP, WN, 0, 2 * Math.PI, false);
                    TL.fillStyle = WW;
                    TL.fill();
                    WD && (TL.strokeWidth = 10, TL.strokeStyle = '#ffffff', TL.stroke());
                }
                function sC(WI, WP, WN, WW, WD, WQ, Wk, WX) {
                    ;
                    TL.lineJoin = 'round';
                    TL.beginPath();
                    TL.translate(WI, WP);
                    TL.rotate(WD);
                    TL.rect(-WN / 2, -WW / 2, WN, WW);
                    TL.fillStyle = WQ;
                    TL.lineWidth = WX;
                    TL.strokeStyle = Wk;
                    TL.fill();
                    TL.stroke();
                    TL.setTransform(1, 0, 0, 1, 0, 0);
                }
                function sE(WI, WP, WN, WW, WD, WQ, Wk) {
                    ;
                    TL.lineJoin = 'round';
                    TL.lineCap = 'round';
                    TL.beginPath();
                    TL.translate(WI, WP);
                    TL.rotate(WD);
                    TL.moveTo(-WN / 2, -WW / 2);
                    TL.lineTo(WN / 2, 0);
                    TL.lineTo(-WN / 2, WW / 2);
                    TL.lineWidth = Wk;
                    TL.strokeStyle = WQ;
                    TL.stroke();
                    TL.setTransform(1, 0, 0, 1, 0, 0);
                }
                function sH(WI, WP, WN, WW, WD) {
                    ;
                    TL.lineJoin = 'round';
                    TL.beginPath();
                    TL.moveTo(WI + (WN - WD) / 2, WP);
                    TL.lineTo(WI + WN - (WN - WD) / 2, WP);
                    TL.lineTo(WI + WN, WW);
                    TL.lineTo(WI, WW);
                    TL.closePath();
                }
                function sZ(WI, WP, WN, WW) {
                    ;
                    TL.lineJoin = 'round';
                    TL.beginPath();
                    TL.moveTo(WI - WW / 4, WP);
                    TL.lineTo(WI + 0.75 * WW, WP);
                    TL.lineTo(WI + WW / 4, WP + WN);
                    TL.closePath();
                }
                function sV(WI, WP, WN, WW) {
                    ;
                    TL.lineJoin = 'round';
                    TL.beginPath();
                    TL.moveTo(WI + WW / 4, WP);
                    TL.lineTo(WI + 0.75 * WW, WP + WN);
                    TL.lineTo(WI - WW / 4, WP + WN);
                    TL.closePath();
                }
                function sT(WI, WP, WN, WW, WD, WQ, Wk, WX, WG) {
                    ;
                    TL.lineJoin = 'round';
                    TL.beginPath();
                    TL.translate(WI, WP);
                    TL.rotate(WG);
                    WD % 2 != 0 && TL.rotate(-90 * Math.PI / 180);
                    TL.moveTo(WN * Math.cos(0), WN * Math.sin(0));
                    TL.lineTo(WW * Math.cos(1 * Math.PI / WD), WW * Math.sin(1 * Math.PI / WD));
                    for (var Wz = 1; Wz <= WD; Wz += 1) {
                        TL.lineTo(WN * Math.cos(2 * Wz * Math.PI / WD), WN * Math.sin(2 * Wz * Math.PI / WD));
                        TL.lineTo(WW * Math.cos(2 * (Wz + 0.5) * Math.PI / WD), WW * Math.sin(2 * (Wz + 0.5) * Math.PI / WD));
                    }
                    TL.fillStyle = WQ;
                    TL.fill();
                    WX && (TL.lineWidth = WX, TL.strokeStyle = Wk, TL.stroke());
                }
                function sj(WI, WP, WN, WW, WD, WQ, Wk, WX) {
                    ;
                    TL.lineJoin = 'round';
                    TL.beginPath();
                    TL.translate(WI, WP);
                    TL.rotate(WX);
                    WW % 2 != 0 && TL.rotate(-90 * Math.PI / 180);
                    TL.moveTo(WN * Math.cos(0), WN * Math.sin(0));
                    for (var WG = 1; WG <= WW + 1; WG += 1) {
                        TL.lineTo(WN * Math.cos(2 * WG * Math.PI / WW), WN * Math.sin(2 * WG * Math.PI / WW));
                    }
                    TL.fillStyle = WD;
                    TL.fill();
                    Wk && (TL.lineWidth = Wk, TL.strokeStyle = WQ, TL.stroke());
                }
                function sJ(WI, WP, WN, WW) {
                    var WD = WW.fadeTime || 1, WQ = WW.size, Wk = WW.x, WX = WW.y, WG = WW.d, Wz = 1;
                    if (WW.fadeType) {
                        var WF = WW.fadeType[1];
                        switch (WW.fadeType[0]) {
                        case 0:
                            WQ *= 1 + 0.5 * (1 - WD), WD < 1 && (Wz = WD);
                            break;
                        case 1:
                            WQ *= WD;
                            break;
                        case 2:
                            var Wq = Math.pow(1 - WD, 2);
                            WQ *= 1 + 2 * (1 - WD), WG += Wq * WF[0] * 4, Wk += Wq * Math.cos(WF[1]) * 2000, WX += Wq * Math.sin(WF[1]) * 2000, WD < 1 && (Wz = WD);
                            break;
                        case 3:
                            var WU = Math.pow(1 - WD, 2);
                            WQ *= 1 - WU, WG += WU * WF[0] * 4, Wk = CH(Wk, WF[1], WU), WX = CH(WX, WF[2], WU);
                        }
                    }
                    !function WB(d0, d1, d2, d3, d4) {
                        ;
                        for (var d5 = 0; d5 < d4.length; d5++) {
                            var d6 = d4[d5];
                            if (2 == d6.type) {
                                var d7 = 1;
                                null != d6.enableFade && (d7 = CT(d6.enableFade));
                                var d8 = d0 + (-d6.offsetY * Math.sin(d2) + d6.offsetX * Math.sin(d2 + s8)) * d3, d9 = d1 - (d6.offsetX * Math.cos(d2 + s8) + -d6.offsetY * Math.cos(d2)) * d3, dO = (0 == d6.rotationType ? d2 : 0) + d6.rot;
                                sI(WI + d8 / TN, WP + d9 / TN, dO, 1 * d3 * d6.radius / TN, d6.sides, Wz * d7);
                                sI(WI + d8 / TN, WP + d9 / TN, dO, 1.5 * d3 * d6.radius / WN / TN, d6.sides, 0.2 * Wz * d7);
                            }
                            if (3 == d6.type) {
                                var dY = void 0;
                                switch (d6.rotationType) {
                                case 0:
                                    dY = d6.baseRot + d2;
                                    break;
                                case 1:
                                case 4:
                                    dY = null == d6.rot ? d6.baseRot + d2 : d6.rot;
                                    break;
                                case 2:
                                case 3:
                                    dY = 0 == d6.anchored ? null == d6.rot ? d6.baseRot + d2 : d6.baseRot + d2 + d6.rot : null == d6.rot ? d6.baseRot : d6.rot;
                                }
                                WB(d0 + (d6.offsetX * Math.sin(1.57079633 - d2) + d6.offsetY * Math.cos(d2 + 1.57079633)) * d3, d1 + (d6.offsetY * Math.cos(d2) + d6.offsetX * Math.sin(-d2 + Math.PI)) * d3, dY, d6.width * d3, d6.tank.gadgets);
                            }
                        }
                    }(Wk, WX, WG, WQ, WW.gadgets);
                }
                function sR(WI, WP, WN, WW) {
                    var WD = WW.fadeTime || 1, WQ = WW.size, Wk = WW.x, WX = WW.y, WG = WW.d, Wz = performance.now(), WF = 1 - 1 / (WW.radiant + 0.5);
                    if (WW.radiant > 2 && (WF = 1), WW.fadeType) {
                        var Wq = WW.fadeType[1];
                        switch (WW.fadeType[0]) {
                        case 0:
                            WQ *= 1 + 0.5 * (1 - WD), WD < 1 && (WF *= WD);
                            break;
                        case 1:
                            WQ *= WD;
                            break;
                        case 2:
                            var WU = Math.pow(1 - WD, 2);
                            WQ *= 1 + 2 * (1 - WD), WG += WU * Wq[0] * 4, Wk += WU * Math.cos(Wq[1]) * 2000, WX += WU * Math.sin(Wq[1]) * 2000, WD < 1 && (WF *= WD);
                            break;
                        case 3:
                            var WB = Math.pow(1 - WD, 2);
                            WQ *= 1 - WB, WG += WB * Wq[0] * 4, Wk = CH(Wk, Wq[1], WB), WX = CH(WX, Wq[2], WB);
                        }
                    }
                    if (sI(WI + Wk / TN, WP + WX / TN, WG, Math.max(WQ, 1.2 * WQ / WN) / TN, WW.sides, WF), WW.radiant > 2) {
                        if (WW.radiant > 3) {
                            var d0 = Math.max(1.5 + WW.radiant / 5 + 0.06 * (1 + Math.sin(Wz / 800 * ((1 + WW.radiant) / 2))) * WW.radiant, 0.1);
                            sI(WI + Wk / TN, WP + WX / TN, 20 * Math.cos(Wz / 25000) * (1 + WW.radiant) / 2, WQ * d0 * (1 + (WW.outerSize || 0)) / TN, -3, WF, 0.4 * WQ / TN);
                        }
                        var d1 = 2 / ((WW.radiant + 2) / 5);
                        sI(WI + Wk / TN, WP + WX / TN, Wz / 2000 * (1 + WW.radiant) / 2, (WQ + (WW.outerSize || 0) * WQ) * (Math.cos(Wz / 500 + Math.PI) / d1 + 1) / TN, -6, WF);
                        sI(WI + Wk / TN, WP + WX / TN, -Wz / 2000 * (1 + WW.radiant) / 2, (WQ + (WW.outerSize || 0) * WQ) * (Math.cos(Wz / 500) / d1 + 1) / TN, -6, WF);
                    }
                    if (WF *= 1 - 0.7 / ((2 + WW.radiant) / 3), WW.radiant > 1) {
                        var d2 = Math.max(1.2 + 0.1 * (1 + Math.sin(Wz / 800 * ((2 + WW.radiant) / 4))) * WW.radiant, 0.1);
                        sI(WI + Wk / TN, WP + WX / TN, WG, WQ * d2 * 2 * (1 + (WW.outerSize || 0)) / TN, WW.outerSize > 0 ? WW.outerSides : WW.sides, WF);
                    }
                }
                function sL(WI, WP, WN, WW) {
                    ;
                    sI(WI + WW.x / TN, WP + WW.y / TN, WW.d, Math.max(WW.size, 1.2 * WW.size / WN) / TN, WW.sides, WW.transparency * jU(WW.lifetime, WW.maxLifetime) * (1 - 1 / (WW.radiant + 0.5)));
                }
                function sA(WI, WP, WN, WW, WD, WQ, Wk) {
                    var WX = TL.globalAlpha;
                    TL.globalAlpha = Wk;
                    TL.globalCompositeOperation = 'destination-out';
                    TL.lineJoin = 'round';
                    TL.lineWidth = WD / 2;
                    TL.translate(WI, WP);
                    TL.rotate(WN - C9(90));
                    TL.beginPath();
                    TL.moveTo(0, WQ / 2);
                    TL.lineTo(WW, WD / 2);
                    TL.lineTo(WW, WD / -2);
                    TL.lineTo(0, WQ / -2);
                    TL.fill();
                    TL.stroke();
                    TL.setTransform(1, 0, 0, 1, 0, 0);
                    TL.globalCompositeOperation = 'source-over';
                    TL.globalAlpha = WX;
                }
                function sI(WI, WP, WN, WW, WD, WQ, Wk) {
                    null == Wk && (Wk = WW / 2);
                    0 == WD ? sP(WI, WP, WW, WQ) : WD > 0 ? function (WX, WG, Wz, WF, Wq, WU) {
                        var WB = TL.globalAlpha;
                        TL.globalAlpha = WU;
                        TL.globalCompositeOperation = 'destination-out';
                        TL.beginPath();
                        TL.translate(WX, WG);
                        TL.rotate(Wz);
                        Wq % 2 != 0 && TL.rotate(-90 * Math.PI / 180);
                        TL.moveTo(WF * Math.cos(0), WF * Math.sin(0));
                        for (var d0 = 1; d0 <= Wq + 1; d0 += 1) {
                            TL.lineTo(WF * Math.cos(2 * d0 * Math.PI / Wq), WF * Math.sin(2 * d0 * Math.PI / Wq));
                        }
                        TL.fill();
                        TL.setTransform(1, 0, 0, 1, 0, 0);
                        TL.globalCompositeOperation = 'source-over';
                        TL.globalAlpha = WB;
                    }(WI, WP, WN, WW, WD, WQ) : function (WX, WG, Wz, WF, Wq, WU, WB) {
                        var d0 = TL.globalAlpha;
                        TL.moveTo(WF * Math.cos(0), WF * Math.sin(0));
                        TL.lineTo(WU * Math.cos(1 * Math.PI / Wq), WU * Math.sin(1 * Math.PI / Wq));
                        TL.globalCompositeOperation = 'destination-out';
                        TL.beginPath();
                        TL.translate(WX, WG);
                        TL.rotate(Wz);
                        Wq % 2 != 0 && TL.rotate(-90 * Math.PI / 180);
                        TL.moveTo(WF * Math.cos(0), WF * Math.sin(0)), TL.lineTo(WU * Math.cos(1 * Math.PI / Wq), WU * Math.sin(1 * Math.PI / Wq));
                        for (var d1 = 1; d1 <= Wq; d1 += 1) {
                            TL.lineTo(WF * Math.cos(2 * d1 * Math.PI / Wq), WF * Math.sin(2 * d1 * Math.PI / Wq));
                            TL.lineTo(WU * Math.cos(2 * (d1 + 0.5) * Math.PI / Wq), WU * Math.sin(2 * (d1 + 0.5) * Math.PI / Wq));
                        }
                        TL.fill();
                        TL.setTransform(1, 0, 0, 1, 0, 0);
                        TL.globalCompositeOperation = 'source-over';
                        TL.globalAlpha = d0;
                    }(WI, WP, WN, WW, -WD, Wk, WQ);
                }
                function sP(WI, WP, WN, WW) {
                    var WD = TL.globalAlpha;
                    TL.globalAlpha = WW;
                    TL.globalCompositeOperation = 'destination-out';
                    TL.beginPath();
                    TL.arc(WI, WP, WN, 0, 2 * Math.PI, true);
                    TL.fill();
                    TL.globalCompositeOperation = 'source-over';
                    TL.globalAlpha = WD;
                }
                function sN(WI, WP, WN, WW, WD, WQ) {
                    var Wk = TL.globalAlpha;
                    TL.globalAlpha = WQ;
                    TL.globalCompositeOperation = 'destination-out';
                    TL.beginPath();
                    TL.translate(WI, WP);
                    TL.rotate(WD);
                    TL.rect(-WN, -WW, 2 * WN, 2 * WW);
                    TL.fill();
                    TL.setTransform(1, 0, 0, 1, 0, 0);
                    TL.globalCompositeOperation = 'source-over';
                    TL.globalAlpha = Wk;
                }
                function sW() {
                    var WI = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], WP = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    TT.clearRect(0, 0, TY.width, TY.height);
                    Tj.clearRect(0, 0, TM.width, TM.height);
                    var WN, WW = TK.width / 2 - TD / TN, WD = TK.height / 2 - TQ / TN;
                    if (WI) {
                        WN = (b6[VB < 0.5 ? VU : Vq] || b6.default).dimension;
                    } else {
                        var WQ = hq[VF];
                        WN = WQ || hU;
                    }
                    T1 = WN;
                    var Wk = WN.visual;
                    if (E9.showAmbientParticles) {
                        var WX, WG = Wk.particles, Wz = 1.2 * TW, WF = eP(WG);
                        try {
                            for (WF.s(); !(WX = WF.n()).done;) {
                                for (var Wq = WX.value, WU = Math.min(E6, TW * TW * Wq.spawnrate * E7), WB = Math.random(); WB < WU; WB += Math.random()) {
                                    var d0 = C9(AL(Wq.d.min, Wq.d.max)), d1 = AL(Wq.speed.min, Wq.speed.max);
                                    LF(TD + Math.random() * Wz - Wz / 2, TQ + Math.random() * Wz - Wz / 2, d1 * Math.sin(d0), d1 * Math.cos(d0), AL(Wq.size.min, Wq.size.max), Math.random() * Math.PI * 2, Math.round(AL(Wq.sides.min, Wq.sides.max)), jz(Wq.color.min, Wq.color.max, Math.random()), AL(Wq.lifetime.min, Wq.lifetime.max), AL(Wq.transparency.min, Wq.transparency.max), Wq.radiant ? 1 : 0);
                                }
                            }
                        } catch (d8) {
                            WF.e(d8);
                        } finally {
                            WF.f();
                        }
                    }
                    TL.fillStyle = Wk.backgroundColor;
                    TL.fillRect(0, 0, TL.canvas.width, TL.canvas.height);
                    var d2 = 5 / TN;
                    if (d2 > 0.3) {
                        var d3 = Wk.gridSize / TN, d4 = Math.round(WW / d3) * d3, d5 = Math.round(WD / d3) * d3;
                        TL.lineWidth = d2;
                        TL.strokeStyle = Wk.gridColor;
                        TL.beginPath();
                        for (var d6 = WW; d6 < TL.canvas.width + WW; d6 += d3) {
                            TL.moveTo(d6 - d4, 0);
                            TL.lineTo(d6 - d4, TL.canvas.height);
                        }
                        for (var d7 = WD; d7 < TL.canvas.height + WD; d7 += d3) {
                            TL.moveTo(0, d7 - d5);
                            TL.lineTo(TL.canvas.width, d7 - d5);
                        }
                        TL.closePath();
                        TL.stroke();
                    }
                    WP && sD(WN.visual.wallColor || '#00000029', WN.bases, WN.walls);
                }
                function sD(WI, WP, WN) {
                    ;
                    for (var WW = 0; WW < WP.length; WW++) {
                        var WD = WP[WW];
                        TL.fillStyle = jN(0, WD.team, 0, 0) + '29';
                        var WQ = WD.width * Tz, Wk = WD.height * Tz;
                        TL.fillRect(TK.width / 2 - (-WD.x * Tz + TD + WQ / 2) / TN, TK.height / 2 - (-WD.y * Tz + TQ + Wk / 2) / TN, WQ / TN, Wk / TN);
                        h8 && E9.showHitboxes && LS(TK.width / 2 - (-WD.x * Tz + TD + WQ / 2) / TN, TK.height / 2 - (-WD.y * Tz + TQ + Wk / 2) / TN, WQ / TN, Wk / TN, '#ffffff');
                    }
                    TL.fillStyle = WI;
                    for (var WX = 0; WX < WN.length; WX++) {
                        var WG = WN[WX], Wz = WG.width * Tz, WF = WG.height * Tz;
                        TL.fillRect(TK.width / 2 - (-WG.x * Tz + TD + Wz / 2) / TN, TK.height / 2 - (-WG.y * Tz + TQ + WF / 2) / TN, Wz / TN, WF / TN);
                        h8 && E9.showHitboxes && LS(TK.width / 2 - (-WG.x * Tz + TD + Wz / 2) / TN, TK.height / 2 - (-WG.y * Tz + TQ + WF / 2) / TN, Wz / TN, WF / TN, '#00ff00');
                    }
                    TL.fillRect(0, TK.height / 2 - (TQ + Tz) / TN, TK.width / 2 - (TD + Tz) / TN, 2 * Tz / TN);
                    TL.fillRect(TK.width, TK.height / 2 - (TQ + Tz) / TN, (-TD + Tz) / TN - TK.width / 2, 2 * Tz / TN);
                    TL.fillRect(0, 0, TK.width, TK.height / 2 - (TQ + Tz) / TN);
                    TL.fillRect(0, TK.height, TK.width, (-TQ + Tz) / TN - TK.height / 2);
                    h8 && E9.showHitboxes && LS(TK.width / 2 - (TD + Tz) / TN, TK.height / 2 - (TQ + Tz) / TN, 2 * Tz / TN, 2 * Tz / TN, '#00ff00');
                }
                function sQ() {
                    ;
                    for (var WI = T1.gates, WP = performance.now(), WN = 0; WN < WI.length; WN++) {
                        var WW = WI[WN], WD = {
                                'x': WW.x * Tz,
                                'y': WW.y * Tz,
                                'size': WW.size / 2 * Tz
                            };
                        if (jO(WD, 3)) {
                            var WQ = c8.m[WW.type];
                            if (!WQ) {
                                continue;
                            }
                            var Wk = WQ[WW.open ? 'open' : 'closed'] || WQ.open, WX = Wk.auras, WG = Wk.particles, Wz = Wk.spikes || [], WF = Wk.arrows || [], Wq = Wk.color, WU = Wk.screenShake, WB = Wk.radiant, d0 = Wq;
                            WB && (jj || jL(), d0 = jQ(jG(jJ).substring(1), Wq.substring(1), WB));
                            for (var d1 = 0; d1 < WX.length; d1++) {
                                var d2, d3, d4, d5 = WX[d1], d6 = WP / 2500 * d5[1], d7 = d6 + 0.5, d8 = d5[0], d9 = d5[2], dO = 0 == d8 ? 2 : 1, dY = null !== (d2 = d5[3]) && void 0 !== d2 ? d2 : d0, dM = null !== (d3 = d5[4]) && void 0 !== d3 ? d3 : 0.2, dS = null !== (d4 = d5[5]) && void 0 !== d4 ? d4 : 1, dK = d6 - Math.floor(d6), dC = d7 - Math.floor(d7);
                                if (1 != dS) {
                                    dK = Math.pow(dK, dS);
                                    dC = Math.pow(dC, dS);
                                }
                                var dE = (0.5 + dK * d9) * dO, dH = (0.5 + dC * d9) * dO;
                                TL.globalAlpha = Math.min(2 * (1 - dK), 1) * dM;
                                var dZ = 30 * dE;
                                LR(WD.x - Math.sin(-WW.rot - s8) * dZ * d8, WD.y - Math.cos(-WW.rot - s8) * dZ * d8, dZ, WD.size, WW.rot, dY, true);
                                TL.globalAlpha = 0.2 * Math.min(2 * (1 - dC), 1);
                                var dV = 30 * dH;
                                LR(WD.x - Math.sin(-WW.rot - s8) * dV * d8, WD.y - Math.cos(-WW.rot - s8) * dV * d8, dV, WD.size, WW.rot, dY, true);
                                TL.globalAlpha = 1;
                            }
                            for (var dT = 0; dT < Wz.length; dT++) {
                                for (var dj = Wz[dT], dJ = dj[0], dR = 2 * (WD.size - dJ), dL = Math.min(Math.floor(2 * WD.size / (1.5 * dJ)), 1000), dA = 0; dA < dL; dA++) {
                                    var dI = WW.rot + WP / 2500 * (dA % 2 ? -1 : 1) * dj[4], dP = ((dL - 1 ? dA / (dL - 1) : 0) - 0.5) * dR;
                                    LA(WD.x - Math.sin(WW.rot) * dP + Math.cos(WW.rot) * dJ / 2, WD.y + Math.cos(WW.rot) * dP + Math.sin(WW.rot) * dJ / 2, dJ, dj[3], dj[1], dI, true, 1, dj[2] * dJ);
                                }
                            }
                            for (var dN = 0; dN < WG.length; dN++) {
                                for (var dW = WG[dN], dD = Math.min(dW[5] * WD.size * 60 * Math.min(T6, 0.1) * E7, 100), dQ = Math.random(); dQ < dD; dQ += Math.random()) {
                                    var dX = 6 * AL(dW[1], dW[2]) * (0 == dW[0] ? CM() : 1), dG = dW[6], dz = AL(0.5, 0.8) * 66.66666666666667 * dW[3], dF = (2 * Math.random() - 1) * (WD.size - dz), dq = WD.x + Math.cos(WW.rot + s8) * dF, dU = WD.y + Math.sin(WW.rot + s8) * dF, dB = WW.rot + (2 * Math.random() - 1) * dW[8];
                                    if (1 == dW[0]) {
                                        var f0 = dX * dG;
                                        dq += Math.sin(-dB - s8) * f0;
                                        dU += Math.cos(-dB - s8) * f0;
                                    }
                                    LF(dq, dU, dX * Math.sin(-dB + s8), dX * Math.cos(-dB + s8), dz, Math.random() * Math.PI * 2, 0, dW[4], dG, 1, dW[7], 1, true);
                                }
                            }
                            for (var f1 = 0; f1 < WF.length; f1++) {
                                for (var f2 = WF[f1], f3 = f2[0], f4 = f2[1], f5 = f2[2], f6 = WP / 2500 * f2[5], f7 = f2[6], f8 = Math.min(Math.floor(2 * WD.size / (1.5 * (f3 + f4))), 1000), f9 = 2 * (WD.size - f3 - f4), fO = 0; fO < f5; fO++) {
                                    var fY = 2 * (Cj(fO / (f5 - 1) + f6, 1) - 0.5);
                                    1 != f7 && (fY = CV(fY, f7));
                                    TL.globalAlpha = 1 - Math.abs(fY);
                                    fY *= 30 * f2[3];
                                    for (var fM = 0; fM < f8; fM++) {
                                        var fS = (f8 - 1 ? fM / (f8 - 1) : 0) - 0.5, fK = WD.x - Math.sin(-WW.rot - s8) * fY, fC = WD.y - Math.cos(-WW.rot - s8) * fY;
                                        LL(fK += Math.sin(-WW.rot) * fS * f9, fC += Math.cos(-WW.rot) * fS * f9, f3 / 2, f3, f2[4], WW.rot, true);
                                    }
                                }
                            }
                            if (TL.globalAlpha = 1, LR(WD.x, WD.y, 30, WD.size, WW.rot, d0, true), WU) {
                                var fE = [
                                        WD.x + Math.cos(WW.rot + s8) * WD.size,
                                        WD.y + Math.sin(WW.rot + s8) * WD.size
                                    ], fH = [
                                        WD.x + Math.cos(WW.rot + s8) * -WD.size,
                                        WD.y + Math.sin(WW.rot + s8) * -WD.size
                                    ], fZ = Aj([
                                        TD,
                                        TQ
                                    ], fE, fH);
                                Lz(fZ[0], fZ[1], 3);
                            }
                        }
                    }
                }
                function sX(WI) {
                    ;
                    if (!V3) {
                        return false;
                    }
                    if (!EN && h8 && E9.copyIds && (V6 = true), RY) {
                        var WP = sF(WI);
                        if (RM = false, null != WP) {
                            return void (R9[WP.value].add ? RK() : 1 == WP.type ? RK(WP.value) : 0 == WP.type && RS(WP.value));
                        }
                    }
                    if (JO > -100) {
                        var WN = sz(WI);
                        if (null != WN) {
                            return hj(WN), true;
                        }
                    }
                    VG = WI;
                    Vk = true;
                    var WW = sG(WI);
                    if (WW) {
                        if (-1 == WW.i) {
                            WW.weapon ? IM() : IY();
                        } else {
                            var WD = (WW.weapon ? I6 : I7)[WW.set][WW.i];
                            !function (WQ, Wk) {
                                lY(WQ, Wk);
                                WQ ? IM() : IY();
                            }(WW.weapon, WD.id);
                        }
                        return true;
                    }
                    return false;
                }
                function sG(WI) {
                    ;
                    if (!EN) {
                        ;
                        if (lz) {
                            for (var WN = 0; WN < 2; WN++) {
                                for (var WW = 0 == WN, WD = TK.width / 2, WQ = WW ? I6 : I7, Wk = 0; Wk < WQ.length; Wk++) {
                                    var WX = WQ[Wk], WG = 0, Wz = 0;
                                    if (WX.showing && WX.offset > 0.2) {
                                        for (var WF = Math.min(4, WX.length), Wq = 0; Wq < WX.length; Wq++) {
                                            if (AV(WI, {
                                                    'x': WD + 400 * (1 == WF ? 0 : WG / (WF - 1) - 0.5),
                                                    'y': 475 * WX.offset - 400 + 0 + 120 * Wz,
                                                    'width': 100,
                                                    'height': 100
                                                })) {
                                                return {
                                                    'weapon': WW,
                                                    'i': Wq,
                                                    'set': Wk
                                                };
                                            }
                                            if (4 == ++WG) {
                                                WG = 0;
                                                Wz++;
                                                WF = Math.min(4, WX.length - Wq - 1);
                                            }
                                        }
                                        if (Wz += WG > 0 ? 1 : 0, WG = 0, AV(WI, {
                                                'x': WD,
                                                'y': 475 * WX.offset - 400 + 0 - 60 + 120 * Wz + 30,
                                                'width': 100,
                                                'height': 40
                                            })) {
                                            return {
                                                'weapon': WW,
                                                'i': -1,
                                                'set': Wk
                                            };
                                        }
                                    }
                                }
                            }
                        } else {
                            for (var WU = 0; WU < 2; WU++) {
                                var WB = 0 == WU, d0 = void 0;
                                d0 = WB ? 0 : TK.width;
                                for (var d1 = TK.height, d2 = WB ? I6 : I7, d3 = 0; d3 < d2.length; d3++) {
                                    var d4 = d2[d3], d5 = 0, d6 = 0;
                                    if (d4.showing && d4.offset > 0.2) {
                                        for (var d7 = 0; d7 < d4.length; d7++) {
                                            d4[d7];
                                            if (AV(WI, {
                                                    'x': WB ? d0 + 475 * d4.offset - 400 + 120 * d5 : d0 - (475 * d4.offset - 400) - 120 * d5,
                                                    'y': d1 - 200 - 120 * d6,
                                                    'width': 100,
                                                    'height': 100
                                                })) {
                                                return {
                                                    'weapon': WB,
                                                    'i': d7,
                                                    'set': d3
                                                };
                                            }
                                            if (3 == ++d5) {
                                                d5 = 0;
                                                d6++;
                                            }
                                        }
                                        d6 += d5 > 0 ? 1 : 0;
                                        d5 = 0;
                                        if (AV(WI, {
                                                'x': WB ? d0 + 475 * d4.offset - 400 + 120 * d5 : d0 - (475 * d4.offset - 400) - 120 * d5,
                                                'y': d1 - 200 - 120 * d6 + 30,
                                                'width': 100,
                                                'height': 40
                                            })) {
                                            return {
                                                'weapon': WB,
                                                'i': -1,
                                                'set': d3
                                            };
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return false;
                }
                function sz(WI) {
                    ;
                    if (!EN) {
                        if (lz) {
                            var WP = TK.width / 2, WN = 0, WW = 0;
                            if (JO > 0.2) {
                                for (var WD = 400 * JO - 400, WQ = Math.min(4, J7.length), Wk = 0; Wk < J7.length; Wk++) {
                                    J7[Wk];
                                    if (AV(WI, {
                                            'x': WP + 400 * (1 == WQ ? 0 : WN / (WQ - 1) - 0.5),
                                            'y': 0 + WD + 120 * WW + 75,
                                            'width': 100,
                                            'height': 100
                                        })) {
                                        return Wk + 1;
                                    }
                                    if (4 == ++WN) {
                                        WN = 0;
                                        WW++;
                                        WQ = Math.min(4, J7.length - Wk - 1);
                                    }
                                }
                            }
                        } else {
                            if (I3 > 0) {
                                for (var WX = 0 + (EP ? 60 : 0), WG = TK.height, Wz = 0; Wz < 4; Wz++) {
                                    if (I1[(Wq = 4 - Wz) - 1] < 15) {
                                        if (AZ(WI, {
                                                'x': WX + 20 + 250 - 15,
                                                'y': WG - 20 - 32 * Wz - 15,
                                                'width': 30,
                                                'height': 30
                                            })) {
                                            return Wq;
                                        }
                                    }
                                }
                                WX = TK.width;
                                for (var WF = 0; WF < 4; WF++) {
                                    var Wq;
                                    if (I1[(Wq = 4 - WF + 4) - 1] < 15) {
                                        if (AZ(WI, {
                                                'x': WX - 20 - 250 - 15,
                                                'y': WG - 20 - 32 * WF - 15,
                                                'width': 30,
                                                'height': 30
                                            })) {
                                            return Wq;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return null;
                }
                function sF(WI) {
                    ;
                    if (RO < 0.2) {
                        return null;
                    }
                    var WP = TK.width / 2, WN = TK.height / 2, WW = R9.length, WD = 2 * Math.PI / WW, WQ = Math.sqrt(Math.pow(WI.x - WP, 2) + Math.pow(WI.y - WN, 2)), Wk = Math.atan2(WI.y - WN, WI.x - WP), WX = Math.floor(CG(Wk - Math.PI / 2) / WD);
                    if (WX >= WW) {
                        return null;
                    }
                    var WG = (1 + 0.1 * R9[WX].lerping) * RO, Wz = 250 * WG;
                    if (WQ < Wz) {
                        return {
                            'type': 0,
                            'value': WX
                        };
                    }
                    if (R9[WX].add) {
                        return null;
                    }
                    var WF = WX * WD + Math.PI / 2, Wq = Math.min(Wz * WD * 0.45, 0.08 * Wz), WU = CH(Wz, Wz / WG * RO, 0.5) + 2 * Wq, WB = WP + Math.cos(WF + WD / 2) * WU, d0 = WN + Math.sin(WF + WD / 2) * WU;
                    return Math.sqrt(Math.pow(WI.x - WB, 2) + Math.pow(WI.y - d0, 2)) < 1.4 * Wq ? {
                        'type': 1,
                        'value': WX
                    } : null;
                }
                var sq = document.createElement('canvas'), sU = sq.getContext('2d'), sB = document.createElement('canvas'), A0 = sB.getContext('2d'), A1 = null, A2 = 1;
                function A3(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    A2 = WI;
                    E9.fastTransparency || WP ? TL.globalAlpha = A2 : (sB.width = TL.canvas.width, sB.height = TL.canvas.height, A1 = TL, TL = A0);
                }
                function A4() {
                    ;
                    E9.fastTransparency || ((TL = A1).globalAlpha = A2, TL.drawImage(sB, 0, 0));
                    TL.globalAlpha = 1;
                }
                function A5(WI, WP) {
                    var WN = 'undefined' != typeof Symbol && WI[Symbol.iterator] || WI['@@iterator'];
                    if (!WN) {
                        if (Array.isArray(WI) || (WN = A7(WI)) || WP && WI && 'number' == typeof WI.length) {
                            WN && (WI = WN);
                            var WW = 0, WD = function () {
                                };
                            return {
                                's': WD,
                                'n': function () {
                                    return WW >= WI.length ? { 'done': true } : {
                                        'done': false,
                                        'value': WI[WW++]
                                    };
                                },
                                'e': function (WG) {
                                    throw WG;
                                },
                                'f': WD
                            };
                        }
                        throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }
                    var WQ, Wk = true, WX = false;
                    return {
                        's': function () {
                            ;
                            WN = WN.call(WI);
                        },
                        'n': function () {
                            var WG = WN.next();
                            return Wk = WG.done, WG;
                        },
                        'e': function (WG) {
                            WX = true;
                            WQ = WG;
                        },
                        'f': function () {
                            try {
                                Wk || null == WN.return || WN.return();
                            } finally {
                                if (WX) {
                                    throw WQ;
                                }
                            }
                        }
                    };
                }
                function A6(WI, WP) {
                    return function (WN) {
                        ;
                        if (Array.isArray(WN)) {
                            return WN;
                        }
                    }(WI) || function (WN, WW) {
                        var WD = null == WN ? null : 'undefined' != typeof Symbol && WN[Symbol.iterator] || WN['@@iterator'];
                        if (null != WD) {
                            var WQ, Wk, WX, WG, Wz = [], WF = true, Wq = false;
                            try {
                                if (WX = (WD = WD.call(WN)).next, 0 === WW) {
                                    if (Object(WD) !== WD) {
                                        return;
                                    }
                                    WF = false;
                                } else {
                                    for (; !(WF = (WQ = WX.call(WD)).done) && (Wz.push(WQ.value), Wz.length !== WW); WF = true) {
                                        ;
                                    }
                                }
                            } catch (WU) {
                                Wq = true;
                                Wk = WU;
                            } finally {
                                try {
                                    if (!WF && null != WD.return && (WG = WD.return(), Object(WG) !== WG)) {
                                        return;
                                    }
                                } finally {
                                    if (Wq) {
                                        throw Wk;
                                    }
                                }
                            }
                            return Wz;
                        }
                    }(WI, WP) || A7(WI, WP) || (function () {
                        ;
                        throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }());
                }
                function A7(WI, WP) {
                    ;
                    if (WI) {
                        if ('string' == typeof WI) {
                            return A8(WI, WP);
                        }
                        var WN = Object.prototype.toString.call(WI).slice(8, -1);
                        return 'Object' === WN && WI.constructor && (WN = WI.constructor.name), 'Map' === WN || 'Set' === WN ? Array.from(WI) : 'Arguments' === WN || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(WN) ? A8(WI, WP) : void 0;
                    }
                }
                function A8(WI, WP) {
                    ;
                    (null == WP || WP > WI.length) && (WP = WI.length);
                    for (var WN = 0, WW = new Array(WP); WN < WP; WN++) {
                        WW[WN] = WI[WN];
                    }
                    return WW;
                }
                var AO = {
                        'normal': {
                            'weapon': {},
                            'body': {}
                        },
                        'celestial': {
                            'weapon': {},
                            'body': {}
                        }
                    }, AY = false, AM = [], AS = [];
                function AK(WI) {
                    ;
                    for (var WP = WI[0].map(function (WB) {
                                return function (d0) {
                                    for (var d1 = { d4: null != d5 ? d5 : WB[d4] }, d2 = c8.e[d0[1]], d3 = 0; d3 < d0.length; d3++) {
                                        var d4 = d0[d3];
                                        null != d4 && (d1[d2[d3]] = d4);
                                    }
                                    return d1;
                                }(WB);
                            }), WN = [], WW = function () {
                                var WB, d0, d1, d2 = WP[WD], d3 = AS.find(function (d4) {
                                        return d4.id == d2.id;
                                    });
                                d3 ? WN.push((WB = d3, d0 = d2, d1 = {}, Object.keys(WB).forEach(function (d4) {
                                    var d5 = d0[d4];
                                    ;
                                }), d1)) : WN.push(d2);
                            }, WD = 0; WD < WP.length; WD++) {
                        WW();
                    }
                    if (WI) {
                        (AM = {
                            'entries': WN,
                            'playerCount': WI[1]
                        }).showPlayers = -1 != AM.playerCount;
                        AM.highestScore = 0;
                        for (var WQ = 0; WQ < AM.entries.length; WQ++) {
                            var Wk = AM.entries[WQ];
                            Wk.score > AM.highestScore && (AM.highestScore = Wk.score);
                        }
                        for (var WX = 0; WX < AM.entries.length; WX++) {
                            var WG, Wz = AM.entries[WX];
                            if (Wz.size = 1 == Wz.type || Wz.isCelestial ? 75 : 40, 1 == !Wz.type && AM.showPlayers) {
                                for (var WF = 0; WF < Wz.barrels.length; WF++) {
                                    Wz.barrels[WF].animTime = 0;
                                }
                                for (var Wq = 0; Wq < Wz.gadgets.length; Wq++) {
                                    var WU = Wz.gadgets[Wq];
                                    WU.animTime = 0;
                                    2 == WU.type && (WU.enabled = true);
                                }
                            }
                            ;
                            ;
                            ;
                            ;
                            AM.showPlayers || (Wz.name = (Wz.name || '???').replace(/\S/g, '?'), Wz.radiant = 0, Wz.team = -1, Wz.nameColor = 6);
                            Wz.score == AM.highestScore && (Wz.scoreRatio = 1);
                            ;
                        }
                    } else {
                        AM = null;
                    }
                    AS = WN;
                }
                var AC = {
                    highestScore: AM.highestScore,
                    playerCount: AM.playerCount,
                    showPlayers: AM.showPlayers,
                    entries: f3
                };
                function AE(WI, WP) {
                    return (0 * WI + WP) / 1;
                }
                function AH(WI, WP) {
                    var WN = WI.x - WP.x, WW = WI.y - WP.y;
                    return WN * WN + WW * WW <= WP.r * WP.r;
                }
                function AZ(WI, WP) {
                    ;
                    return WI.x > WP.x && WI.x < WP.x + WP.width && WI.y < WP.y + WP.height && WI.y > WP.y;
                }
                function AV(WI, WP) {
                    ;
                    return WI.x > WP.x - WP.width / 2 && WI.x < WP.x + WP.width / 2 && WI.y < WP.y + WP.height / 2 && WI.y > WP.y - WP.height / 2;
                }
                function AT(WI, WP) {
                    var WN = {
                            'x': WI.x - WP.x,
                            'y': WI.y - WP.y
                        }, WW = {
                            'width': WP.width,
                            'height': WP.height,
                            'x': 0,
                            'y': 0
                        };
                    return function (WD, WQ, Wk) {
                        var WX = Math.cos(Wk), WG = Math.sin(Wk), Wz = WX * (WQ.x - WD.x) + WG * (WQ.y - WD.y) + WD.x, WF = WX * (WQ.y - WD.y) - WG * (WQ.x - WD.x) + WD.y;
                        ;
                        ;
                    }(WW, WN, WP.rot), AV(WN, WW);
                }
                function Aj(WI, WP, WN) {
                    var WW = [
                            WN[0] - WP[0],
                            WN[1] - WP[1]
                        ], WD = [
                            WP[0] - WI[0],
                            WP[1] - WI[1]
                        ], WQ = -(WW[0] * WD[0] + WW[1] * WD[1]) / (Math.pow(WW[0], 2) + Math.pow(WW[1], 2));
                    return WQ >= 0 && WQ <= 1 ? AJ(WQ, [
                        0,
                        0
                    ], WP, WN) : AR(AJ(0, WI, WP, WN)) <= AR(AJ(1, WI, WP, WN)) ? WP : WN;
                }
                function AJ(WI, WP, WN, WW) {
                    return [
                        (1 - WI) * WN[0] + WI * WW[0] - WP[0],
                        (1 - WI) * WN[1] + WI * WW[1] - WP[1]
                    ];
                }
                function AR(WI) {
                    ;
                    return Math.pow(WI[0], 2) + Math.pow(WI[1], 2);
                }
                function AL(WI, WP) {
                    return Math.random() * (WP - WI) + WI;
                }
                var AA = {}, AI = {}, AP = [];
                function AW(WI) {
                    var WP, WN = [], WW = A5(WI);
                    try {
                        for (WW.s(); !(WP = WW.n()).done;) {
                            var WD, WQ = A6(WP.value, 3), Wk = WQ[0], WX = WQ[1], WG = WQ[2], Wz = void 0 === WG || WG, WF = A5(Wk.split(/(\s+)/));
                            try {
                                var Wq = function () {
                                    var WB = WD.value;
                                    if (E9.clickableLinks && Wz) {
                                        var d0, d1 = Math.round(10000000 * Math.random()).toString(), d2 = Math.round(10000000 * Math.random()).toString(), d3 = A5(WB.replace(/(\b(https?):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi, function (d5) {
                                                ;
                                                return ''.concat(d1).concat(d2).concat(d5).concat(d1);
                                            }).split(d1).filter(function (d5) {
                                                return '' != d5;
                                            }));
                                        try {
                                            for (d3.s(); !(d0 = d3.n()).done;) {
                                                var d4 = d0.value;
                                                d4.startsWith(d2) ? WN.push({
                                                    'color': 10,
                                                    'link': true,
                                                    'text': d4.substring(d2.length)
                                                }) : WN.push({
                                                    'color': WX,
                                                    'link': false,
                                                    'text': d4
                                                });
                                            }
                                        } catch (d5) {
                                            d3.e(d5);
                                        } finally {
                                            d3.f();
                                        }
                                    } else {
                                        WN.push({
                                            'text': WB,
                                            'link': false,
                                            'color': WX
                                        });
                                    }
                                };
                                for (WF.s(); !(WD = WF.n()).done;) {
                                    Wq();
                                }
                            } catch (WB) {
                                WF.e(WB);
                            } finally {
                                WF.f();
                            }
                        }
                    } catch (d0) {
                        WW.e(d0);
                    } finally {
                        WW.f();
                    }
                    var WU = '';
                    return WN.forEach(function (d1) {
                        ;
                        WU += d1.text;
                    }), {
                        'sections': WN,
                        'fullText': WU
                    };
                }
                var AD = false, AQ = 0;
                function AX(WI) {
                    var WP = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    WI && E9.silentTyping || ((WI != AD || WI && performance.now() - AQ > 4000) && WP && (AQ = performance.now(), lO(WI)), AD = WI, T7 && (WI ? AG(T7.id) : Az(T7.id)));
                }
                function AG(WI) {
                    ;
                    E9.showTypingIndicators && (AI[WI] || (AI[WI] = {
                        'time': 0,
                        'lerping': 0
                    }), AI[WI].time = 8);
                }
                function Az(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    AI[WI] && (AI[WI].time = 0, WP && (AI[WI].lerping = 0));
                }
                function AF(WI, WP) {
                    ;
                    WI in AA || (AA[WI] = []);
                    var WN = 12, WW = AI[WI] && AI[WI].time > 0;
                    WW ? (WN = 12 - 0.5 * AI[WI].lerping, Az(WI, true), T7 && WI == T7.id && AX(false, false)) : !E9.showTypingIndicators && T7 && WI == T7.id && AX(false, false);
                    AA[WI].unshift({
                        'message': AW(WP),
                        'time': WN,
                        'fromTyping': WW,
                        'typingFade': WW ? 0 : 1
                    });
                }
                function Aq(WI) {
                    WI in AA && delete AA[WI];
                    WI in AI && delete AI[WI];
                }
                function AU(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                    AB([[
                            WI,
                            6
                        ]], WP);
                }
                function AB(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                    WI = AW(WI);
                    console.log('NOTIFICATION: '.concat(WI.fullText));
                    AP.unshift({
                        'message': WI,
                        'time': 6 * WP,
                        'maxTime': 6 * WP
                    });
                }
                function I0() {
                    var WI = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    WI && (AA = {});
                    AP = [];
                    VC();
                    VV();
                    AX(false);
                }
                var I1 = [8], I2 = [8], I3 = 0, I4 = [], I5 = [], I6 = [], I7 = [];
                function I8(WI) {
                    AY = WI;
                }
                function I9() {
                    ;
                    I6 = I6.filter(function (WI) {
                        ;
                        return !WI.removed;
                    });
                    I7 = I7.filter(function (WI) {
                        ;
                        return !WI.removed;
                    });
                }
                function IO(WI, WP) {
                    ;
                    if (function (Wk, WX) {
                            ;
                            if (!Wk || !WX) {
                                return false;
                            }
                            if (Wk.length != WX.length) {
                                return false;
                            }
                            for (var WG = 0; WG < Wk.length; WG++) {
                                if (Wk[WG].id != WX[WG].id) {
                                    return false;
                                }
                            }
                            return true;
                        }(WP[WP.length - 1], WI)) {
                        WP[WP.length - 1].showing = true;
                    } else {
                        var WN, WW = A5(WP);
                        try {
                            for (WW.s(); !(WN = WW.n()).done;) {
                                WN.value.showing = false;
                            }
                        } catch (Wk) {
                            WW.e(Wk);
                        } finally {
                            WW.f();
                        }
                        if (0 != WI.length) {
                            WP.push(WI);
                            WI.showing = true;
                            WI.offset = 0.2;
                            WI.ignoreButton = { 'lerping': 0 };
                            var WD, WQ = A5(WI);
                            try {
                                for (WQ.s(); !(WD = WQ.n()).done;) {
                                    WD.value.lerping = 0;
                                }
                            } catch (WX) {
                                WQ.e(WX);
                            } finally {
                                WQ.f();
                            }
                        }
                    }
                }
                function IY() {
                    var WI, WP = A5(I7);
                    try {
                        for (WP.s(); !(WI = WP.n()).done;) {
                            WI.value.showing = false;
                        }
                    } catch (WN) {
                        WP.e(WN);
                    } finally {
                        WP.f();
                    }
                }
                function IM() {
                    var WI, WP = A5(I6);
                    try {
                        for (WP.s(); !(WI = WP.n()).done;) {
                            WI.value.showing = false;
                        }
                    } catch (WN) {
                        WP.e(WN);
                    } finally {
                        WP.f();
                    }
                }
                var IS = document.getElementById('message-popup'), IK = document.getElementById('message-popup-title'), IC = document.getElementById('message-popup-text');
                function IE(WI, WP) {
                    var WN, WW;
                    IK.innerHTML = null === (WN = W1(null == WI ? void 0 : WI.toString())) || void 0 === WN ? void 0 : WN.replaceAll('\\n', '<br>');
                    IC.innerHTML = null === (WW = W1(null == WP ? void 0 : WP.toString())) || void 0 === WW ? void 0 : WW.replaceAll('\\n', '<br>');
                    IS.classList.remove('hide');
                }
                function IH(WI, WP) {
                    var WN = 'undefined' != typeof Symbol && WI[Symbol.iterator] || WI['@@iterator'];
                    if (!WN) {
                        if (Array.isArray(WI) || (WN = function (WG, Wz) {
                                ;
                                if (!WG) {
                                    return;
                                }
                                if ('string' == typeof WG) {
                                    return IZ(WG, Wz);
                                }
                                var WF = Object.prototype.toString.call(WG).slice(8, -1);
                                'Object' === WF && WG.constructor && (WF = WG.constructor.name);
                                if ('Map' === WF || 'Set' === WF) {
                                    return Array.from(WG);
                                }
                                if ('Arguments' === WF || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(WF)) {
                                    return IZ(WG, Wz);
                                }
                            }(WI)) || WP && WI && 'number' == typeof WI.length) {
                            WN && (WI = WN);
                            var WW = 0, WD = function () {
                                };
                            return {
                                's': WD,
                                'n': function () {
                                    return WW >= WI.length ? { 'done': true } : {
                                        'done': false,
                                        'value': WI[WW++]
                                    };
                                },
                                'e': function (WG) {
                                    throw WG;
                                },
                                'f': WD
                            };
                        }
                        throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }
                    var WQ, Wk = true, WX = false;
                    return {
                        's': function () {
                            ;
                            WN = WN.call(WI);
                        },
                        'n': function () {
                            var WG = WN.next();
                            return Wk = WG.done, WG;
                        },
                        'e': function (WG) {
                            WX = true;
                            WQ = WG;
                        },
                        'f': function () {
                            ;
                            try {
                                Wk || null == WN.return || WN.return();
                            } finally {
                                if (WX) {
                                    throw WQ;
                                }
                            }
                        }
                    };
                }
                function IZ(WI, WP) {
                    ;
                    (null == WP || WP > WI.length) && (WP = WI.length);
                    for (var WN = 0, WW = new Array(WP); WN < WP; WN++) {
                        WW[WN] = WI[WN];
                    }
                    return WW;
                }
                document.getElementById('ok-button').onclick = function () {
                    ;
                    IS.classList.add('hide');
                };
                var IV = [], IT = {}, Ij = false;
                function IJ() {
                    Ij = false;
                }
                function IR() {
                    ;
                    I0(false);
                    IL();
                    RM = false;
                    RO = 0;
                    RY = false;
                    var WI, WP = IH(I6);
                    try {
                        for (WP.s(); !(WI = WP.n()).done;) {
                            WI.value.offset = 0.2;
                        }
                    } catch (WD) {
                        WP.e(WD);
                    } finally {
                        WP.f();
                    }
                    var WN, WW = IH(I7);
                    try {
                        for (WW.s(); !(WN = WW.n()).done;) {
                            WN.value.offset = 0.2;
                        }
                    } catch (WQ) {
                        WW.e(WQ);
                    } finally {
                        WW.f();
                    }
                }
                function IL() {
                    IV = [];
                    IT = {};
                    Ij = false;
                    LG();
                    I9();
                }
                function IA(WI) {
                    !function (WP) {
                        var WN = {
                            t: Date.now(),
                            me: WP[0],
                            tanks: WP[1],
                            polygons: WP[2],
                            bullets: WP[3],
                            rifts: WP[4],
                            removedEntities: WP[5],
                            mapSize: WP[6],
                            tickTime: WP[7],
                            dt: WP[8],
                            dimension: WP[9],
                            events: WP[10],
                            removedEntities: WD,
                            tanks: IN(Wk.tanks, WN.tanks, WD),
                            bullets: IN(Wk.bullets, WN.bullets, WD),
                            rifts: IN(Wk.rifts, WN.rifts, WD),
                            polygons: IN(Wk.polygons, WN.polygons, WD)
                        };
                        IP(WN.tanks);
                        IP(WN.polygons);
                        IP(WN.bullets);
                        IP(WN.rifts);
                        ;
                        ;
                        ;
                        ;
                        ;
                        ;
                        ;
                        ;
                        ;
                        ;
                        ;
                        WN.me ? (WN.cameraSizeMultiplier = WP[11], WN.leaderboard = WP[12]) : (WN.x = WP[11], WN.y = WP[12], WN.leaderboard = WP[13]);
                        WN.me && (WN.me = II(WN.me));
                        IP(WN.tanks), IP(WN.polygons), IP(WN.bullets), IP(WN.rifts);
                        var WW = IV[IV.length - 1];
                        WW && WW.dimension == WN.dimension && null == WW.me == (null == WN.me) || (IL(), Lq(), IT = IV[IV.length - 1]);
                        if (Ij = true, 0 != IV.length) {
                            for (var WD = {
                                        width: 128,
                                        height: 128,
                                        next: 16,
                                        next: 11,
                                        next: 9,
                                        next: 16,
                                        next: 16,
                                        next: 11,
                                        next: 9,
                                        next: 16,
                                        WG: IW(WQ[Wz.id] || Wz, Wz),
                                        animTime: WQ.animTime
                                    }, WQ = 0; WQ < WN.removedEntities.length; WQ += 3) {
                                WD[WN.removedEntities[WQ]] = [
                                    WN.removedEntities[WQ + 1],
                                    WN.removedEntities[WQ + 2]
                                ];
                            }
                            ;
                            var Wk = IV[IV.length - 1];
                            WN.me && (WN.me = IW(Wk.me, WN.me));
                            ;
                            ;
                            ;
                            ;
                        }
                        IV.push(WN);
                        WN.leaderboard && AK(WN.leaderboard);
                        WN.events && function (WX) {
                            ;
                            for (var WG = 0; WG < WX.length; WG++) {
                                var Wz = A6(WX[WG], 2), WF = Wz[0], Wq = Wz[1];
                                switch (WF) {
                                case 0:
                                    jE(Wq);
                                    break;
                                case 7:
                                    jH(Wq);
                                    break;
                                case 2:
                                    jC(Wq);
                                    break;
                                case 10:
                                    jC(Wq, true, false, 0.5);
                                    break;
                                case 8:
                                    jC(Wq, true);
                                    break;
                                case 9:
                                    jC(Wq, true, true);
                                    break;
                                case 3:
                                    jK(Wq);
                                    break;
                                case 4:
                                    jM(Wq);
                                    break;
                                case 5:
                                    jY(Wq);
                                    break;
                                case 6:
                                    jS(Wq);
                                    break;
                                case 1:
                                    AF(Wq.id, Wq.message);
                                    break;
                                case 11:
                                    Aq(Wq);
                                    break;
                                case 12:
                                    Wq[1] ? AG(Wq[0]) : Az(Wq[0]);
                                    break;
                                default:
                                    console.error('Received invalid event from server: "'.concat(WF, '"'));
                                }
                            }
                        }(WN.events);
                    }(WI);
                }
                function II(WI) {
                    for (var WP = {
                                innerText: aB(WI),
                                onclick: function (WN) {
                                    var WW = EL(rF).reverse().find(function (WX) {
                                        ;
                                        return 'barrel' == WX.type && 0 == WX.stack.length;
                                    });
                                    if (WW && WW.index != WA && WN.shiftKey) {
                                        var WD, WQ = ER(CL(WW.index, WA));
                                        try {
                                            var Wk = function () {
                                                var WX = WD.value;
                                                rF.some(function (WG) {
                                                    ;
                                                    return 'barrel' == WG.type && WG.index == WX;
                                                }) || rF.push({
                                                    'type': 'barrel',
                                                    'index': WX,
                                                    'stack': []
                                                });
                                            };
                                            for (WQ.s(); !(WD = WQ.n()).done;) {
                                                Wk();
                                            }
                                        } catch (WX) {
                                            WQ.e(WX);
                                        } finally {
                                            WQ.f();
                                        }
                                        rU();
                                    } else {
                                        rU('barrel', WA, WN.ctrlKey || WN.metaKey || WN.shiftKey);
                                    }
                                },
                                next: 5,
                                style: 'text-align: center; font-size: 1.5vmin',
                                innerHTML: '',
                                lastColor: d0,
                                closed: true,
                                manualClose: false
                            }, WN = c8.f[WI[1]], WW = 0; WW < WI.length; WW++) {
                        var WD = WI[WW];
                        null != WD && (WP[WN[WW]] = WD);
                    }
                    return WP;
                }
                function IP(WI) {
                    ;
                    for (var WP = 0; WP < WI.length; WP++) {
                        WI[WP] = II(WI[WP]);
                    }
                    return WI;
                }
                function IN(WI, WP, WN) {
                    var WW, WD = new Array(WP.length), WQ = {
                            innerText: H0(WD),
                            onclick: function (Wk) {
                                var WX = EL(rF).reverse().find(function (Wq) {
                                    ;
                                    return 'gadget' == Wq.type && 0 == Wq.stack.length;
                                });
                                if (WX && WX.index != WW && Wk.shiftKey) {
                                    var WG, Wz = ER(CL(WX.index, WW));
                                    try {
                                        var WF = function () {
                                            var Wq = WG.value;
                                            rF.some(function (WU) {
                                                ;
                                                return 'gadget' == WU.type && WU.index == Wq;
                                            }) || rF.push({
                                                'type': 'gadget',
                                                'index': Wq,
                                                'stack': []
                                            });
                                        };
                                        for (Wz.s(); !(WG = Wz.n()).done;) {
                                            WF();
                                        }
                                    } catch (Wq) {
                                        Wz.e(Wq);
                                    } finally {
                                        Wz.f();
                                    }
                                    rU();
                                } else {
                                    rU('gadget', WW, Wk.ctrlKey || Wk.metaKey || Wk.shiftKey);
                                }
                            },
                            innerText: H1(WD),
                            onclick: function (Wk) {
                                var WX = EL(rF).reverse().find(function (Wq) {
                                    ;
                                    return 'layer' == Wq.type && 0 == Wq.stack.length;
                                });
                                if (WX && WX.index != WW && Wk.shiftKey) {
                                    var WG, Wz = ER(CL(WX.index, WW));
                                    try {
                                        var WF = function () {
                                            var Wq = WG.value;
                                            rF.some(function (WU) {
                                                ;
                                                return 'layer' == WU.type && WU.index == Wq;
                                            }) || rF.push({
                                                'type': 'layer',
                                                'index': Wq,
                                                'stack': []
                                            });
                                        };
                                        for (Wz.s(); !(WG = Wz.n()).done;) {
                                            WF();
                                        }
                                    } catch (Wq) {
                                        Wz.e(Wq);
                                    } finally {
                                        Wz.f();
                                    }
                                    rU();
                                } else {
                                    rU('layer', WW, Wk.ctrlKey || Wk.metaKey || Wk.shiftKey);
                                }
                            },
                            xVel: WX,
                            yVel: WX,
                            x: Wz,
                            y: WF,
                            next: 9,
                            next: 2,
                            next: 27,
                            next: 7,
                            next: 27
                        }, Wk = IH(WI);
                    try {
                        for (Wk.s(); !(WW = Wk.n()).done;) {
                            var WX = WW.value;
                            WQ[WX.id] = WX;
                        }
                    } catch (WF) {
                        Wk.e(WF);
                    } finally {
                        Wk.f();
                    }
                    for (var WG = 0; WG < WP.length; WG++) {
                        var Wz = WP[WG];
                        ;
                    }
                    return WD;
                }
                function IW(WI, WP) {
                    var WN = {
                        WW: WD,
                        WW: C8(WI[WW]),
                        WW: WI[WW]
                    };
                    return Object.keys(WI).forEach(function (WW) {
                        var WD = WP[WW];
                        if (null != WD) {
                            ;
                        } else {
                            switch (WW) {
                            case 'barrels':
                            case 'gadgets':
                            case 'barrelData':
                            case 'gadgetData':
                                ;
                                break;
                            case 'fadeTime':
                                WN[WW] = 1, WI[WW] = 1;
                                break;
                            default:
                                ;
                            }
                        }
                    }), Object.keys(WN).forEach(function (WW) {
                        ;
                        switch (WW) {
                        case 'barrels':
                            for (var WD = 0; WD < WN.barrels.length; WD++) {
                                WN.barrels[WD].animTime = WN.barrelData[WD].animTime || 0;
                            }
                            break;
                        case 'gadgets':
                            for (var WQ = 0; WQ < WN.gadgets.length; WQ++) {
                                var Wk = WN.gadgets[WQ], WX = WN.gadgetData[WQ];
                                ;
                                null != WX.rot && (Wk.rot = WX.rot);
                                null != WX.enabled && (Wk.enabled = WX.enabled);
                                WX.tank && ID(Wk.tank, WX.tank);
                            }
                        }
                    }), WN;
                }
                function ID(WI, WP) {
                    ;
                    for (var WN = 0; WN < WI.barrels.length; WN++) {
                        WI.barrels[WN].animTime = WP.barrels[WN].animTime || 0;
                    }
                    for (var WW = 0; WW < WI.gadgets.length; WW++) {
                        var WD = WI.gadgets[WW], WQ = WP.gadgets[WW];
                        ;
                        null != WQ.rot && (WD.rot = WQ.rot);
                        null != WQ.enabled && (WD.enabled = WQ.enabled);
                        WQ.tank && ID(WD.tank, WQ.tank);
                    }
                }
                function IQ() {
                    ;
                    return Date.now() - E9.renderDelay;
                }
                function IX() {
                    ;
                    if (!Ij) {
                        return {};
                    }
                    var WI = (function () {
                            for (var WQ = IQ(), Wk = IV.length - 1; Wk >= 0; Wk--) {
                                if (IV[Wk].t <= WQ) {
                                    return Wk;
                                }
                            }
                            return -1;
                        }()), WP = IQ(), WN = IV[WI], WW = IV[WI + 1] || WN;
                    if (IV.splice(0, WI), WI < 0 || !IT) {
                        IT = IV[IV.length - 1];
                    } else {
                        var WD = Math.min((WP - WN.t) / (WW.t - WN.t), 1) || 0;
                        IT = {
                            'me': IG(IT.me, WW.me, WN.me, WD, true, false),
                            'x': WN.x,
                            'y': WN.y,
                            'tanks': IF(IT.tanks, WW.tanks, WN.tanks, WW.removedEntities, WD, true),
                            'polygons': IF(IT.polygons, WW.polygons, WN.polygons, WW.removedEntities, WD, true),
                            'bullets': IF(IT.bullets, WW.bullets, WN.bullets, WW.removedEntities, WD, true),
                            'rifts': Iq(IT.rifts, WW.rifts, WN.rifts, WD),
                            'mapSize': CH(IT.mapSize, WW.mapSize, WD),
                            'tickTime': WN.tickTime,
                            'dt': WN.dt,
                            'dimension': WN.dimension,
                            'cameraSizeMultiplier': WN.cameraSizeMultiplier
                        };
                    }
                    return IT;
                }
                function IG(WI, WP, WN, WW) {
                    var WD = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], WQ = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
                    if (!WP) {
                        return WI;
                    }
                    if (WI) {
                        var Wk = {
                            Wz: IU(WU, WF, WW),
                            Wz: CH(WU, WF, WW),
                            Wz: CH(Wq, WF, 0.1),
                            Wz: WU,
                            Wz: WU,
                            Wz: CH(Wq[i], WI.hp / WI.maxHP, 0.002),
                            Wz: WU
                        };
                        if (WQ && WI.fadeType) {
                            if (WI.fadeTime) {
                                switch (WI.fadeType[0]) {
                                default:
                                    WI.fadeTime = CH(WI.fadeTime, -0.1, 0.15 * T6 * 60);
                                    break;
                                case 3:
                                case 2:
                                    WI.fadeTime = Math.max(WI.fadeTime - 3 * T6, 0);
                                    break;
                                case 2:
                                    WI.fadeTime = Math.max(WI.fadeTime - 1 * T6, 0);
                                }
                            } else {
                                WI.fadeTime = 1;
                            }
                        } else {
                            WI.fadeTime = 1;
                        }
                        if (WD) {
                            var WX = WI.hp / WI.maxHP, WG = WP.hp / WP.maxHP;
                            WX > WG ? WI.damageTime ? Wk.damageTime = CH(WI.damageTime, Math.max(-0.2, 1 - 30 * (WX - WG)), 0.3) : Wk.damageTime = 1 : WI.damageTime ? Wk.damageTime = CH(WI.damageTime, 1, 0.3) : Wk.damageTime = 1;
                            null != WI.healthBarFade ? Wk.healthBarFade = CH(WI.healthBarFade, WX < 0.99 && 1 == WI.fadeTime ? 1 : 0, 0.2) : Wk.healthBarFade = 0;
                        }
                        return Object.keys(WP).forEach(function (Wz) {
                            var WF = WP[Wz], Wq = WI[Wz] || WF, WU = WN && WN[Wz] || WF;
                            switch (Wz) {
                            case 'd':
                                ;
                                break;
                            case 'x':
                            case 'y':
                            case 'hp':
                            case 'lifetime':
                            case 'maxHP':
                                ;
                                break;
                            case 'score':
                            case 'totalScore':
                            case 'xpToNextLevel':
                            case 'size':
                                ;
                                break;
                            case 'barrels':
                                ;
                                for (var WB = 0; WB < WU.length; WB++) {
                                    WU[WB] && WF[WB] && (Wk[Wz][WB].animTime = CH(WU[WB].animTime, WF[WB].animTime, WW));
                                }
                                break;
                            case 'gadgets':
                                ;
                                for (var d0 = 0; d0 < WU.length; d0++) {
                                    WF[d0] && Wq[d0] && (Wq[d0].animTime && WF[d0].animTime && (Wk[Wz][d0].animTime = CH(Wq[d0].animTime, WF[d0].animTime, WW)), Wq[d0].rot && WF[d0].rot && (Wk[Wz][d0].rot = IU(Wq[d0].rot, WF[d0].rot, WW)), Wq[d0].tank && WF[d0].tank && WU[d0].tank && (Wk[Wz][d0].tank = Iz(Wq[d0].tank, WF[d0].tank, WU[d0].tank, WW)), null != Wq[d0].enabled && null != WF[d0].enabled && (null == Wq[d0].enableFade && (Wq[d0].enableFade = WF[d0].enabled ? 1 : 0), Wk[Wz][d0].enableFade = Wq[d0].enableFade, WF[d0].enabled ? Wk[Wz][d0].enableFade = Math.min(1, Wq[d0].enableFade + 5 * T6) : Wk[Wz][d0].enableFade = Math.max(0, Wq[d0].enableFade - 5 * T6)));
                                }
                                break;
                            case 'smoothRatio':
                                ;
                                break;
                            case 'healthBarFade':
                            case 'damageTime':
                                break;
                            default:
                                ;
                            }
                        }), Wk;
                    }
                }
                function Iz(WI, WP, WN, WW) {
                    var WD = {
                        WQ: WG,
                        WQ: WG,
                        WQ: WG
                    };
                    return Object.keys(WP).forEach(function (WQ) {
                        var Wk = WP[WQ], WX = WI[WQ] || Wk, WG = WN && WN[WQ] || Wk;
                        switch (WQ) {
                        case 'barrels':
                            ;
                            for (var Wz = 0; Wz < WX.length; Wz++) {
                                WX[Wz] && Wk[Wz] && (WD[WQ][Wz].animTime = CH(WG[Wz].animTime, Wk[Wz].animTime, WW));
                            }
                            break;
                        case 'gadgets':
                            ;
                            for (var WF = 0; WF < WG.length; WF++) {
                                Wk[WF] && WX[WF] && (WX[WF].animTime && Wk[WF].animTime && (WD[WQ][WF].animTime = CH(WX[WF].animTime, Wk[WF].animTime, WW)), WX[WF].rot && Wk[WF].rot && (WD[WQ][WF].rot = IU(WX[WF].rot, Wk[WF].rot, WW)), WX[WF].tank && Wk[WF].tank && WG[WF].tank && (WD[WQ][WF].tank = Iz(WX[WF].tank, Wk[WF].tank, WG[WF].tank, WW)), null != WX[WF].enabled && null != Wk[WF].enabled && (null == WX[WF].enableFade && (WX[WF].enableFade = Wk[WF].enabled ? 1 : 0), WD[WQ][WF].enableFade = WX[WF].enableFade, Wk[WF].enabled ? WD[WQ][WF].enableFade = Math.min(1, WX[WF].enableFade + 5 * T6) : WD[WQ][WF].enableFade = Math.max(0, WX[WF].enableFade - 5 * T6)));
                            }
                            break;
                        default:
                            ;
                        }
                    }), WD;
                }
                function IF(WI, WP, WN, WW, WD) {
                    var WQ = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
                    if (WI) {
                        if (WP) {
                            var Wk, WX = {
                                    match_length: 258 - (WU - Wq),
                                    textContent: lM[0].split('-', 1)[0].trim()
                                }, WG = {
                                    onclick: function () {
                                        ;
                                        rq(WQ).tank.barrels.push(C8(H2));
                                        l4();
                                        H7();
                                    },
                                    onclick: function () {
                                        ;
                                        rq(WQ).tank.gadgets.push(C8(H3));
                                        l4();
                                        H7();
                                    },
                                    animTime: 0,
                                    manualClose: true,
                                    forcedClosed: WF,
                                    sendMessage: function () {
                                        ;
                                        WX('WebSocket closed. Message not sent.');
                                    }
                                }, Wz = {
                                    textContent: WX.name,
                                    nameColor: null !== (WG = Wz.nameColor) && void 0 !== WG ? WG : 6,
                                    scoreRatio: Wz.score / AM.highestScore,
                                    scoreRatio: Number.isNaN(Wz.scoreRatio) || !Number.isFinite(Wz.score) ? Number.isFinite(Wz.score) ? 0 : 1 : Wz.scoreRatio,
                                    fadeTime: 0,
                                    formattedScore: WS(Wz.score),
                                    animTime: 0
                                }, WF = IH(WI);
                            try {
                                for (WF.s(); !(Wk = WF.n()).done;) {
                                    var Wq = Wk.value;
                                    WX[Wq.id] = Wq;
                                    WW[Wq.id] && (Wq.fadeType = WW[Wq.id]);
                                }
                            } catch (d5) {
                                WF.e(d5);
                            } finally {
                                WF.f();
                            }
                            var WU, WB = IH(WP);
                            try {
                                for (WB.s(); !(WU = WB.n()).done;) {
                                    var d0 = WU.value;
                                    WG[d0.id] = d0;
                                }
                            } catch (d6) {
                                WB.e(d6);
                            } finally {
                                WB.f();
                            }
                            var d1, d2 = IH(WN);
                            try {
                                for (d2.s(); !(d1 = d2.n()).done;) {
                                    var d3 = d1.value;
                                    Wz[d3.id] = d3;
                                }
                            } catch (d7) {
                                d2.e(d7);
                            } finally {
                                d2.f();
                            }
                            var d4 = WI.concat(WP.filter(function (d8) {
                                return !WX[d8.id];
                            }));
                            return d4.map(function (d8) {
                                return IG(d8, WG[d8.id] || d8, Wz[d8.id] || d8, WD, WQ, true);
                            }).filter(function (d8) {
                                ;
                                return !!(WG[d8.id] || d8.fadeType && d8.fadeTime > 0);
                            });
                        }
                        return WI;
                    }
                }
                function Iq(WI, WP, WN, WW) {
                    var WD, WQ = {}, Wk = {
                            innerHTML: '<span style="font-weight: bold;">'.concat(W1(WN.username.substring(0, ZF.length)), '</span>'),
                            innerHTML: W1(WN.username.substring(ZF.length, WN.username.length)),
                            animTime: WX.animTime
                        }, WX = IH(WI);
                    try {
                        for (WX.s(); !(WD = WX.n()).done;) {
                            var WG = WD.value;
                            WQ[WG.id] = WG;
                        }
                    } catch (d1) {
                        WX.e(d1);
                    } finally {
                        WX.f();
                    }
                    var Wz, WF = IH(WN);
                    try {
                        for (WF.s(); !(Wz = WF.n()).done;) {
                            var Wq = Wz.value;
                            Wk[Wq.id] = Wq;
                        }
                    } catch (d2) {
                        WF.e(d2);
                    } finally {
                        WF.f();
                    }
                    if (WI) {
                        if (WP) {
                            for (var WU = new Array(WP.length), WB = 0; WB < WP.length; ++WB) {
                                var d0 = WP[WB];
                                WU[WB] = IG(WQ[d0.id] || d0, d0, Wk[d0.id] || d0, WW, false);
                            }
                            return WU;
                        }
                        return WI;
                    }
                }
                function IU(WI, WP, WN) {
                    var WW = (1 - WN) * Math.cos(WI) + WN * Math.cos(WP), WD = (1 - WN) * Math.sin(WI) + WN * Math.sin(WP);
                    return Math.atan2(WD, WW);
                }
                function IB(WI) {
                    ;
                    return IB = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (WP) {
                        return typeof WP;
                    } : function (WP) {
                        ;
                        return WP && 'function' == typeof Symbol && WP.constructor === Symbol && WP !== Symbol.prototype ? 'symbol' : typeof WP;
                    }, IB(WI);
                }
                function y0() {
                    ;
                    y0 = function () {
                        return WI;
                    };
                    var WI = { wrap: Wz }, WP = Object.prototype, WN = WP.hasOwnProperty, WW = Object.defineProperty || function (dK, dC, dE) {
                            ;
                            dK[dC] = dE.value;
                        }, WD = 'function' == typeof Symbol ? Symbol : {}, WQ = WD.iterator || '@@iterator', Wk = WD.asyncIterator || '@@asyncIterator', WX = WD.toStringTag || '@@toStringTag';
                    function WG(dK, dC, dE) {
                        ;
                        return Object.defineProperty(dK, dC, {
                            'value': dE,
                            'enumerable': true,
                            'configurable': true,
                            'writable': true
                        }), dK[dC];
                    }
                    try {
                        WG({}, '');
                    } catch (dK) {
                        WG = function (dC, dE, dH) {
                            return dC[dE] = dH;
                        };
                    }
                    function Wz(dC, dE, dH, dZ) {
                        var dV = dE && dE.prototype instanceof WU ? dE : WU, dT = Object.create(dV.prototype), dj = new dY(dZ || []);
                        return WW(dT, '_invoke', { 'value': d7(dC, dH, dj) }), dT;
                    }
                    function WF(dC, dE, dH) {
                        ;
                        try {
                            return {
                                'type': 'normal',
                                'arg': dC.call(dE, dH)
                            };
                        } catch (dZ) {
                            return {
                                'type': 'throw',
                                'arg': dZ
                            };
                        }
                    }
                    ;
                    var Wq = {};
                    function WU() {
                    }
                    function WB() {
                    }
                    function d0() {
                    }
                    var d1 = {};
                    WG(d1, WQ, function () {
                        return this;
                    });
                    var d2 = Object.getPrototypeOf, d3 = d2 && d2(d2(dM([])));
                    d3 && d3 !== WP && WN.call(d3, WQ) && (d1 = d3);
                    var d4 = d0.prototype = WU.prototype = Object.create(d1);
                    function d5(dC) {
                        ;
                        [
                            'next',
                            'throw',
                            'return'
                        ].forEach(function (dE) {
                            WG(dC, dE, function (dH) {
                                ;
                                return this['_invoke'](dE, dH);
                            });
                        });
                    }
                    function d6(dC, dE) {
                        ;
                        function dH(dV, dT, dj, dJ) {
                            var dR = WF(dC[dV], dC, dT);
                            if ('throw' !== dR.type) {
                                var dL = dR.arg, dA = dL.value;
                                return dA && 'object' == IB(dA) && WN.call(dA, '__await') ? dE.resolve(dA['__await']).then(function (dI) {
                                    ;
                                    dH('next', dI, dj, dJ);
                                }, function (dI) {
                                    ;
                                    dH('throw', dI, dj, dJ);
                                }) : dE.resolve(dA).then(function (dI) {
                                    ;
                                    dL.value = dI;
                                    dj(dL);
                                }, function (dI) {
                                    ;
                                    return dH('throw', dI, dj, dJ);
                                });
                            }
                            dJ(dR.arg);
                        }
                        var dZ;
                        WW(this, '_invoke', {
                            'value': function (dV, dT) {
                                ;
                                function dj() {
                                    return new dE(function (dJ, dR) {
                                        dH(dV, dT, dJ, dR);
                                    });
                                }
                                return dZ = dZ ? dZ.then(dj, dj) : dj();
                            }
                        });
                    }
                    function d7(dC, dE, dH) {
                        var dZ = 'suspendedStart';
                        return function (dV, dT) {
                            ;
                            if ('executing' === dZ) {
                                throw new Error('Generator is already running');
                            }
                            if ('completed' === dZ) {
                                if ('throw' === dV) {
                                    throw dT;
                                }
                                return dS();
                            }
                            for (dH.method = dV, dH.arg = dT;;) {
                                var dj = dH.delegate;
                                if (dj) {
                                    var dJ = d8(dj, dH);
                                    if (dJ) {
                                        if (dJ === Wq) {
                                            continue;
                                        }
                                        return dJ;
                                    }
                                }
                                if ('next' === dH.method) {
                                    dH.sent = dH['_sent'] = dH.arg;
                                } else {
                                    if ('throw' === dH.method) {
                                        if ('suspendedStart' === dZ) {
                                            throw dZ = 'completed', dH.arg;
                                        }
                                        dH.dispatchException(dH.arg);
                                    } else {
                                        'return' === dH.method && dH.abrupt('return', dH.arg);
                                    }
                                }
                                dZ = 'executing';
                                var dR = WF(dC, dE, dH);
                                if ('normal' === dR.type) {
                                    if (dZ = dH.done ? 'completed' : 'suspendedYield', dR.arg === Wq) {
                                        continue;
                                    }
                                    return {
                                        'value': dR.arg,
                                        'done': dH.done
                                    };
                                }
                                if ('throw' === dR.type) {
                                    dZ = 'completed';
                                    dH.method = 'throw';
                                    dH.arg = dR.arg;
                                }
                            }
                        };
                    }
                    function d8(dC, dE) {
                        var dH = dE.method, dZ = dC.iterator[dH];
                        if (void 0 === dZ) {
                            return dE.delegate = null, 'throw' === dH && dC.iterator.return && (dE.method = 'return', dE.arg = void 0, d8(dC, dE), 'throw' === dE.method) || 'return' !== dH && (dE.method = 'throw', dE.arg = new TypeError('The iterator does not provide a \'' + dH + '\' method')), Wq;
                        }
                        var dV = WF(dZ, dC.iterator, dE.arg);
                        if ('throw' === dV.type) {
                            return dE.method = 'throw', dE.arg = dV.arg, dE.delegate = null, Wq;
                        }
                        var dT = dV.arg;
                        return dT ? dT.done ? (dE[dC.resultName] = dT.value, dE.next = dC.nextLoc, 'return' !== dE.method && (dE.method = 'next', dE.arg = void 0), dE.delegate = null, Wq) : dT : (dE.method = 'throw', dE.arg = new TypeError('iterator result is not an object'), dE.delegate = null, Wq);
                    }
                    function d9(dC) {
                        var dE = { 'tryLoc': dC[0] };
                        1 in dC && (dE.catchLoc = dC[1]);
                        if (2 in dC) {
                            dE.finallyLoc = dC[2];
                            dE.afterLoc = dC[3];
                        }
                        this.tryEntries.push(dE);
                    }
                    function dO(dC) {
                        var dE = dC.completion || {};
                        dE.type = 'normal';
                        delete dE.arg;
                        dC.completion = dE;
                    }
                    function dY(dC) {
                        ;
                        this.tryEntries = [{ 'tryLoc': 'root' }];
                        dC.forEach(d9, this);
                        this.reset(true);
                    }
                    function dM(dC) {
                        ;
                        if (dC) {
                            var dE = dC[WQ];
                            if (dE) {
                                return dE.call(dC);
                            }
                            if ('function' == typeof dC.next) {
                                return dC;
                            }
                            if (!isNaN(dC.length)) {
                                var dH = -1, dZ = function dV() {
                                        ;
                                        for (; ++dH < dC.length;) {
                                            if (WN.call(dC, dH)) {
                                                return dV.value = dC[dH], dV.done = false, dV;
                                            }
                                        }
                                        return dV.value = void 0, dV.done = true, dV;
                                    };
                                return dZ.next = dZ;
                            }
                        }
                        return { 'next': dS };
                    }
                    function dS() {
                        return {
                            'value': void 0,
                            'done': true
                        };
                    }
                    return WB.prototype = d0, WW(d4, 'constructor', {
                        'value': d0,
                        'configurable': true
                    }), WW(d0, 'constructor', {
                        'value': WB,
                        'configurable': true
                    }), WB.displayName = WG(d0, WX, 'GeneratorFunction'), WI.isGeneratorFunction = function (dC) {
                        var dE = 'function' == typeof dC && dC.constructor;
                        return !!dE && (dE === WB || 'GeneratorFunction' === (dE.displayName || dE.name));
                    }, WI.mark = function (dC) {
                        ;
                        return Object.setPrototypeOf ? Object.setPrototypeOf(dC, d0) : (dC['__proto__'] = d0, WG(dC, WX, 'GeneratorFunction')), dC.prototype = Object.create(d4), dC;
                    }, WI.awrap = function (dC) {
                        return { '__await': dC };
                    }, d5(d6.prototype), WG(d6.prototype, Wk, function () {
                        return this;
                    }), WI.AsyncIterator = d6, WI.async = function (dC, dE, dH, dZ, dV) {
                        ;
                        void 0 === dV && (dV = Promise);
                        var dT = new d6(Wz(dC, dE, dH, dZ), dV);
                        return WI.isGeneratorFunction(dE) ? dT : dT.next().then(function (dj) {
                            ;
                            return dj.done ? dj.value : dT.next();
                        });
                    }, d5(d4), WG(d4, WX, 'Generator'), WG(d4, WQ, function () {
                        return this;
                    }), WG(d4, 'toString', function () {
                        ;
                        return '[object Generator]';
                    }), WI.keys = function (dC) {
                        var dE = Object(dC), dH = [];
                        for (var dZ in dE)
                            dH.push(dZ);
                        return dH.reverse(), function dV() {
                            ;
                            for (; dH.length;) {
                                var dT = dH.pop();
                                if (dT in dE) {
                                    return dV.value = dT, dV.done = false, dV;
                                }
                            }
                            return dV.done = true, dV;
                        };
                    }, WI.values = dM, dY.prototype = {
                        'constructor': dY,
                        'reset': function (dC) {
                            ;
                            if (this.prev = 0, this.next = 0, this.sent = this['_sent'] = void 0, this.done = false, this.delegate = null, this.method = 'next', this.arg = void 0, this.tryEntries.forEach(dO), !dC) {
                                for (var dE in this)
                                    't' === dE.charAt(0) && WN.call(this, dE) && !isNaN(+dE.slice(1)) && (this[dE] = void 0);
                            }
                        },
                        'stop': function () {
                            ;
                            this.done = true;
                            var dC = this.tryEntries[0].completion;
                            if ('throw' === dC.type) {
                                throw dC.arg;
                            }
                            return this.rval;
                        },
                        'dispatchException': function (dC) {
                            ;
                            if (this.done) {
                                throw dC;
                            }
                            var dE = this;
                            function dH(dR, dL) {
                                ;
                                return dT.type = 'throw', dT.arg = dC, dE.next = dR, dL && (dE.method = 'next', dE.arg = void 0), !!dL;
                            }
                            for (var dZ = this.tryEntries.length - 1; dZ >= 0; --dZ) {
                                var dV = this.tryEntries[dZ], dT = dV.completion;
                                if ('root' === dV.tryLoc) {
                                    return dH('end');
                                }
                                if (dV.tryLoc <= this.prev) {
                                    var dj = WN.call(dV, 'catchLoc'), dJ = WN.call(dV, 'finallyLoc');
                                    if (dj && dJ) {
                                        if (this.prev < dV.catchLoc) {
                                            return dH(dV.catchLoc, true);
                                        }
                                        if (this.prev < dV.finallyLoc) {
                                            return dH(dV.finallyLoc);
                                        }
                                    } else {
                                        if (dj) {
                                            if (this.prev < dV.catchLoc) {
                                                return dH(dV.catchLoc, true);
                                            }
                                        } else {
                                            if (!dJ) {
                                                throw new Error('try statement without catch or finally');
                                            }
                                            if (this.prev < dV.finallyLoc) {
                                                return dH(dV.finallyLoc);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        'abrupt': function (dC, dE) {
                            ;
                            for (var dH = this.tryEntries.length - 1; dH >= 0; --dH) {
                                var dZ = this.tryEntries[dH];
                                if (dZ.tryLoc <= this.prev && WN.call(dZ, 'finallyLoc') && this.prev < dZ.finallyLoc) {
                                    var dV = dZ;
                                    break;
                                }
                            }
                            dV && ('break' === dC || 'continue' === dC) && dV.tryLoc <= dE && dE <= dV.finallyLoc && (dV = null);
                            var dT = dV ? dV.completion : {};
                            return dT.type = dC, dT.arg = dE, dV ? (this.method = 'next', this.next = dV.finallyLoc, Wq) : this.complete(dT);
                        },
                        'complete': function (dC, dE) {
                            ;
                            if ('throw' === dC.type) {
                                throw dC.arg;
                            }
                            return 'break' === dC.type || 'continue' === dC.type ? this.next = dC.arg : 'return' === dC.type ? (this.rval = this.arg = dC.arg, this.method = 'return', this.next = 'end') : 'normal' === dC.type && dE && (this.next = dE), Wq;
                        },
                        'finish': function (dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.finallyLoc === dC) {
                                    return this.complete(dH.completion, dH.afterLoc), dO(dH), Wq;
                                }
                            }
                        },
                        'catch': function (dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.tryLoc === dC) {
                                    var dZ = dH.completion;
                                    if ('throw' === dZ.type) {
                                        var dV = dZ.arg;
                                        dO(dH);
                                    }
                                    return dV;
                                }
                            }
                            throw new Error('illegal catch attempt');
                        },
                        'delegateYield': function (dC, dE, dH) {
                            ;
                            return this.delegate = {
                                'iterator': dM(dC),
                                'resultName': dE,
                                'nextLoc': dH
                            }, 'next' === this.method && (this.arg = void 0), Wq;
                        }
                    }, WI;
                }
                function y1(WI, WP, WN, WW, WD, WQ, Wk) {
                    ;
                    try {
                        var WX = WI[WQ](Wk), WG = WX.value;
                    } catch (Wz) {
                        return void WN(Wz);
                    }
                    WX.done ? WP(WG) : Promise.resolve(WG).then(WW, WD);
                }
                function y2(WI) {
                    return function () {
                        var WP = this, WN = arguments;
                        return new Promise(function (WW, WD) {
                            var WQ = WI.apply(WP, WN);
                            function Wk(WG) {
                                ;
                                y1(WQ, WW, WD, Wk, WX, 'next', WG);
                            }
                            function WX(WG) {
                                ;
                                y1(WQ, WW, WD, Wk, WX, 'throw', WG);
                            }
                            Wk(void 0);
                        });
                    };
                }
                function y3(WI, WP, WN) {
                    ;
                    return y4.apply(this, arguments);
                }
                function y4() {
                    ;
                    return y4 = y2(y0().mark(function WI(WP, WN, WW) {
                        ;
                        return y0().wrap(function (WD) {
                            ;
                            for (;;) {
                                switch (WD.prev = WD.next) {
                                case 0:
                                    return WD.abrupt('return', new Promise(function (WQ) {
                                        ;
                                        WN || (WN = {});
                                        var Wk = {
                                            'method': WW,
                                            'headers': {
                                                'Accept': 'application/json',
                                                'Content-Type': 'application/json'
                                            },
                                            'body': JSON.stringify(WN)
                                        };
                                        'GET' == WW && delete Wk.body;
                                        fetch(WP, Wk).catch(function (WX) {
                                            ;
                                            WQ({ 'error': 'Failed to connect to server.' });
                                        }).then((function () {
                                            var WX = y2(y0().mark(function WG(Wz) {
                                                var WF;
                                                return y0().wrap(function (Wq) {
                                                    ;
                                                    for (;;) {
                                                        switch (Wq.prev = Wq.next) {
                                                        case 0:
                                                            return Wq.next = 2, Wz.text();
                                                        case 2:
                                                            WF = Wq.sent;
                                                            try {
                                                                WQ(JSON.parse(WF));
                                                            } catch (WU) {
                                                                WQ({ 'error': 'Failed to parse response.' });
                                                            }
                                                        case 4:
                                                        case 'end':
                                                            return Wq.stop();
                                                        }
                                                    }
                                                }, WG);
                                            }));
                                            return function (Wz) {
                                                ;
                                                return WX.apply(this, arguments);
                                            };
                                        }())).catch(function (WX) {
                                            ;
                                            WQ({ 'error': 'Failed to parse response.' });
                                        });
                                    }));
                                case 1:
                                case 'end':
                                    return WD.stop();
                                }
                            }
                        }, WI);
                    })), y4.apply(this, arguments);
                }
                function y5(WI, WP) {
                    ;
                    return y6.apply(this, arguments);
                }
                function y6() {
                    ;
                    return y6 = y2(y0().mark(function WI(WP, WN) {
                        return y0().wrap(function (WW) {
                            ;
                            for (;;) {
                                switch (WW.prev = WW.next) {
                                case 0:
                                    return WW.abrupt('return', y3(WP, WN, 'POST'));
                                case 1:
                                case 'end':
                                    return WW.stop();
                                }
                            }
                        }, WI);
                    })), y6.apply(this, arguments);
                }
                function y7(WI) {
                    ;
                    return y7 = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (WP) {
                        return typeof WP;
                    } : function (WP) {
                        ;
                        return WP && 'function' == typeof Symbol && WP.constructor === Symbol && WP !== Symbol.prototype ? 'symbol' : typeof WP;
                    }, y7(WI);
                }
                function y8() {
                    ;
                    y8 = function () {
                        return WI;
                    };
                    var WI = { wrap: Wz }, WP = Object.prototype, WN = WP.hasOwnProperty, WW = Object.defineProperty || function (dK, dC, dE) {
                            ;
                            dK[dC] = dE.value;
                        }, WD = 'function' == typeof Symbol ? Symbol : {}, WQ = WD.iterator || '@@iterator', Wk = WD.asyncIterator || '@@asyncIterator', WX = WD.toStringTag || '@@toStringTag';
                    function WG(dK, dC, dE) {
                        ;
                        return Object.defineProperty(dK, dC, {
                            'value': dE,
                            'enumerable': true,
                            'configurable': true,
                            'writable': true
                        }), dK[dC];
                    }
                    try {
                        WG({}, '');
                    } catch (dK) {
                        WG = function (dC, dE, dH) {
                            return dC[dE] = dH;
                        };
                    }
                    function Wz(dC, dE, dH, dZ) {
                        var dV = dE && dE.prototype instanceof WU ? dE : WU, dT = Object.create(dV.prototype), dj = new dY(dZ || []);
                        return WW(dT, '_invoke', { 'value': d7(dC, dH, dj) }), dT;
                    }
                    function WF(dC, dE, dH) {
                        ;
                        try {
                            return {
                                'type': 'normal',
                                'arg': dC.call(dE, dH)
                            };
                        } catch (dZ) {
                            return {
                                'type': 'throw',
                                'arg': dZ
                            };
                        }
                    }
                    ;
                    var Wq = {};
                    function WU() {
                    }
                    function WB() {
                    }
                    function d0() {
                    }
                    var d1 = {};
                    WG(d1, WQ, function () {
                        return this;
                    });
                    var d2 = Object.getPrototypeOf, d3 = d2 && d2(d2(dM([])));
                    d3 && d3 !== WP && WN.call(d3, WQ) && (d1 = d3);
                    var d4 = d0.prototype = WU.prototype = Object.create(d1);
                    function d5(dC) {
                        ;
                        [
                            'next',
                            'throw',
                            'return'
                        ].forEach(function (dE) {
                            WG(dC, dE, function (dH) {
                                ;
                                return this['_invoke'](dE, dH);
                            });
                        });
                    }
                    function d6(dC, dE) {
                        ;
                        function dH(dV, dT, dj, dJ) {
                            var dR = WF(dC[dV], dC, dT);
                            if ('throw' !== dR.type) {
                                var dL = dR.arg, dA = dL.value;
                                return dA && 'object' == y7(dA) && WN.call(dA, '__await') ? dE.resolve(dA['__await']).then(function (dI) {
                                    ;
                                    dH('next', dI, dj, dJ);
                                }, function (dI) {
                                    dH('throw', dI, dj, dJ);
                                }) : dE.resolve(dA).then(function (dI) {
                                    ;
                                    dL.value = dI;
                                    dj(dL);
                                }, function (dI) {
                                    ;
                                    return dH('throw', dI, dj, dJ);
                                });
                            }
                            dJ(dR.arg);
                        }
                        var dZ;
                        WW(this, '_invoke', {
                            'value': function (dV, dT) {
                                ;
                                function dj() {
                                    return new dE(function (dJ, dR) {
                                        dH(dV, dT, dJ, dR);
                                    });
                                }
                                return dZ = dZ ? dZ.then(dj, dj) : dj();
                            }
                        });
                    }
                    function d7(dC, dE, dH) {
                        var dZ = 'suspendedStart';
                        return function (dV, dT) {
                            ;
                            if ('executing' === dZ) {
                                throw new Error('Generator is already running');
                            }
                            if ('completed' === dZ) {
                                if ('throw' === dV) {
                                    throw dT;
                                }
                                return dS();
                            }
                            for (dH.method = dV, dH.arg = dT;;) {
                                var dj = dH.delegate;
                                if (dj) {
                                    var dJ = d8(dj, dH);
                                    if (dJ) {
                                        if (dJ === Wq) {
                                            continue;
                                        }
                                        return dJ;
                                    }
                                }
                                if ('next' === dH.method) {
                                    dH.sent = dH['_sent'] = dH.arg;
                                } else {
                                    if ('throw' === dH.method) {
                                        if ('suspendedStart' === dZ) {
                                            throw dZ = 'completed', dH.arg;
                                        }
                                        dH.dispatchException(dH.arg);
                                    } else {
                                        'return' === dH.method && dH.abrupt('return', dH.arg);
                                    }
                                }
                                dZ = 'executing';
                                var dR = WF(dC, dE, dH);
                                if ('normal' === dR.type) {
                                    if (dZ = dH.done ? 'completed' : 'suspendedYield', dR.arg === Wq) {
                                        continue;
                                    }
                                    return {
                                        'value': dR.arg,
                                        'done': dH.done
                                    };
                                }
                                if ('throw' === dR.type) {
                                    dZ = 'completed';
                                    dH.method = 'throw';
                                    dH.arg = dR.arg;
                                }
                            }
                        };
                    }
                    function d8(dC, dE) {
                        var dH = dE.method, dZ = dC.iterator[dH];
                        if (void 0 === dZ) {
                            return dE.delegate = null, 'throw' === dH && dC.iterator.return && (dE.method = 'return', dE.arg = void 0, d8(dC, dE), 'throw' === dE.method) || 'return' !== dH && (dE.method = 'throw', dE.arg = new TypeError('The iterator does not provide a \'' + dH + '\' method')), Wq;
                        }
                        var dV = WF(dZ, dC.iterator, dE.arg);
                        if ('throw' === dV.type) {
                            return dE.method = 'throw', dE.arg = dV.arg, dE.delegate = null, Wq;
                        }
                        var dT = dV.arg;
                        return dT ? dT.done ? (dE[dC.resultName] = dT.value, dE.next = dC.nextLoc, 'return' !== dE.method && (dE.method = 'next', dE.arg = void 0), dE.delegate = null, Wq) : dT : (dE.method = 'throw', dE.arg = new TypeError('iterator result is not an object'), dE.delegate = null, Wq);
                    }
                    function d9(dC) {
                        var dE = { 'tryLoc': dC[0] };
                        1 in dC && (dE.catchLoc = dC[1]);
                        if (2 in dC) {
                            dE.finallyLoc = dC[2];
                            dE.afterLoc = dC[3];
                        }
                        this.tryEntries.push(dE);
                    }
                    function dO(dC) {
                        var dE = dC.completion || {};
                        dE.type = 'normal';
                        delete dE.arg;
                        dC.completion = dE;
                    }
                    function dY(dC) {
                        ;
                        this.tryEntries = [{ 'tryLoc': 'root' }];
                        dC.forEach(d9, this);
                        this.reset(true);
                    }
                    function dM(dC) {
                        ;
                        if (dC) {
                            var dE = dC[WQ];
                            if (dE) {
                                return dE.call(dC);
                            }
                            if ('function' == typeof dC.next) {
                                return dC;
                            }
                            if (!isNaN(dC.length)) {
                                var dH = -1, dZ = function dV() {
                                        ;
                                        for (; ++dH < dC.length;) {
                                            if (WN.call(dC, dH)) {
                                                return dV.value = dC[dH], dV.done = false, dV;
                                            }
                                        }
                                        return dV.value = void 0, dV.done = true, dV;
                                    };
                                return dZ.next = dZ;
                            }
                        }
                        return { 'next': dS };
                    }
                    function dS() {
                        return {
                            'value': void 0,
                            'done': true
                        };
                    }
                    return WB.prototype = d0, WW(d4, 'constructor', {
                        'value': d0,
                        'configurable': true
                    }), WW(d0, 'constructor', {
                        'value': WB,
                        'configurable': true
                    }), WB.displayName = WG(d0, WX, 'GeneratorFunction'), WI.isGeneratorFunction = function (dC) {
                        var dE = 'function' == typeof dC && dC.constructor;
                        return !!dE && (dE === WB || 'GeneratorFunction' === (dE.displayName || dE.name));
                    }, WI.mark = function (dC) {
                        ;
                        return Object.setPrototypeOf ? Object.setPrototypeOf(dC, d0) : (dC['__proto__'] = d0, WG(dC, WX, 'GeneratorFunction')), dC.prototype = Object.create(d4), dC;
                    }, WI.awrap = function (dC) {
                        return { '__await': dC };
                    }, d5(d6.prototype), WG(d6.prototype, Wk, function () {
                        return this;
                    }), WI.AsyncIterator = d6, WI.async = function (dC, dE, dH, dZ, dV) {
                        ;
                        void 0 === dV && (dV = Promise);
                        var dT = new d6(Wz(dC, dE, dH, dZ), dV);
                        return WI.isGeneratorFunction(dE) ? dT : dT.next().then(function (dj) {
                            ;
                            return dj.done ? dj.value : dT.next();
                        });
                    }, d5(d4), WG(d4, WX, 'Generator'), WG(d4, WQ, function () {
                        return this;
                    }), WG(d4, 'toString', function () {
                        return '[object Generator]';
                    }), WI.keys = function (dC) {
                        var dE = Object(dC), dH = [];
                        for (var dZ in dE)
                            dH.push(dZ);
                        return dH.reverse(), function dV() {
                            ;
                            for (; dH.length;) {
                                var dT = dH.pop();
                                if (dT in dE) {
                                    return dV.value = dT, dV.done = false, dV;
                                }
                            }
                            return dV.done = true, dV;
                        };
                    }, WI.values = dM, dY.prototype = {
                        'constructor': dY,
                        'reset': function (dC) {
                            ;
                            if (this.prev = 0, this.next = 0, this.sent = this['_sent'] = void 0, this.done = false, this.delegate = null, this.method = 'next', this.arg = void 0, this.tryEntries.forEach(dO), !dC) {
                                for (var dE in this)
                                    't' === dE.charAt(0) && WN.call(this, dE) && !isNaN(+dE.slice(1)) && (this[dE] = void 0);
                            }
                        },
                        'stop': function () {
                            ;
                            this.done = true;
                            var dC = this.tryEntries[0].completion;
                            if ('throw' === dC.type) {
                                throw dC.arg;
                            }
                            return this.rval;
                        },
                        'dispatchException': function (dC) {
                            ;
                            if (this.done) {
                                throw dC;
                            }
                            var dE = this;
                            function dH(dR, dL) {
                                ;
                                return dT.type = 'throw', dT.arg = dC, dE.next = dR, dL && (dE.method = 'next', dE.arg = void 0), !!dL;
                            }
                            for (var dZ = this.tryEntries.length - 1; dZ >= 0; --dZ) {
                                var dV = this.tryEntries[dZ], dT = dV.completion;
                                if ('root' === dV.tryLoc) {
                                    return dH('end');
                                }
                                if (dV.tryLoc <= this.prev) {
                                    var dj = WN.call(dV, 'catchLoc'), dJ = WN.call(dV, 'finallyLoc');
                                    if (dj && dJ) {
                                        if (this.prev < dV.catchLoc) {
                                            return dH(dV.catchLoc, true);
                                        }
                                        if (this.prev < dV.finallyLoc) {
                                            return dH(dV.finallyLoc);
                                        }
                                    } else {
                                        if (dj) {
                                            if (this.prev < dV.catchLoc) {
                                                return dH(dV.catchLoc, true);
                                            }
                                        } else {
                                            if (!dJ) {
                                                throw new Error('try statement without catch or finally');
                                            }
                                            if (this.prev < dV.finallyLoc) {
                                                return dH(dV.finallyLoc);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        'abrupt': function (dC, dE) {
                            ;
                            for (var dH = this.tryEntries.length - 1; dH >= 0; --dH) {
                                var dZ = this.tryEntries[dH];
                                if (dZ.tryLoc <= this.prev && WN.call(dZ, 'finallyLoc') && this.prev < dZ.finallyLoc) {
                                    var dV = dZ;
                                    break;
                                }
                            }
                            dV && ('break' === dC || 'continue' === dC) && dV.tryLoc <= dE && dE <= dV.finallyLoc && (dV = null);
                            var dT = dV ? dV.completion : {};
                            return dT.type = dC, dT.arg = dE, dV ? (this.method = 'next', this.next = dV.finallyLoc, Wq) : this.complete(dT);
                        },
                        'complete': function (dC, dE) {
                            ;
                            if ('throw' === dC.type) {
                                throw dC.arg;
                            }
                            return 'break' === dC.type || 'continue' === dC.type ? this.next = dC.arg : 'return' === dC.type ? (this.rval = this.arg = dC.arg, this.method = 'return', this.next = 'end') : 'normal' === dC.type && dE && (this.next = dE), Wq;
                        },
                        'finish': function (dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.finallyLoc === dC) {
                                    return this.complete(dH.completion, dH.afterLoc), dO(dH), Wq;
                                }
                            }
                        },
                        'catch': function (dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.tryLoc === dC) {
                                    var dZ = dH.completion;
                                    if ('throw' === dZ.type) {
                                        var dV = dZ.arg;
                                        dO(dH);
                                    }
                                    return dV;
                                }
                            }
                            throw new Error('illegal catch attempt');
                        },
                        'delegateYield': function (dC, dE, dH) {
                            ;
                            return this.delegate = {
                                'iterator': dM(dC),
                                'resultName': dE,
                                'nextLoc': dH
                            }, 'next' === this.method && (this.arg = void 0), Wq;
                        }
                    }, WI;
                }
                function y9(WI, WP, WN, WW, WD, WQ, Wk) {
                    ;
                    try {
                        var WX = WI[WQ](Wk), WG = WX.value;
                    } catch (Wz) {
                        return void WN(Wz);
                    }
                    WX.done ? WP(WG) : Promise.resolve(WG).then(WW, WD);
                }
                function yO(WI) {
                    return function () {
                        var WP = this, WN = arguments;
                        return new Promise(function (WW, WD) {
                            var WQ = WI.apply(WP, WN);
                            function Wk(WG) {
                                ;
                                y9(WQ, WW, WD, Wk, WX, 'next', WG);
                            }
                            function WX(WG) {
                                ;
                                y9(WQ, WW, WD, Wk, WX, 'throw', WG);
                            }
                            Wk(void 0);
                        });
                    };
                }
                var yY = {};
                function yM(WI, WP) {
                    var WN = WI.replace('http', 'ws');
                    WN += WN.endsWith('/') ? '' : '/';
                    var WW = {
                        'path': 'ws',
                        'binaryType': 'arraybuffer',
                        'getToken': false,
                        'query': {},
                        'key': '',
                        'ping': true,
                        'onConnect': function () {
                        },
                        'onDisconnect': function () {
                        },
                        'onMessage': function () {
                        },
                        'onError': function () {
                        },
                        'sendSessionID': false,
                        'type': '?'
                    };
                    for (var WD in WP) {
                        if (null == WW[WD]) {
                            throw new Error('Unknown websocket option '.concat(WD));
                        }
                        WW[WD] = WP[WD];
                    }
                    yY[WW.type] || (yY[WW.type] = 1);
                    var WQ = yY[WW.type]++, Wk = function () {
                            ;
                            for (var WF, Wq = arguments.length, WU = new Array(Wq), WB = 0; WB < Wq; WB++) {
                                WU[WB] = arguments[WB];
                            }
                            (WF = console).log.apply(WF, ['['.concat(WW.type, '-').concat(WQ, ']')].concat(WU));
                        }, WX = function () {
                            ;
                            for (var WF, Wq = arguments.length, WU = new Array(Wq), WB = 0; WB < Wq; WB++) {
                                WU[WB] = arguments[WB];
                            }
                            (WF = console).warn.apply(WF, ['['.concat(WW.type, '-').concat(WQ, ']')].concat(WU));
                        };
                    Wk('Attempting to connect to '.concat(WI, '/'));
                    var WG = {
                            'log': Wk,
                            'warn': WX,
                            'kickReason': [],
                            'sendMessage': function () {
                                WX('WebSocket not yet open. Message not sent.');
                            },
                            'close': function () {
                                var WF = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                                ;
                                ;
                                WG.connection ? WG.connection.close() : WG.closed = true;
                                Wk(WF ? 'Force closing connection.' : 'Closing connection.');
                                ;
                            },
                            'forceClose': function () {
                                ;
                                WG.close(true);
                            }
                        }, Wz = performance.now();
                    return WG.getOpenTime = function () {
                        ;
                        return performance.now() - Wz;
                    }, function (WF, Wq, WU, WB, d0, d1) {
                        ;
                        yS.apply(this, arguments);
                    }(WG, WI, WN, WW, Wk, WX), WG;
                }
                function yS() {
                    ;
                    return yS = yO(y8().mark(function WI(WP, WN, WW, WD, WQ, Wk) {
                        var WX, WG, Wz, WF;
                        return y8().wrap(function (Wq) {
                            ;
                            for (;;) {
                                switch (Wq.prev = Wq.next) {
                                case 0:
                                    return Wq.next = 2, y5(P5 + '/api/joinserver', {
                                        'a': WN,
                                        'b': 'WwGNDjptIuQ1WZ62Ihe8M',
                                        'c': WD.key
                                    });
                                case 2:
                                    if (!(WX = Wq.sent).error) {
                                        ;
                                        break;
                                    }
                                    return WP.forceClose(), WD.onError({ 'message': WX.error }), Wq.abrupt('return');
                                case 7:
                                    if (!WX.captcha) {
                                        ;
                                        break;
                                    }
                                    return Wq.next = 10, new Promise(function (WU) {
                                        NM(function (d0) {
                                            WU(d0);
                                        });
                                        var WB = setInterval(function () {
                                            ;
                                            WP.closed && (clearInterval(WB), WU(null));
                                        });
                                    });
                                case 10:
                                    if (WD.query.key = Wq.sent, null != WD.query.key) {
                                        ;
                                        break;
                                    }
                                    return Wq.abrupt('return');
                                case 13:
                                    if (WD.query.token = WX.token, !WP.closed) {
                                        ;
                                        break;
                                    }
                                    return Wq.abrupt('return');
                                case 16:
                                    for (Wz in (WG = '', WD.query))
                                        if (null != WD.query[Wz]) {
                                            WG += '' == WG ? '?' : '&';
                                            WG += Wz + '=' + encodeURIComponent(WD.query[Wz]);
                                        }
                                    WP.connection = new WebSocket(WW + WD.path + WG), WP.connection.binaryType = WD.binaryType, WP.connection.address = WW, WP.connection.addEventListener('open', function (WU) {
                                        ;
                                        WP.forcedClosed || (WQ('Successfully connected.'), WP.sendMessage = function (WB, d0) {
                                            ;
                                            if (WP.connection.readyState === WebSocket.OPEN) {
                                                var d1 = E1(E0(yT(d0), new Uint8Array([WB])), 152);
                                                d1.byteLength > 2000000 ? AU('Packet size of '.concat(d1.byteLength, ' bytes exceeded the maximum packet size of ').concat(2000000, ' bytes.')) : WP.connection.send(d1);
                                            } else {
                                                Wk('WebSocket closing. Message not sent.');
                                            }
                                        }, WD.sendSessionID && WP.sendMessage(42, eE), WD.ping && (WF = setInterval(function () {
                                            ;
                                            WP.sendMessage(18, WP.getOpenTime());
                                        }, 1000)), WD.onConnect(WN));
                                    }), WP.connection.addEventListener('close', function (WU) {
                                        ;
                                        if (WU.manualClose = WP.manualClose, !WP.forcedClosed) {
                                            var WB = WU.reason, d0 = WU.code, d1 = WU.wasClean;
                                            WQ('Disconnected. Code: '.concat(d0, ', Reason: ').concat(WB || 'Not Specified', ', Clean: ').concat(d1));
                                            ;
                                            WP.errored || WD.onDisconnect(WU);
                                        }
                                        WF && clearInterval(WF);
                                        ;
                                    }), WP.connection.addEventListener('error', function (WU) {
                                        ;
                                        WP.forcedClosed || (WQ('Error occurred while connecting'.concat(WU.message ? ': '.concat(WU.message) : '. No reason specified.')), WD.onError(WU), WP.errored = true);
                                    }), WP.connection.addEventListener('message', function (WU) {
                                        ;
                                        if (WP.forcedClosed) {
                                            Wk('Message from server ignored because it was received while the socket was force closing.');
                                        } else {
                                            var WB = E1(new Uint8Array(WU.data), 158), d0 = WB[WB.length - 1], d1 = yj(WB.slice(0, WB.length - 1));
                                            WD.onMessage(d0, d1);
                                        }
                                    });
                                case 25:
                                case 'end':
                                    return Wq.stop();
                                }
                            }
                        }, WI);
                    })), yS.apply(this, arguments);
                }
                function yK(WI) {
                    ;
                    return yK = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (WP) {
                        return typeof WP;
                    } : function (WP) {
                        ;
                        return WP && 'function' == typeof Symbol && WP.constructor === Symbol && WP !== Symbol.prototype ? 'symbol' : typeof WP;
                    }, yK(WI);
                }
                function yC() {
                    ;
                    yC = function () {
                        return WI;
                    };
                    var WI = { wrap: Wz }, WP = Object.prototype, WN = WP.hasOwnProperty, WW = Object.defineProperty || function (dK, dC, dE) {
                            ;
                            dK[dC] = dE.value;
                        }, WD = 'function' == typeof Symbol ? Symbol : {}, WQ = WD.iterator || '@@iterator', Wk = WD.asyncIterator || '@@asyncIterator', WX = WD.toStringTag || '@@toStringTag';
                    function WG(dK, dC, dE) {
                        ;
                        return Object.defineProperty(dK, dC, {
                            'value': dE,
                            'enumerable': true,
                            'configurable': true,
                            'writable': true
                        }), dK[dC];
                    }
                    try {
                        WG({}, '');
                    } catch (dK) {
                        WG = function (dC, dE, dH) {
                            return dC[dE] = dH;
                        };
                    }
                    function Wz(dC, dE, dH, dZ) {
                        var dV = dE && dE.prototype instanceof WU ? dE : WU, dT = Object.create(dV.prototype), dj = new dY(dZ || []);
                        return WW(dT, '_invoke', { 'value': d7(dC, dH, dj) }), dT;
                    }
                    function WF(dC, dE, dH) {
                        ;
                        try {
                            return {
                                'type': 'normal',
                                'arg': dC.call(dE, dH)
                            };
                        } catch (dZ) {
                            return {
                                'type': 'throw',
                                'arg': dZ
                            };
                        }
                    }
                    ;
                    var Wq = {};
                    function WU() {
                    }
                    function WB() {
                    }
                    function d0() {
                    }
                    var d1 = {};
                    WG(d1, WQ, function () {
                        return this;
                    });
                    var d2 = Object.getPrototypeOf, d3 = d2 && d2(d2(dM([])));
                    d3 && d3 !== WP && WN.call(d3, WQ) && (d1 = d3);
                    var d4 = d0.prototype = WU.prototype = Object.create(d1);
                    function d5(dC) {
                        ;
                        [
                            'next',
                            'throw',
                            'return'
                        ].forEach(function (dE) {
                            WG(dC, dE, function (dH) {
                                ;
                                return this['_invoke'](dE, dH);
                            });
                        });
                    }
                    function d6(dC, dE) {
                        ;
                        function dH(dV, dT, dj, dJ) {
                            var dR = WF(dC[dV], dC, dT);
                            if ('throw' !== dR.type) {
                                var dL = dR.arg, dA = dL.value;
                                return dA && 'object' == yK(dA) && WN.call(dA, '__await') ? dE.resolve(dA['__await']).then(function (dI) {
                                    ;
                                    dH('next', dI, dj, dJ);
                                }, function (dI) {
                                    ;
                                    dH('throw', dI, dj, dJ);
                                }) : dE.resolve(dA).then(function (dI) {
                                    dL.value = dI;
                                    dj(dL);
                                }, function (dI) {
                                    return dH('throw', dI, dj, dJ);
                                });
                            }
                            dJ(dR.arg);
                        }
                        var dZ;
                        WW(this, '_invoke', {
                            'value': function (dV, dT) {
                                ;
                                function dj() {
                                    return new dE(function (dJ, dR) {
                                        dH(dV, dT, dJ, dR);
                                    });
                                }
                                return dZ = dZ ? dZ.then(dj, dj) : dj();
                            }
                        });
                    }
                    function d7(dC, dE, dH) {
                        var dZ = 'suspendedStart';
                        return function (dV, dT) {
                            ;
                            if ('executing' === dZ) {
                                throw new Error('Generator is already running');
                            }
                            if ('completed' === dZ) {
                                if ('throw' === dV) {
                                    throw dT;
                                }
                                return dS();
                            }
                            for (dH.method = dV, dH.arg = dT;;) {
                                var dj = dH.delegate;
                                if (dj) {
                                    var dJ = d8(dj, dH);
                                    if (dJ) {
                                        if (dJ === Wq) {
                                            continue;
                                        }
                                        return dJ;
                                    }
                                }
                                if ('next' === dH.method) {
                                    dH.sent = dH['_sent'] = dH.arg;
                                } else {
                                    if ('throw' === dH.method) {
                                        if ('suspendedStart' === dZ) {
                                            throw dZ = 'completed', dH.arg;
                                        }
                                        dH.dispatchException(dH.arg);
                                    } else {
                                        'return' === dH.method && dH.abrupt('return', dH.arg);
                                    }
                                }
                                dZ = 'executing';
                                var dR = WF(dC, dE, dH);
                                if ('normal' === dR.type) {
                                    if (dZ = dH.done ? 'completed' : 'suspendedYield', dR.arg === Wq) {
                                        continue;
                                    }
                                    return {
                                        'value': dR.arg,
                                        'done': dH.done
                                    };
                                }
                                if ('throw' === dR.type) {
                                    dZ = 'completed';
                                    dH.method = 'throw';
                                    dH.arg = dR.arg;
                                }
                            }
                        };
                    }
                    function d8(dC, dE) {
                        var dH = dE.method, dZ = dC.iterator[dH];
                        if (void 0 === dZ) {
                            return dE.delegate = null, 'throw' === dH && dC.iterator.return && (dE.method = 'return', dE.arg = void 0, d8(dC, dE), 'throw' === dE.method) || 'return' !== dH && (dE.method = 'throw', dE.arg = new TypeError('The iterator does not provide a \'' + dH + '\' method')), Wq;
                        }
                        var dV = WF(dZ, dC.iterator, dE.arg);
                        if ('throw' === dV.type) {
                            return dE.method = 'throw', dE.arg = dV.arg, dE.delegate = null, Wq;
                        }
                        var dT = dV.arg;
                        return dT ? dT.done ? (dE[dC.resultName] = dT.value, dE.next = dC.nextLoc, 'return' !== dE.method && (dE.method = 'next', dE.arg = void 0), dE.delegate = null, Wq) : dT : (dE.method = 'throw', dE.arg = new TypeError('iterator result is not an object'), dE.delegate = null, Wq);
                    }
                    function d9(dC) {
                        var dE = { 'tryLoc': dC[0] };
                        1 in dC && (dE.catchLoc = dC[1]);
                        if (2 in dC) {
                            dE.finallyLoc = dC[2];
                            dE.afterLoc = dC[3];
                        }
                        this.tryEntries.push(dE);
                    }
                    function dO(dC) {
                        var dE = dC.completion || {};
                        dE.type = 'normal';
                        delete dE.arg;
                        dC.completion = dE;
                    }
                    function dY(dC) {
                        ;
                        this.tryEntries = [{ 'tryLoc': 'root' }];
                        dC.forEach(d9, this);
                        this.reset(true);
                    }
                    function dM(dC) {
                        ;
                        if (dC) {
                            var dE = dC[WQ];
                            if (dE) {
                                return dE.call(dC);
                            }
                            if ('function' == typeof dC.next) {
                                return dC;
                            }
                            if (!isNaN(dC.length)) {
                                var dH = -1, dZ = function dV() {
                                        ;
                                        for (; ++dH < dC.length;) {
                                            if (WN.call(dC, dH)) {
                                                return dV.value = dC[dH], dV.done = false, dV;
                                            }
                                        }
                                        return dV.value = void 0, dV.done = true, dV;
                                    };
                                return dZ.next = dZ;
                            }
                        }
                        return { 'next': dS };
                    }
                    function dS() {
                        return {
                            'value': void 0,
                            'done': true
                        };
                    }
                    return WB.prototype = d0, WW(d4, 'constructor', {
                        'value': d0,
                        'configurable': true
                    }), WW(d0, 'constructor', {
                        'value': WB,
                        'configurable': true
                    }), WB.displayName = WG(d0, WX, 'GeneratorFunction'), WI.isGeneratorFunction = function (dC) {
                        var dE = 'function' == typeof dC && dC.constructor;
                        return !!dE && (dE === WB || 'GeneratorFunction' === (dE.displayName || dE.name));
                    }, WI.mark = function (dC) {
                        ;
                        return Object.setPrototypeOf ? Object.setPrototypeOf(dC, d0) : (dC['__proto__'] = d0, WG(dC, WX, 'GeneratorFunction')), dC.prototype = Object.create(d4), dC;
                    }, WI.awrap = function (dC) {
                        return { '__await': dC };
                    }, d5(d6.prototype), WG(d6.prototype, Wk, function () {
                        return this;
                    }), WI.AsyncIterator = d6, WI.async = function (dC, dE, dH, dZ, dV) {
                        ;
                        void 0 === dV && (dV = Promise);
                        var dT = new d6(Wz(dC, dE, dH, dZ), dV);
                        return WI.isGeneratorFunction(dE) ? dT : dT.next().then(function (dj) {
                            ;
                            return dj.done ? dj.value : dT.next();
                        });
                    }, d5(d4), WG(d4, WX, 'Generator'), WG(d4, WQ, function () {
                        return this;
                    }), WG(d4, 'toString', function () {
                        ;
                        return '[object Generator]';
                    }), WI.keys = function (dC) {
                        var dE = Object(dC), dH = [];
                        for (var dZ in dE)
                            dH.push(dZ);
                        return dH.reverse(), function dV() {
                            ;
                            for (; dH.length;) {
                                var dT = dH.pop();
                                if (dT in dE) {
                                    return dV.value = dT, dV.done = false, dV;
                                }
                            }
                            return dV.done = true, dV;
                        };
                    }, WI.values = dM, dY.prototype = {
                        'constructor': dY,
                        'reset': function (dC) {
                            ;
                            if (this.prev = 0, this.next = 0, this.sent = this['_sent'] = void 0, this.done = false, this.delegate = null, this.method = 'next', this.arg = void 0, this.tryEntries.forEach(dO), !dC) {
                                for (var dE in this)
                                    't' === dE.charAt(0) && WN.call(this, dE) && !isNaN(+dE.slice(1)) && (this[dE] = void 0);
                            }
                        },
                        'stop': function () {
                            ;
                            this.done = true;
                            var dC = this.tryEntries[0].completion;
                            if ('throw' === dC.type) {
                                throw dC.arg;
                            }
                            return this.rval;
                        },
                        'dispatchException': function (dC) {
                            ;
                            if (this.done) {
                                throw dC;
                            }
                            var dE = this;
                            function dH(dR, dL) {
                                ;
                                return dT.type = 'throw', dT.arg = dC, dE.next = dR, dL && (dE.method = 'next', dE.arg = void 0), !!dL;
                            }
                            for (var dZ = this.tryEntries.length - 1; dZ >= 0; --dZ) {
                                var dV = this.tryEntries[dZ], dT = dV.completion;
                                if ('root' === dV.tryLoc) {
                                    return dH('end');
                                }
                                if (dV.tryLoc <= this.prev) {
                                    var dj = WN.call(dV, 'catchLoc'), dJ = WN.call(dV, 'finallyLoc');
                                    if (dj && dJ) {
                                        if (this.prev < dV.catchLoc) {
                                            return dH(dV.catchLoc, true);
                                        }
                                        if (this.prev < dV.finallyLoc) {
                                            return dH(dV.finallyLoc);
                                        }
                                    } else {
                                        if (dj) {
                                            if (this.prev < dV.catchLoc) {
                                                return dH(dV.catchLoc, true);
                                            }
                                        } else {
                                            if (!dJ) {
                                                throw new Error('try statement without catch or finally');
                                            }
                                            if (this.prev < dV.finallyLoc) {
                                                return dH(dV.finallyLoc);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        'abrupt': function (dC, dE) {
                            ;
                            for (var dH = this.tryEntries.length - 1; dH >= 0; --dH) {
                                var dZ = this.tryEntries[dH];
                                if (dZ.tryLoc <= this.prev && WN.call(dZ, 'finallyLoc') && this.prev < dZ.finallyLoc) {
                                    var dV = dZ;
                                    break;
                                }
                            }
                            dV && ('break' === dC || 'continue' === dC) && dV.tryLoc <= dE && dE <= dV.finallyLoc && (dV = null);
                            var dT = dV ? dV.completion : {};
                            return dT.type = dC, dT.arg = dE, dV ? (this.method = 'next', this.next = dV.finallyLoc, Wq) : this.complete(dT);
                        },
                        'complete': function (dC, dE) {
                            ;
                            if ('throw' === dC.type) {
                                throw dC.arg;
                            }
                            return 'break' === dC.type || 'continue' === dC.type ? this.next = dC.arg : 'return' === dC.type ? (this.rval = this.arg = dC.arg, this.method = 'return', this.next = 'end') : 'normal' === dC.type && dE && (this.next = dE), Wq;
                        },
                        'finish': function (dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.finallyLoc === dC) {
                                    return this.complete(dH.completion, dH.afterLoc), dO(dH), Wq;
                                }
                            }
                        },
                        'catch': function (dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.tryLoc === dC) {
                                    var dZ = dH.completion;
                                    if ('throw' === dZ.type) {
                                        var dV = dZ.arg;
                                        dO(dH);
                                    }
                                    return dV;
                                }
                            }
                            throw new Error('illegal catch attempt');
                        },
                        'delegateYield': function (dC, dE, dH) {
                            ;
                            return this.delegate = {
                                'iterator': dM(dC),
                                'resultName': dE,
                                'nextLoc': dH
                            }, 'next' === this.method && (this.arg = void 0), Wq;
                        }
                    }, WI;
                }
                function yE(WI, WP, WN, WW, WD, WQ, Wk) {
                    ;
                    try {
                        var WX = WI[WQ](Wk), WG = WX.value;
                    } catch (Wz) {
                        return void WN(Wz);
                    }
                    WX.done ? WP(WG) : Promise.resolve(WG).then(WW, WD);
                }
                function yH(WI) {
                    return function () {
                        var WP = this, WN = arguments;
                        return new Promise(function (WW, WD) {
                            var WQ = WI.apply(WP, WN);
                            function Wk(WG) {
                                ;
                                yE(WQ, WW, WD, Wk, WX, 'next', WG);
                            }
                            function WX(WG) {
                                yE(WQ, WW, WD, Wk, WX, 'throw', WG);
                            }
                            Wk(void 0);
                        });
                    };
                }
                var yZ = new YG();
                yZ.pack();
                var yV, yT = yZ.pack, yj = yZ.unpack, yJ = '', yR = false, yL = '';
                function yI(WI) {
                    ;
                    yJ = WI;
                    V0.textContent = 'Server Name: '.concat(function (WP) {
                        var WN = WP.indexOf('://');
                        -1 != WN && (WP = WP.substring(WN + 3));
                        var WW = WP.indexOf('/');
                        return -1 != WW && (WP = WP.substring(0, WW)), WP;
                    }(yJ));
                    yA = yM(yJ, {
                        'sendSessionID': true,
                        'getToken': false,
                        'query': {},
                        'key': yX,
                        'type': 'G',
                        'onConnect': function (WP) {
                            NS(WP);
                        },
                        'onMessage': function (WP, WN) {
                            ;
                            switch (WP) {
                            case 90:
                                Wq = WN[0], WU = WN[1], gO[Wq].progress = WU, gV(Wq);
                                break;
                            case 82:
                                AK(WN);
                                break;
                            case 88:
                                var WW = c8.i[WN];
                                gT(WN), L3(WW.name, WW.description, WW.rarity, WW.stars);
                                break;
                            case 4:
                                yq(WN);
                                break;
                            case 68:
                                LN(WN);
                                break;
                            case 72:
                                !function (WB, d0) {
                                    setTimeout(function () {
                                        hq[WB].gates = d0;
                                    }, E9.renderDelay);
                                }(WN[0], WN[1]);
                                break;
                            case 8:
                                Wz = WN[0], WF = WN[1], console.log('RECEIVED ANNOUNCEMENT: '.concat(Wz, ', ').concat(WF)), VO = Wz, VY = WF, VM = 20, VS = null, VK = null;
                                break;
                            case 78:
                                !function (WB) {
                                    ;
                                    console.log('Sending to server: '.concat(yJ));
                                    yQ(yJ);
                                    yJ = WB[1];
                                    var d0 = WB[2];
                                    T2(d0.loadingBackground);
                                    yL = d0.loadingText;
                                    yR = false;
                                    var d1 = lF.findIndex(function (d2) {
                                        ;
                                        return d2.address === yJ;
                                    });
                                    if (-1 != d1) {
                                        P6(d1);
                                        NA();
                                    }
                                    console.log('Sending to server: '.concat(yJ)), yQ(yJ);
                                }(WN);
                                break;
                            case 34:
                                !function (WB) {
                                    ;
                                    AO = WB;
                                    for (var d0 = 0; d0 < 4; d0++) {
                                        for (var d1 = (d0 % 2 == 0 ? AO.celestial : AO.normal)[d0 > 1 ? 'weapon' : 'body'], d2 = 0, d3 = Object.entries(d1); d2 < d3.length; d2++) {
                                            var d4 = A6(d3[d2], 2), d5 = d4[0];
                                            d4[1];
                                            ;
                                        }
                                    }
                                }(WN);
                                break;
                            case 74:
                                EP = WG = WN, WG ? EQ.classList.remove('hidden') : (EQ.classList.add('hidden'), EN && r2());
                                break;
                            case 12:
                                AB(WN);
                                break;
                            case 32:
                                yF(WN);
                                break;
                            case 84:
                                yA.kickReason = WN;
                                break;
                            case 6:
                                (WX = CY([[
                                        'You',
                                        6
                                    ]].concat((Wk = WN).helpers.map(function (WB) {
                                    ;
                                    return E9.showNames ? '' != WB.name ? [
                                        WB.name,
                                        WB.nameColor,
                                        false
                                    ] : [
                                        'an unnamed '.concat(WB.className),
                                        WB.nameColor,
                                        false
                                    ] : [
                                        'a'.concat(W0(WB.className) ? 'n' : '', ' ').concat(WB.className),
                                        WB.nameColor,
                                        false
                                    ];
                                })))).push([
                                    ' killed ',
                                    6
                                ]), WX.push(E9.showNames ? '' != Wk.name ? [
                                    Wk.name,
                                    Wk.nameColor,
                                    false
                                ] : [
                                    'an unnamed '.concat(Wk.className),
                                    Wk.nameColor,
                                    false
                                ] : [
                                    'a'.concat(W0(Wk.className) ? 'n' : '', ' ').concat(Wk.className),
                                    Wk.nameColor,
                                    false
                                ]), WX.push([
                                    '.',
                                    6
                                ]), AB(WX);
                                break;
                            case 70:
                                !function (WB) {
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    ;
                                    rz();
                                }(WN);
                                break;
                            case 66:
                                W6(WN);
                                break;
                            case 0:
                                IA(WN);
                                break;
                            case 16:
                                !function (WB) {
                                    I9();
                                    IO(WB, I6);
                                }(WN);
                                break;
                            case 80:
                                IE(WN[0], WN[1]);
                                break;
                            case 14:
                                !function (WB) {
                                    I9();
                                    IO(WB, I7);
                                }(WN);
                                break;
                            case 2:
                                J5(1.2), I3++;
                                break;
                            case 64:
                                WQ = WN, navigator.clipboard.writeText(WQ);
                                break;
                            case 10:
                                !function (WB, d0) {
                                    ;
                                    console.log('RECEIVED TIMER: '.concat(WB, ' ').concat(d0, ' seconds'));
                                    VE = d0;
                                    VH = d0;
                                    VZ = WB;
                                }(WN[0], WN[1]);
                                break;
                            case 18:
                                WD = yA.getOpenTime() - WN, WD = AE(VP, WD), VP = VI, VI = WD;
                                break;
                            case 86:
                                eS(WN);
                            }
                            var WD, WQ, Wk, WX, WG, Wz, WF, Wq, WU;
                        },
                        'onDisconnect': function (WP) {
                            ;
                            1008 == WP.code && IE(yA.kickReason[1] || 'Disconnected', yA.kickReason[0] || 'An unexpected error occurred');
                            NC(yL);
                            yR || 1008 == WP.code || setTimeout(function () {
                                yI(yJ);
                            }, 0);
                            yR = false;
                            yL = '';
                        },
                        'onError': function (WP) {
                            var WN = WP.message;
                            WN && WN.startsWith('Banned.') || (WN = 'An unexpected error occurred while connecting to '.concat(yJ).concat(WN ? ': '.concat(WN) : '.'));
                            NK(WN);
                        }
                    });
                }
                function yP() {
                    ;
                    return yN.apply(this, arguments);
                }
                function yN() {
                    ;
                    return yN = yH(yC().mark(function WI() {
                        var WP, WN, WW, WD = arguments;
                        return yC().wrap(function (WQ) {
                            ;
                            for (;;) {
                                switch (WQ.prev = WQ.next) {
                                case 0:
                                    if (WP = !(WD.length > 0 && void 0 !== WD[0]) || WD[0], WN = performance.now(), !(null == yV || WN - yV > 1000)) {
                                        ;
                                        break;
                                    }
                                    return yV = WN, WQ.next = 6, y5(P5 + '/api/serverlist', {});
                                case 6:
                                    (WW = WQ.sent).error && NK('Could not retrieve server list'), NE(WW, WP);
                                case 9:
                                case 'end':
                                    return WQ.stop();
                                }
                            }
                        }, WI);
                    })), yN.apply(this, arguments);
                }
                function yW() {
                    var WI = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    yA.closed || (yR = !WI, yA.close());
                }
                function yD() {
                    ;
                    yA.closed || yA.forceClose();
                    setTimeout(function () {
                        yI(yJ);
                    }, 0);
                }
                function yQ(WI) {
                    true || (yA.forceClose(), NC(yL, false));
                    yI(WI);
                }
                var yX = '', yG = false;
                function yz() {
                    yX = '';
                    yG = false;
                }
                var yF = function (WI) {
                        !function (WP, WN) {
                            ;
                            WN.visual.particles.forEach(function (WW) {
                                ;
                                WW.spawnrate /= 5760000;
                            });
                            ;
                        }(WI[0], WI[1]);
                    }, yq = function (WI) {
                        var WP;
                        !function (WN) {
                            for (var WW = 0; WW < WN.length; WW++) {
                                I1[WW] = WN[WW];
                                I2[WW] = WN[WW];
                            }
                        }(WI[0]);
                        WP = WI[1];
                        I3 = WP;
                    }, yU = function (WI) {
                        ;
                        yA.sendMessage(10, WI);
                    }, yB = function (WI) {
                        ;
                        yA.sendMessage(40, WI);
                        (function () {
                            for (var WP = 0; WP < 8; WP++) {
                                I1[WP] = 0;
                                I2[WP] = 0;
                            }
                            I3 = 0;
                            IY();
                            IM();
                        }());
                    }, l0 = 0, l1 = (0, c7.throttle)(60, function (WI) {
                        var WP = Math.round(1000 * WI) / 1000;
                        l0 != WP && yA.sendMessage(0, WP);
                        l0 = WP;
                    }), l2 = (0, c7.throttle)(20, function (WI) {
                        yA.sendMessage(8, WI);
                    }), l3 = function (WI) {
                        yA.sendMessage(4, WI);
                    }, l4 = (0, c7.debounce)(60, function () {
                        ;
                        yA.sendMessage(38, ED);
                    }), l5 = (0, c7.debounce)(60, function () {
                        ;
                        yA.sendMessage(36, EW);
                    }), l6 = (0, c7.debounce)(20, function (WI) {
                        ;
                        yA.sendMessage(6, WI);
                    }), l7 = function (WI, WP) {
                        ;
                        yA.sendMessage(2, [
                            WI,
                            WP
                        ]);
                    }, l8 = (0, c7.debounce)(20, function (WI) {
                        ;
                        yA.sendMessage(16, WI);
                    }), l9 = (0, c7.throttle)(60, function (WI, WP) {
                        ;
                        yA.sendMessage(20, [
                            WI,
                            WP
                        ]);
                    }), lO = (0, c7.throttle)(60, function (WI) {
                        ;
                        yA.sendMessage(22, WI);
                    }), lY = function (WI, WP) {
                        ;
                        WI ? yA.sendMessage(14, WP) : yA.sendMessage(12, WP);
                        var WN = false, WW = false;
                        if (WI) {
                            for (var WD = 0; WD < I5.length; WD++) {
                                var WQ = I5[WD];
                                if (WQ.id == WP) {
                                    for (var Wk = 0; Wk < WQ.barrels.length; Wk++) {
                                        1 == WQ.barrels[Wk].type && (WN = true);
                                    }
                                }
                            }
                        } else {
                            for (var WX = 0; WX < I4.length; WX++) {
                                var WG = I4[WX];
                                if (WG.id == WP) {
                                    for (var Wz = 0; Wz < WG.gadgets.length; Wz++) {
                                        1 == WG.gadgets[Wz].type ? WN = true : 0 == WG.gadgets[Wz].type ? WW = true : 2 == WG.gadgets[Wz].type && true;
                                    }
                                }
                            }
                        }
                        WW && setTimeout(function () {
                            ;
                            WY('tut_auto_cannons') || AY || lz || (I8(true), WO('tut_auto_cannons', true), setTimeout(function () {
                                ;
                                AU('You can disable your auto cannons by pressing V.');
                            }, 1000), I8(false));
                        }, 10000);
                        WW && setTimeout(function () {
                            ;
                            WY('tut_auras') || AY || lz || (I8(true), WO('tut_auras', true), setTimeout(function () {
                                ;
                                AU('You can disable your auras by pressing V.');
                            }, 1000), I8(false));
                        }, 10000);
                        WN && (WY('tut_drones') || AY || lz || (I8(true), WO('tut_drones', true), setTimeout(function () {
                            ;
                            AU('Hold down left click to control your drones.');
                        }, 1000), setTimeout(function () {
                            AU('You can also control them by turning on auto fire. (Press E)');
                        }, 4000), setTimeout(function () {
                            ;
                            AU('Repel your drones by holding down right click.');
                        }, 9000), setTimeout(function () {
                            AU('Upgrading your bullet penetration stat upgrades your max drone cap.');
                        }, 13000), I8(false)));
                    }, lM = [];
                function lS() {
                    return new Promise(function (WI) {
                        ;
                        fetch('/changelog.txt').then(function (WP) {
                            ;
                            return WP.text();
                        }).then(function (WP) {
                            ;
                            !function (WN) {
                                ;
                                for (var WW = '', WD = ('CHANGELOG - ' + (lM = WN.split('\n\r\n'))[0]).split('\n'), WQ = 0; WQ < WD.length; WQ++) {
                                    WD[WQ].startsWith('    ') || (WW += '' == WW ? WD[WQ] : '<br />' + WD[WQ]);
                                }
                                var Wk = document.getElementById('changelog');
                                Wk.children[0].innerHTML = WW.replace(/\n/g, '<br />');
                                Wk.classList.remove('hide');
                                var WX = document.getElementById('subtitle');
                                ;
                                WX.classList.remove('hide');
                                WW = '';
                                for (var WG = 0; WG < lM.length; WG++) {
                                    '' != WW && (WW += '<br /><br /><hr />');
                                    for (var Wz = lM[WG].split('\n'), WF = 0; WF < Wz.length; WF++) {
                                        var Wq = 0, WU = '';
                                        for (Wq = 0; Wz[WF].startsWith('    ', 4 * Wq); Wq++) {
                                            WU += '&emsp;&emsp;';
                                        }
                                        0 == WF ? WW += '<h3>' : '' != WW && 1 != WF && (WW += '<br />');
                                        WW += WU + Wz[WF];
                                        0 == WF && (WW += '</h3>');
                                    }
                                }
                                document.getElementById('full-changelog').children[0].children[2].innerHTML = WW.replace(/\n/g, '<br />');
                            }(WP.replace(/\r?\n/g, '\r\n'));
                            WI();
                        });
                    });
                }
                var lK = [
                    {
                        'id': 'scenexe-io_970x250',
                        'minWidth': 1404,
                        'minHeight': 1040,
                        'deathScreen': false
                    },
                    {
                        'id': 'scenexe-io_300x600',
                        'minWidth': 1877.2,
                        'minHeight': 910,
                        'deathScreen': true
                    }
                ];
                function lC() {
                    ;
                    window.usingAdBlocker = false;
                    fetch('https://api.adinplay.com').catch(function (WI) {
                        window.usingAdBlocker = true;
                    }).finally(function () {
                        ;
                        window.usingAdBlocker && (console.log('Ad blocker detected.'), WY('ad_blocker') || AY || (IE('Please disable your ad blocker', 'Ads support the game and allow it to keep updating and expanding.'), WO('ad_blocker', true)));
                    });
                }
                function lE() {
                    ;
                    try {
                        lK.forEach(function (WI) {
                            ;
                            aiptag.cmd.display.push(function () {
                                ;
                                aipDisplayTag.display(WI.id);
                            });
                        });
                    } catch (WI) {
                        console.log('Error when refreshing ads:', WI);
                    }
                }
                function lH() {
                    ;
                    try {
                        lK.forEach(function (WI) {
                            var WP = document.getElementById(WI.id);
                            WP.classList.remove('hide');
                            var WN = Math.min(window.innerWidth / WI.minWidth, 1), WW = Math.min(window.innerHeight / WI.minHeight, 1), WD = Math.min(WN, WW), WQ = WP.classList.contains('ad-bottom');
                            WP.style.transform = 'translate'.concat(WQ ? 'X' : 'Y', '(-50%) scale(').concat(WD, ')');
                            WI.deathScreen || 1 != N6 || WP.classList.add('hide');
                            WP.style.transform = 'translate'.concat(WQ ? 'X' : 'Y', '(-50%) scale(').concat(WD, ')'), WI.deathScreen || 1 != N6 || WP.classList.add('hide');
                        });
                    } catch (WI) {
                        console.log('Error when updating ads:', WI);
                    }
                }
                window.addEventListener('resize', (0, c7.debounce)(40, function () {
                    lH();
                }));
                var lZ = document.getElementById('captcha'), lV = null, lT = null;
                function lj(WI) {
                    ;
                    lT = WI;
                    null == lV ? lV = hcaptcha.render(lZ, {
                        'sitekey': '2e209116-4e8b-4a05-956c-a6b79e1d3103',
                        'callback': lJ
                    }) : hcaptcha.reset(lV);
                }
                function lJ() {
                    ;
                    lT && lT(hcaptcha.getResponse(lV));
                }
                function lR() {
                    var WI = 40 * (Math.min(window.innerWidth, window.innerHeight) / 100);
                    lZ.style.transform = 'scale('.concat(WI / 303, ') translateY(-55%)');
                }
                function lL(WI) {
                    ;
                    return lL = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (WP) {
                        return typeof WP;
                    } : function (WP) {
                        ;
                        return WP && 'function' == typeof Symbol && WP.constructor === Symbol && WP !== Symbol.prototype ? 'symbol' : typeof WP;
                    }, lL(WI);
                }
                function lA() {
                    ;
                    lA = function () {
                        return WI;
                    };
                    var WI = { wrap: Wz }, WP = Object.prototype, WN = WP.hasOwnProperty, WW = Object.defineProperty || function (dK, dC, dE) {
                            ;
                            dK[dC] = dE.value;
                        }, WD = 'function' == typeof Symbol ? Symbol : {}, WQ = WD.iterator || '@@iterator', Wk = WD.asyncIterator || '@@asyncIterator', WX = WD.toStringTag || '@@toStringTag';
                    function WG(dK, dC, dE) {
                        ;
                        return Object.defineProperty(dK, dC, {
                            'value': dE,
                            'enumerable': true,
                            'configurable': true,
                            'writable': true
                        }), dK[dC];
                    }
                    try {
                        WG({}, '');
                    } catch (dK) {
                        WG = function (dC, dE, dH) {
                            return dC[dE] = dH;
                        };
                    }
                    function Wz(dC, dE, dH, dZ) {
                        var dV = dE && dE.prototype instanceof WU ? dE : WU, dT = Object.create(dV.prototype), dj = new dY(dZ || []);
                        return WW(dT, '_invoke', { 'value': d7(dC, dH, dj) }), dT;
                    }
                    function WF(dC, dE, dH) {
                        ;
                        try {
                            return {
                                'type': 'normal',
                                'arg': dC.call(dE, dH)
                            };
                        } catch (dZ) {
                            return {
                                'type': 'throw',
                                'arg': dZ
                            };
                        }
                    }
                    ;
                    var Wq = {};
                    function WU() {
                    }
                    function WB() {
                    }
                    function d0() {
                    }
                    var d1 = {};
                    WG(d1, WQ, function () {
                        return this;
                    });
                    var d2 = Object.getPrototypeOf, d3 = d2 && d2(d2(dM([])));
                    d3 && d3 !== WP && WN.call(d3, WQ) && (d1 = d3);
                    var d4 = d0.prototype = WU.prototype = Object.create(d1);
                    function d5(dC) {
                        ;
                        [
                            'next',
                            'throw',
                            'return'
                        ].forEach(function (dE) {
                            WG(dC, dE, function (dH) {
                                ;
                                return this['_invoke'](dE, dH);
                            });
                        });
                    }
                    function d6(dC, dE) {
                        ;
                        function dH(dV, dT, dj, dJ) {
                            var dR = WF(dC[dV], dC, dT);
                            if ('throw' !== dR.type) {
                                var dL = dR.arg, dA = dL.value;
                                return dA && 'object' == lL(dA) && WN.call(dA, '__await') ? dE.resolve(dA['__await']).then(function (dI) {
                                    ;
                                    dH('next', dI, dj, dJ);
                                }, function (dI) {
                                    dH('throw', dI, dj, dJ);
                                }) : dE.resolve(dA).then(function (dI) {
                                    ;
                                    dL.value = dI;
                                    dj(dL);
                                }, function (dI) {
                                    ;
                                    return dH('throw', dI, dj, dJ);
                                });
                            }
                            dJ(dR.arg);
                        }
                        var dZ;
                        WW(this, '_invoke', {
                            'value': function (dV, dT) {
                                ;
                                function dj() {
                                    return new dE(function (dJ, dR) {
                                        dH(dV, dT, dJ, dR);
                                    });
                                }
                                return dZ = dZ ? dZ.then(dj, dj) : dj();
                            }
                        });
                    }
                    function d7(dC, dE, dH) {
                        var dZ = 'suspendedStart';
                        return function (dV, dT) {
                            ;
                            if ('executing' === dZ) {
                                throw new Error('Generator is already running');
                            }
                            if ('completed' === dZ) {
                                if ('throw' === dV) {
                                    throw dT;
                                }
                                return dS();
                            }
                            for (dH.method = dV, dH.arg = dT;;) {
                                var dj = dH.delegate;
                                if (dj) {
                                    var dJ = d8(dj, dH);
                                    if (dJ) {
                                        if (dJ === Wq) {
                                            continue;
                                        }
                                        return dJ;
                                    }
                                }
                                if ('next' === dH.method) {
                                    dH.sent = dH['_sent'] = dH.arg;
                                } else {
                                    if ('throw' === dH.method) {
                                        if ('suspendedStart' === dZ) {
                                            throw dZ = 'completed', dH.arg;
                                        }
                                        dH.dispatchException(dH.arg);
                                    } else {
                                        'return' === dH.method && dH.abrupt('return', dH.arg);
                                    }
                                }
                                dZ = 'executing';
                                var dR = WF(dC, dE, dH);
                                if ('normal' === dR.type) {
                                    if (dZ = dH.done ? 'completed' : 'suspendedYield', dR.arg === Wq) {
                                        continue;
                                    }
                                    return {
                                        'value': dR.arg,
                                        'done': dH.done
                                    };
                                }
                                if ('throw' === dR.type) {
                                    dZ = 'completed';
                                    dH.method = 'throw';
                                    dH.arg = dR.arg;
                                }
                            }
                        };
                    }
                    function d8(dC, dE) {
                        var dH = dE.method, dZ = dC.iterator[dH];
                        if (void 0 === dZ) {
                            return dE.delegate = null, 'throw' === dH && dC.iterator.return && (dE.method = 'return', dE.arg = void 0, d8(dC, dE), 'throw' === dE.method) || 'return' !== dH && (dE.method = 'throw', dE.arg = new TypeError('The iterator does not provide a \'' + dH + '\' method')), Wq;
                        }
                        var dV = WF(dZ, dC.iterator, dE.arg);
                        if ('throw' === dV.type) {
                            return dE.method = 'throw', dE.arg = dV.arg, dE.delegate = null, Wq;
                        }
                        var dT = dV.arg;
                        return dT ? dT.done ? (dE[dC.resultName] = dT.value, dE.next = dC.nextLoc, 'return' !== dE.method && (dE.method = 'next', dE.arg = void 0), dE.delegate = null, Wq) : dT : (dE.method = 'throw', dE.arg = new TypeError('iterator result is not an object'), dE.delegate = null, Wq);
                    }
                    function d9(dC) {
                        var dE = { 'tryLoc': dC[0] };
                        1 in dC && (dE.catchLoc = dC[1]);
                        if (2 in dC) {
                            dE.finallyLoc = dC[2];
                            dE.afterLoc = dC[3];
                        }
                        this.tryEntries.push(dE);
                    }
                    function dO(dC) {
                        var dE = dC.completion || {};
                        dE.type = 'normal';
                        delete dE.arg;
                        dC.completion = dE;
                    }
                    function dY(dC) {
                        ;
                        this.tryEntries = [{ 'tryLoc': 'root' }];
                        dC.forEach(d9, this);
                        this.reset(true);
                    }
                    function dM(dC) {
                        ;
                        if (dC) {
                            var dE = dC[WQ];
                            if (dE) {
                                return dE.call(dC);
                            }
                            if ('function' == typeof dC.next) {
                                return dC;
                            }
                            if (!isNaN(dC.length)) {
                                var dH = -1, dZ = function dV() {
                                        ;
                                        for (; ++dH < dC.length;) {
                                            if (WN.call(dC, dH)) {
                                                return dV.value = dC[dH], dV.done = false, dV;
                                            }
                                        }
                                        return dV.value = void 0, dV.done = true, dV;
                                    };
                                return dZ.next = dZ;
                            }
                        }
                        return { 'next': dS };
                    }
                    function dS() {
                        return {
                            'value': void 0,
                            'done': true
                        };
                    }
                    return WB.prototype = d0, WW(d4, 'constructor', {
                        'value': d0,
                        'configurable': true
                    }), WW(d0, 'constructor', {
                        'value': WB,
                        'configurable': true
                    }), WB.displayName = WG(d0, WX, 'GeneratorFunction'), WI.isGeneratorFunction = function (dC) {
                        var dE = 'function' == typeof dC && dC.constructor;
                        return !!dE && (dE === WB || 'GeneratorFunction' === (dE.displayName || dE.name));
                    }, WI.mark = function (dC) {
                        ;
                        return Object.setPrototypeOf ? Object.setPrototypeOf(dC, d0) : (dC['__proto__'] = d0, WG(dC, WX, 'GeneratorFunction')), dC.prototype = Object.create(d4), dC;
                    }, WI.awrap = function (dC) {
                        return { '__await': dC };
                    }, d5(d6.prototype), WG(d6.prototype, Wk, function () {
                        return this;
                    }), WI.AsyncIterator = d6, WI.async = function (dC, dE, dH, dZ, dV) {
                        ;
                        void 0 === dV && (dV = Promise);
                        var dT = new d6(Wz(dC, dE, dH, dZ), dV);
                        return WI.isGeneratorFunction(dE) ? dT : dT.next().then(function (dj) {
                            ;
                            return dj.done ? dj.value : dT.next();
                        });
                    }, d5(d4), WG(d4, WX, 'Generator'), WG(d4, WQ, function () {
                        return this;
                    }), WG(d4, 'toString', function () {
                        ;
                        return '[object Generator]';
                    }), WI.keys = function (dC) {
                        var dE = Object(dC), dH = [];
                        for (var dZ in dE)
                            dH.push(dZ);
                        return dH.reverse(), function dV() {
                            ;
                            for (; dH.length;) {
                                var dT = dH.pop();
                                if (dT in dE) {
                                    return dV.value = dT, dV.done = false, dV;
                                }
                            }
                            return dV.done = true, dV;
                        };
                    }, WI.values = dM, dY.prototype = {
                        'constructor': dY,
                        'reset': function (dC) {
                            ;
                            if (this.prev = 0, this.next = 0, this.sent = this['_sent'] = void 0, this.done = false, this.delegate = null, this.method = 'next', this.arg = void 0, this.tryEntries.forEach(dO), !dC) {
                                for (var dE in this)
                                    't' === dE.charAt(0) && WN.call(this, dE) && !isNaN(+dE.slice(1)) && (this[dE] = void 0);
                            }
                        },
                        'stop': function () {
                            ;
                            this.done = true;
                            var dC = this.tryEntries[0].completion;
                            if ('throw' === dC.type) {
                                throw dC.arg;
                            }
                            return this.rval;
                        },
                        'dispatchException': function (dC) {
                            ;
                            if (this.done) {
                                throw dC;
                            }
                            var dE = this;
                            function dH(dR, dL) {
                                ;
                                return dT.type = 'throw', dT.arg = dC, dE.next = dR, dL && (dE.method = 'next', dE.arg = void 0), !!dL;
                            }
                            for (var dZ = this.tryEntries.length - 1; dZ >= 0; --dZ) {
                                var dV = this.tryEntries[dZ], dT = dV.completion;
                                if ('root' === dV.tryLoc) {
                                    return dH('end');
                                }
                                if (dV.tryLoc <= this.prev) {
                                    var dj = WN.call(dV, 'catchLoc'), dJ = WN.call(dV, 'finallyLoc');
                                    if (dj && dJ) {
                                        if (this.prev < dV.catchLoc) {
                                            return dH(dV.catchLoc, true);
                                        }
                                        if (this.prev < dV.finallyLoc) {
                                            return dH(dV.finallyLoc);
                                        }
                                    } else {
                                        if (dj) {
                                            if (this.prev < dV.catchLoc) {
                                                return dH(dV.catchLoc, true);
                                            }
                                        } else {
                                            if (!dJ) {
                                                throw new Error('try statement without catch or finally');
                                            }
                                            if (this.prev < dV.finallyLoc) {
                                                return dH(dV.finallyLoc);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        'abrupt': function (dC, dE) {
                            ;
                            for (var dH = this.tryEntries.length - 1; dH >= 0; --dH) {
                                var dZ = this.tryEntries[dH];
                                if (dZ.tryLoc <= this.prev && WN.call(dZ, 'finallyLoc') && this.prev < dZ.finallyLoc) {
                                    var dV = dZ;
                                    break;
                                }
                            }
                            dV && ('break' === dC || 'continue' === dC) && dV.tryLoc <= dE && dE <= dV.finallyLoc && (dV = null);
                            var dT = dV ? dV.completion : {};
                            return dT.type = dC, dT.arg = dE, dV ? (this.method = 'next', this.next = dV.finallyLoc, Wq) : this.complete(dT);
                        },
                        'complete': function (dC, dE) {
                            ;
                            if ('throw' === dC.type) {
                                throw dC.arg;
                            }
                            return 'break' === dC.type || 'continue' === dC.type ? this.next = dC.arg : 'return' === dC.type ? (this.rval = this.arg = dC.arg, this.method = 'return', this.next = 'end') : 'normal' === dC.type && dE && (this.next = dE), Wq;
                        },
                        'finish': function (dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.finallyLoc === dC) {
                                    return this.complete(dH.completion, dH.afterLoc), dO(dH), Wq;
                                }
                            }
                        },
                        'catch': function (dC) {
                            ;
                            for (var dE = this.tryEntries.length - 1; dE >= 0; --dE) {
                                var dH = this.tryEntries[dE];
                                if (dH.tryLoc === dC) {
                                    var dZ = dH.completion;
                                    if ('throw' === dZ.type) {
                                        var dV = dZ.arg;
                                        dO(dH);
                                    }
                                    return dV;
                                }
                            }
                            throw new Error('illegal catch attempt');
                        },
                        'delegateYield': function (dC, dE, dH) {
                            ;
                            return this.delegate = {
                                'iterator': dM(dC),
                                'resultName': dE,
                                'nextLoc': dH
                            }, 'next' === this.method && (this.arg = void 0), Wq;
                        }
                    }, WI;
                }
                function lI(WI, WP) {
                    var WN = 'undefined' != typeof Symbol && WI[Symbol.iterator] || WI['@@iterator'];
                    if (!WN) {
                        if (Array.isArray(WI) || (WN = function (WG, Wz) {
                                ;
                                if (!WG) {
                                    return;
                                }
                                if ('string' == typeof WG) {
                                    return lP(WG, Wz);
                                }
                                var WF = Object.prototype.toString.call(WG).slice(8, -1);
                                'Object' === WF && WG.constructor && (WF = WG.constructor.name);
                                if ('Map' === WF || 'Set' === WF) {
                                    return Array.from(WG);
                                }
                                if ('Arguments' === WF || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(WF)) {
                                    return lP(WG, Wz);
                                }
                            }(WI)) || WP && WI && 'number' == typeof WI.length) {
                            WN && (WI = WN);
                            var WW = 0, WD = function () {
                                };
                            return {
                                's': WD,
                                'n': function () {
                                    ;
                                    return WW >= WI.length ? { 'done': true } : {
                                        'done': false,
                                        'value': WI[WW++]
                                    };
                                },
                                'e': function (WG) {
                                    throw WG;
                                },
                                'f': WD
                            };
                        }
                        throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                    }
                    var WQ, Wk = true, WX = false;
                    return {
                        's': function () {
                            ;
                            WN = WN.call(WI);
                        },
                        'n': function () {
                            var WG = WN.next();
                            return Wk = WG.done, WG;
                        },
                        'e': function (WG) {
                            WX = true;
                            WQ = WG;
                        },
                        'f': function () {
                            ;
                            try {
                                Wk || null == WN.return || WN.return();
                            } finally {
                                if (WX) {
                                    throw WQ;
                                }
                            }
                        }
                    };
                }
                function lP(WI, WP) {
                    ;
                    (null == WP || WP > WI.length) && (WP = WI.length);
                    for (var WN = 0, WW = new Array(WP); WN < WP; WN++) {
                        WW[WN] = WI[WN];
                    }
                    return WW;
                }
                function lN(WI, WP, WN, WW, WD, WQ, Wk) {
                    ;
                    try {
                        var WX = WI[WQ](Wk), WG = WX.value;
                    } catch (Wz) {
                        return void WN(Wz);
                    }
                    WX.done ? WP(WG) : Promise.resolve(WG).then(WW, WD);
                }
                function lW(WI) {
                    return function () {
                        var WP = this, WN = arguments;
                        return new Promise(function (WW, WD) {
                            var WQ = WI.apply(WP, WN);
                            function Wk(WG) {
                                ;
                                lN(WQ, WW, WD, Wk, WX, 'next', WG);
                            }
                            function WX(WG) {
                                ;
                                lN(WQ, WW, WD, Wk, WX, 'throw', WG);
                            }
                            Wk(void 0);
                        });
                    };
                }
                window.addEventListener('resize', (0, c7.debounce)(40, function () {
                    lR();
                }));
                lR();
                var lD = document.getElementById('chat'), lQ = document.getElementById('chat-input'), lX = document.getElementById('quick-chat-button'), lG = lX.children[0], lz = false, lF = [], lq = [], lU = {}, lB = [], P0 = false, P1 = false, P2 = 0, P3 = 0, P4 = 0, P5 = window.location.origin;
                function P6(WI) {
                    P2 = WI;
                }
                var P7 = [], P8 = [], P9 = -1, PO = 0, PY = false;
                function PM(WI) {
                    PY = WI;
                }
                var PS = document.getElementById('game-over-killer'), PK = document.getElementById('game-over-stats'), PC = document.getElementById('game-over'), PE = document.getElementById('overlay-canvas'), PH = (document.getElementById('continue-button'), document.getElementById('full-changelog')), PZ = document.getElementById('button-settings'), PV = document.getElementById('form-loading'), PT = document.getElementById('form-error'), Pj = document.getElementById('button-feedback'), PJ = document.getElementById('button-bugs'), PR = document.getElementById('submit'), PL = document.getElementById('cancel'), PA = document.getElementById('popup-input'), PI = document.getElementById('popup-input-small'), PP = document.getElementById('popup'), PN = document.getElementById('popup-title'), PW = document.getElementById('popup-subtitle'), PD = document.getElementById('connecting-text'), PQ = document.getElementById('full-connecting-text'), Pk = document.getElementById('play-menu'), PX = document.getElementById('respawn-text'), PG = document.getElementById('play-menu-wrapper'), Pz = document.getElementById('main-menu'), PF = document.getElementById('play-button'), Pq = document.getElementById('background'), PU = document.getElementById('display-name-input'), PB = document.getElementById('ads'), N0 = document.getElementById('server-select-dropdown'), N1 = document.getElementById('server-select-dropdown-visual'), N2 = document.getElementById('server-select-dropdown-visual-shadow'), N3 = document.getElementById('server-select-dropdown-visual-text');
                N0.addEventListener('change', function () {
                    ;
                    P2 = N0.selectedIndex;
                    NA(true, CM(), false);
                });
                lX.onclick = function () {
                    RM || RH();
                };
                lQ.onfocus = function () {
                    NW();
                };
                var N4 = false;
                lQ.onblur = function (WI) {
                    N4 ? N4 = false : AX(false);
                };
                var N5 = false;
                lQ.onkeydown = function (WI) {
                    ;
                    WI.repeat || (N5 = true);
                    N5 ? AX(true) : WI.preventDefault();
                };
                var N6 = 2;
                function N7(WI) {
                    N6 = WI;
                }
                function N8() {
                    var WI = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    if (WI) {
                        eC();
                        (lz = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) && (N9(), WY('mobile_unsupported') || AY || (IE('Mobile support is experimental', 'Some features may not work properly on this device.'), WO('mobile_unsupported', true)));
                        var WP = WY('username');
                        WP && (PU.value = WP);
                        window.addEventListener('keydown', W7);
                        document.body.oncontextmenu = function (WN) {
                            ;
                            return WN.target != TK || 0 != N6;
                        };
                        lQ.style.display = '';
                        lX.style.display = '';
                        j9();
                        RC(JSON.parse(WY('quick_chat')) || []);
                        yP();
                    }
                    IJ();
                    Array.from(document.getElementsByClassName('hud')).forEach(function (WN) {
                        ;
                        WN.classList.add('hidden');
                    });
                    Pz.classList.remove('hidden');
                    Pq.classList.remove('hide');
                    PB.classList.remove('hidden');
                    PD.classList.remove('hide');
                    Pk.classList.add('hide');
                    lZ.classList.add('hide');
                    PF.onclick = function () {
                        NN();
                    };
                    PZ.onclick = function () {
                        EM();
                    };
                    lE();
                    lH();
                    document.getElementById('full-changelog-link').onclick = function () {
                        return NQ(), false;
                    };
                    document.getElementById('exit-changelog').onclick = function () {
                        Nk();
                    };
                    document.getElementById('apply-settings').onclick = function () {
                        EE(true);
                    };
                    document.getElementById('cancel-settings').onclick = function () {
                        EE();
                    };
                    PJ.onclick = function () {
                        NX(1);
                    };
                    Pj.onclick = function () {
                        NX(2);
                    };
                    PL.onclick = function () {
                        NX(0);
                    };
                    PR.onclick = function () {
                        NU();
                    };
                    WI && (ES(JSON.parse(WY('settings')) || {}, JSON.parse(WY('keybinds')) || {}), lS(), lC(), j0(), gH({}), gM());
                }
                function N9() {
                    ;
                    try {
                        document.documentElement.webkitRequestFullScreen ? document.documentElement.webkitRequestFullScreen() : document.documentElement.requestFullscreen();
                    } catch (WI) {
                    }
                }
                N8(true);
                var NO = false, NY = '';
                function NM(WI) {
                    ;
                    true;
                    PD.classList.add('hide');
                    Pk.classList.add('hide');
                    lZ.classList.remove('hide');
                    lj(function (WP) {
                        ;
                        WI(WP);
                        PD.classList.remove('hide');
                        lZ.classList.add('hide');
                        false;
                    });
                }
                function NS(WI) {
                    ;
                    NO = true;
                    NY = WI;
                    PD.classList.add('hide');
                    Pk.classList.remove('hide');
                    lZ.classList.add('hide');
                    PQ.classList.add('hide');
                    PG.classList.remove('hide');
                    yG || (PX.textContent = '');
                    lz || PU.focus();
                    '' == yX || yG || (NX(0), Nk(), EE(), RE(), R1(), NN());
                }
                function NK() {
                    var WI = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : '';
                    true;
                    yW(false);
                    document.getElementById('disconnect-text').textContent = WI;
                    document.getElementById('disconnect-modal').classList.remove('hide');
                    document.getElementById('reconnect-button').onclick = function () {
                        ;
                        window.location.reload();
                    };
                }
                function NC() {
                    var WI = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : '', WP = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    yP(WP);
                    NO = false;
                    hz();
                    jT();
                    IR();
                    1 != N6 && 3 != N6 && (N6 = 2);
                    lH();
                    yX && (PQ.textContent = '' == WI ? 'Connecting...' : WI, PQ.classList.remove('hide'), PG.classList.add('hide'));
                    PD.classList.remove('hide');
                    Pk.classList.add('hide');
                    PC.classList.add('hide');
                    PE.classList.add('hide');
                    3 != N6 && N8();
                    yG && (PC.classList.remove('hide'), PE.classList.remove('hide'), Pz.classList.add('hidden'), N6 = 1);
                }
                function NE(WI, WP) {
                    ;
                    if (0 == WI.length) {
                        if (2 != N6) {
                            return void console.log('No servers found, ignoring because in-game.');
                        }
                        NK('No servers found. The game may be updating.');
                        console.log('No servers found.');
                    }
                    lF = WI;
                    lq = [];
                    lU = {};
                    lB = [];
                    for (var WN = '', WW = 0, WD = 0, WQ = 0; WQ < lF.length; WQ++) {
                        var Wk = lF[WQ];
                        WW += Wk.players;
                        WD += Wk.spectators;
                        lq.includes(Wk.gamemode) || lq.push(Wk.gamemode);
                        lB.includes(Wk.region) || lB.push(Wk.region);
                        lU[Wk.gamemode] || (lU[Wk.gamemode] = []);
                        lU[Wk.gamemode].includes(Wk.region) || lU[Wk.gamemode].push(Wk.region);
                        WN += '<option style="background-color:'.concat(NI(Wk.gamemode), '" value="').concat(WQ, '">').concat(NP(Wk.gamemode), ' - ').concat(Wk.region, ' - ').concat(Wk.players, ' player').concat(1 == Wk.players ? '' : 's', '</option>');
                    }
                    N0.innerHTML = WN;
                    P0 = lq.length > 1;
                    for (var WX, WG, Wz = -1, WF = 0; WF < lF.length; WF++) {
                        lF[WF].address == NY && (Wz = WF);
                    }
                    if (-1 == Wz) {
                        var Wq = WY('gamemode'), WU = WY('region'), WB = Nj(Wq, WU);
                        if (lF[WB] && null != Wq && null != WU) {
                            var d0 = lF[WB];
                            P2 = WB;
                            P3 = lq.indexOf(d0.gamemode);
                            P4 = lU[d0.gamemode].indexOf(d0.region);
                        } else {
                            for (var d1 = 1e+200, d2 = 0, d3 = 0; d3 < lF.length; d3++) {
                                var d4 = lF[d3];
                                if (d4.players < d1) {
                                    d1 = d4.players;
                                    d2 = d3;
                                }
                            }
                            var d5 = lF[d2];
                            P2 = d2;
                            d5 && (P3 = lq.indexOf(d5.gamemode), P4 = lU[d5.gamemode].indexOf(d5.region));
                        }
                    } else {
                        P2 = Wz;
                    }
                    WX = WW;
                    WG = WD;
                    A9.players = WX;
                    A9.spectators = WG;
                    NA(!NO && WP);
                }
                function NH() {
                    ;
                    P3 == lq.length - 1 ? P3 = 0 : P3++;
                    NA(true, 1);
                }
                function NZ() {
                    ;
                    0 == P3 ? P3 = lq.length - 1 : P3--;
                    NA(true, -1);
                }
                function NV() {
                    ;
                    P4 == lU[lq[P3]].length - 1 ? P4 = 0 : P4++;
                    NA(true, 1);
                }
                function NT() {
                    0 == P4 ? P4 = lU[lq[P3]].length - 1 : P4--;
                    NA(true, -1);
                }
                function Nj(WI, WP) {
                    ;
                    for (var WN = [], WW = [], WD = 0; WD < lF.length; WD++) {
                        lF[WD].gamemode == WI && WW.push(WD);
                    }
                    if (1 == WW.length) {
                        return WW[0];
                    }
                    if (0 == WW.length) {
                        return 0;
                    }
                    WN = WW;
                    WW = [];
                    for (var WQ = 0, Wk = WN; WQ < Wk.length; WQ++) {
                        var WX = Wk[WQ];
                        lF[WX].region == WP && WW.push(WX);
                    }
                    return 1 == WW.length ? WW[0] : 0 == WW.length ? WN.sort(function (WG, Wz) {
                        ;
                        return lF[WG].players - lF[Wz].players;
                    })[0] : WW.sort(function (WG, Wz) {
                        ;
                        return lF[WG].players - lF[Wz].players;
                    })[0];
                }
                var NJ = null;
                function NR(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                    if (WI != P4) {
                        P4 = WI;
                        NA(true, WP);
                    }
                }
                function NL(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                    if (WI != P3) {
                        P3 = WI;
                        NA(true, WP);
                    }
                }
                function NA() {
                    var WI = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], WP = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, WN = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], WW = NJ;
                    NJ || (NJ = lF[P2]);
                    WN && (P2 = Nj(lq[P3], (lU[lq[P3]] || {})[P4]));
                    var WD = lF[P2];
                    if (!WD) {
                        return N3.innerText = 'Connecting...', N1.style.backgroundColor = '#c0c0c0', void (N2.style.backgroundColor = jD('#c0c0c0'));
                    }
                    N0.selectedIndex = P2;
                    N3.innerText = N0.options[P2].innerText;
                    N1.style.backgroundColor = NI(lF[P2].gamemode);
                    N2.style.backgroundColor = jD(NI(lF[P2].gamemode));
                    var WQ = NJ.gamemode != WD.gamemode, Wk = NJ.region != WD.region;
                    WW || (WQ = true, Wk = true);
                    P3 = lq.indexOf(WD.gamemode);
                    P4 = lU[WD.gamemode].indexOf(WD.region);
                    P1 = lU[WD.gamemode].length > 1;
                    WO('gamemode', WD.gamemode);
                    WO('region', WD.region);
                    WD && N6 >= 2 && WI && (WQ && T2(WD.gamemode, WP), Wk && T3(NJ.region, WP), yz(), yQ(WD.address));
                    NJ = WD;
                }
                function NI(WI) {
                    return c8.l[WI] || c8.a[0];
                }
                function NP(WI) {
                    return c8.h[WI] || '???';
                }
                function NN() {
                    ;
                    if (2 == N6) {
                        0 == PO && NO && !PY && (PU.blur(), j4(), h5 = false, h6 = false, h7 = false, h9 = false, lz && N9(), yB(PU.value), IR(), WO('username', PU.value), Pz.classList.add('hidden'), Pq.classList.add('hide'), PB.classList.add('hidden'), IJ(), window.onbeforeunload = function () {
                            ;
                            return 'Leaving now may result in lost progress.';
                        }, VA = false, jZ = true, jV = 0, EP && EQ.classList.remove('hidden'), j9(), setTimeout(function () {
                            j9();
                        }, 100), N6 = 0, setTimeout(function () {
                            ;
                            WY('tut_move') || AY || lz || (AU('Press the WASD or arrow keys to move.'), WO('tut_move', true));
                        }, 1000), yz());
                        lz && N9();
                    } else {
                        if (1 == N6) {
                            PC.classList.add('hide');
                            PE.classList.add('hide');
                            Pz.classList.remove('hidden');
                            lz || PU.focus();
                            N6 = 2;
                            lH();
                        } else {
                            if (0 == N6) {
                                if (R8) {
                                    R2.click();
                                } else {
                                    if (E9.showChat && VJ) {
                                        if (lQ === document.activeElement) {
                                            var WI = lQ.value.trim();
                                            if ('' != WI) {
                                                P7.push(lQ.value);
                                                l2(WI);
                                                WI.startsWith('/') || (N4 = true);
                                            }
                                            lQ.blur();
                                            lQ.value = '';
                                            P9 = -1;
                                        } else {
                                            NW();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                function NW() {
                    ;
                    lQ.focus();
                    hG();
                    hL();
                    hI();
                    P9 = -1;
                    N5 = false;
                    AX(true);
                }
                var ND = false;
                function NQ() {
                    ;
                    PH.classList.remove('hide');
                    PY = true;
                    W2('changelog');
                    W5('changelog');
                    ND = true;
                }
                function Nk() {
                    ;
                    PH.classList.add('hide');
                    PY = false;
                    W3();
                    W4();
                    ND = false;
                }
                function NX(WI) {
                    ;
                    if (PO = WI, 0 == WI) {
                        PP.classList.add('hide');
                        W3();
                        W4();
                    } else {
                        PP.classList.remove('hide');
                        PT.textContent = '';
                        PV.classList.add('hide');
                        PA.value = '';
                        PI.value = '';
                        var WP = 2 == WI ? 'Submit Feedback' : 'Report Bug', WN = 2 == WI ? 'Feedback:' : 'Explain the bug in detail:';
                        PN.textContent = WP;
                        PW.textContent = WN;
                        W2(2 == WI ? 'submit feedback' : 'report bug');
                        W5(2 == WI ? 'submit-feedback' : 'report-bug');
                    }
                }
                var NG, Nz, NF, Nq = false;
                function NU() {
                    ;
                    return NB.apply(this, arguments);
                }
                function NB() {
                    ;
                    return (NB = lW(lA().mark(function WI() {
                        var WP, WN, WW, WD;
                        return lA().wrap(function (WQ) {
                            ;
                            for (;;) {
                                switch (WQ.prev = WQ.next) {
                                case 0:
                                    if (!Nq) {
                                        ;
                                        break;
                                    }
                                    return WQ.abrupt('return');
                                case 2:
                                    if (0 == PO) {
                                        ;
                                        break;
                                    }
                                    if (PT.textContent = '', '' != PA.value.trim()) {
                                        ;
                                        break;
                                    }
                                    return PT.textContent = 'Enter a message.', WQ.abrupt('return');
                                case 7:
                                    return WP = 'Unknown OS', -1 != navigator.userAgent.indexOf('Win') && (WP = 'Windows'), -1 != navigator.userAgent.indexOf('Mac') && (WP = 'MacOS'), -1 != navigator.userAgent.indexOf('Linux') && (WP = 'Linux'), -1 != navigator.userAgent.indexOf('Android') && (WP = 'Android'), -1 != navigator.userAgent.indexOf('like Mac') && (WP = 'iOS'), -1 != navigator.userAgent.indexOf('CrOS') && (WP = 'ChromeOS'), WN = 'Unknown Browser', -1 != (navigator.userAgent.indexOf('Opera') || navigator.userAgent.indexOf('OPR')) ? WN = 'Opera' : -1 != navigator.userAgent.indexOf('Edg') ? WN = 'Edge' : -1 != navigator.userAgent.indexOf('Chrome') ? WN = 'Chrome' : -1 != navigator.userAgent.indexOf('Safari') ? WN = 'Safari' : -1 != navigator.userAgent.indexOf('Firefox') ? WN = 'Firefox' : -1 == navigator.userAgent.indexOf('MSIE') && 1 != !!document.documentMode || (WN = 'Internet Explorer'), WW = {
                                        'type': PO,
                                        'content': PA.value.trim(),
                                        'extraInfo': PI.value.trim(),
                                        'username': PU.value.trim(),
                                        'server': yJ,
                                        'hub': P5,
                                        'browser': WN,
                                        'os': WP,
                                        'userAgent': navigator.userAgent
                                    }, PV.classList.remove('hide'), Nq = true, WQ.next = 21, y5(P5 + '/api/feedback', { 'data': CR((0, c9.JQ)(yT(WW))) });
                                case 21:
                                    if (WD = WQ.sent, PV.classList.add('hide'), Nq = false, !WD.error) {
                                        ;
                                        break;
                                    }
                                    return PT.textContent = WD.error, WQ.abrupt('return');
                                case 27:
                                    NX(0);
                                case 28:
                                case 'end':
                                    return WQ.stop();
                                }
                            }
                        }, WI);
                    }))).apply(this, arguments);
                }
                function W0(WI) {
                    ;
                    return -1 !== 'aeiouAEIOU'.indexOf(WI[0]);
                }
                function W1(WI) {
                    ;
                    return null == WI ? void 0 : WI.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                }
                function W2(WI) {
                    ;
                    document.title = ''.concat(WI, ' - scenexe.io');
                }
                function W3() {
                    ;
                    document.title = 'scenexe.io';
                }
                function W4() {
                    ;
                    NG = void 0;
                    null != window.location.hash && -1 != window.location.href.indexOf('#') && (2 == N6 ? history.pushState({}, document.title, '.') : history.replaceState({}, document.title, '.'));
                }
                function W5(WI) {
                    var WP = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    WI = WI.replace('#', '');
                    WP || (NG = '#' + WI);
                    window.location.hash = WI;
                }
                function W6(WI) {
                    ;
                    I0(false);
                    EE();
                    RE();
                    R1();
                    (function (WX) {
                        ;
                        VL = II(WX);
                        for (var WG = 0; WG < VL.gadgets.length; WG++) {
                            var Wz = VL.gadgets[WG];
                            ;
                            2 == Wz.type && (Wz.enabled = true);
                        }
                        for (var WF = 0; WF < VL.barrels.length; WF++) {
                            VL.barrels[WF].animTime = 0;
                        }
                    }(WI.lastTank));
                    AX(false);
                    yP(!WI.server);
                    WI.stars && eS(WI.stars);
                    var WP = function (WX) {
                        for (var WG = 1, Wz = 100; WX > Wz;) {
                            WX -= Wz;
                            Wz *= 1.2;
                            WG++;
                        }
                        return WG;
                    }(WI.respawnXP);
                    PX.textContent = WP > 1 ? 'You will respawn at level '.concat(WP) : '';
                    WI.server && function (WX, WG) {
                        ;
                        T2(0);
                        yJ = WX;
                        var Wz = lF.findIndex(function (WF) {
                            return WF.address === yJ;
                        });
                        if (-1 != Wz) {
                            P6(Wz);
                            NA(false);
                        }
                        yG = true;
                        yX = WG;
                        console.log('Respawning in server: '.concat(yJ));
                        yL = 'Connecting...';
                        yW();
                    }(WI.server.address, WI.server.key);
                    var WN = CY(WI.killers.map(function (WX) {
                        ;
                        return E9.showNames ? '' != WX.name ? [
                            WX.name,
                            WX.nameColor,
                            false
                        ] : [
                            'an unnamed '.concat(WX.className),
                            WX.nameColor,
                            false
                        ] : [
                            'a'.concat(W0(WX.className) ? 'n' : '', ' ').concat(WX.className),
                            WX.nameColor,
                            false
                        ];
                    }));
                    WN.unshift([
                        'you were killed by ',
                        6
                    ]);
                    var WW, WD = '', WQ = lI((WN = AW(WN)).sections);
                    try {
                        for (WQ.s(); !(WW = WQ.n()).done;) {
                            var Wk = WW.value;
                            WD += '<span style="color: '.concat(jN(0, Wk.color, 0, 0), '">').concat(W1(Wk.text), '</span>');
                        }
                    } catch (WX) {
                        WQ.e(WX);
                    } finally {
                        WQ.f();
                    }
                    0 == N6 ? (PS.innerHTML = WD, PK.innerHTML = '\n\t\t\t\tLevel '.concat(WI.level, ' ').concat(W1(VL.className), '\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\tTime Played: ').concat(WI.timeAlive, '\n\t\t\t\t<br />\n\t\t\t\tScore: ').concat(WS(WI.score), '\n\t\t\t\t<br />\n\t\t\t\tKills: ').concat(WI.kills), N6 = 1, document.getElementById('continue-button').onclick = function () {
                        NN();
                    }, hz(), jT(), PC.classList.remove('hide'), PE.classList.remove('hide'), Pq.classList.remove('hide'), PB.classList.remove('hidden')) : N6 = 2;
                    lH();
                    lE();
                }
                function W7(WI) {
                    ;
                    WI.keyCode == ET.enter ? NN() : WI.keyCode == ET.openCommand && 0 == N6 && lQ !== document.activeElement && E9.showChat && VJ && !R8 ? (lQ.value = '', lQ.focus(), hG(), hL(), hI(), P9 = -1) : WI.keyCode == ET.escape && 0 == N6 && (R8 && (RE(), RH()), JB && R1());
                    lQ == document.activeElement && (WI.keyCode == ET.escape ? lQ.blur() : WI.keyCode == ET.previousChatMessage ? (P9 < 0 ? ((P8 = [].concat(P7)).push(lQ.value), 0 != (P9 = P8.length - 1) && P9--) : 0 == P9 || P9--, P9 < 0 || (lQ.value = P8[P9])) : WI.keyCode == ET.nextChatMessage && -1 != P9 && P9 < P8.length - 1 && (P9++, lQ.value = P8[P9]));
                }
                function W8(WI) {
                    ;
                    Nz || (Nz = document.getElementById('server-select'));
                    NF || (NF = document.getElementById('server-select-dropdown-wrapper'));
                    WI ? (NF.classList.remove('hidden'), Nz.classList.add('high')) : (NF.classList.add('hidden'), Nz.classList.remove('high'));
                }
                function W9(WI) {
                    var WP = lz && E9.showQuickChatButton;
                    if (lX.classList.toggle('hidden', !WP), lD && lQ && (lD.style.right = 10 / WI + 'px', lD.style.top = 250 / WI + 'px', lQ.style.borderRadius = 5 / WI + 'px', lQ.style.padding = 3 / WI + 'px', lQ.style.fontSize = 18 / WI + 'px', lQ.style.width = (220 - (WP ? 43 : 0)) / WI + 'px', lQ.style.height = 33 / WI + 'px', WP)) {
                        var WN = 3 / WI;
                        lX.style.width = 33 / WI + 'px';
                        lX.style.height = 33 / WI + 'px';
                        lX.style.borderRadius = 5 / WI + 'px';
                        lX.style.marginLeft = 10 / WI + 'px';
                        lX.style.padding = WN + 'px';
                        lG.style.width = 33 / WI - 2 * WN + 'px';
                        lG.style.height = 33 / WI - 2 * WN + 'px';
                    }
                }
                function WO(WI, WP) {
                    localStorage.setItem(WI, WP);
                }
                function WY(WI) {
                    var WP, WN = localStorage.getItem(WI);
                    if (null == WN) {
                        var WW = function (WD) {
                            ;
                            for (var WQ = WD + '=', Wk = document.cookie.split(';'), WX = 0; WX < Wk.length; WX++) {
                                for (var WG = Wk[WX]; ' ' == WG.charAt(0);) {
                                    WG = WG.substring(1, WG.length);
                                }
                                if (0 == WG.indexOf(WQ)) {
                                    return WG.substring(WQ.length, WG.length);
                                }
                            }
                            return null;
                        }(WI);
                        if (null != WW) {
                            WO(WI, WN = WW);
                            WP = WI;
                            document.cookie = WP + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
                        }
                    }
                    return WN;
                }
                function WM(WI) {
                    localStorage.removeItem(WI);
                }
                function WS(WI) {
                    var WP = Math.sign(WI), WN = Math.abs(WI);
                    if (Number.isNaN(WI) || null == WI) {
                        return '???';
                    }
                    if (!Number.isFinite(WN)) {
                        return (-1 == WP ? '-' : '') + '\u221E';
                    }
                    if (WN < 1000) {
                        return Math.round(WN * WP).toString();
                    }
                    if (E9.useScientificNotation) {
                        return (-1 == WP ? '-' : '') + WN.toExponential(2);
                    }
                    for (var WW = 0; WN > 999;) {
                        WW++;
                        WN /= 1000;
                    }
                    return (-1 == WP ? '-' : '') + (WN = CK(WN, WN < 10 ? 2 : WN < 100 ? 1 : 0)).toString() + c8.b[Math.min(WW - 1, c8.b.length - 1)];
                }
                window.onhashchange = function () {
                    ;
                    if (window.location.hash != NG) {
                        NG = window.location.hash;
                        var WI = window.location.hash;
                        if (2 == N6) {
                            if (WI.startsWith('#profile')) {
                                var WP = WI.split('/');
                                if (WP.length > 1) {
                                    var WN = +WP[1];
                                    if (!isNaN(WN)) {
                                        return mU(WN), void W5(WI);
                                    }
                                }
                            }
                            switch ('#changelog' == WI ? NQ() : ND && Nk(), '#settings' == WI ? EM() : EY && EE(), '#submit-feedback' == WI ? NX(2) : '#report-bug' == WI ? NX(1) : 0 != PO && NX(0), '#log-in' == WI ? vU() : vF && e0(), '#sign-up' == WI ? vB() : vq && e2(), '#achievements' == WI ? g7() : g6 && g8(), W5(WI), WI) {
                            case '#changelog':
                            case '#settings':
                            case '#submit-feedback':
                            case '#report-bug':
                            case '#log-in':
                            case '#sign-up':
                            case '#achievements':
                                break;
                            default:
                                W4();
                            }
                        } else {
                            if (3 == N6) {
                                if (WI.startsWith('#profile')) {
                                    var WW = WI.split('/');
                                    if (WW.length > 1) {
                                        var WD = +WW[1];
                                        if (!isNaN(WD)) {
                                            return mU(WD), void W5(WI);
                                        }
                                    }
                                    Z0();
                                } else {
                                    Z0();
                                }
                            } else {
                                W3();
                                W4();
                            }
                        }
                    }
                };
                window.onhashchange();
            }
        }, Y = {};
    function c(M) {
        var S = Y[M];
        if (void 0 !== S) {
            return S.exports;
        }
        var K = Y[M] = { 'exports': {} };
        return O[M].call(K.exports, K, K.exports, c), K.exports;
    }
    c.d = (M, S) => {
        ;
        for (var K in S)
            c.o(S, K) && !c.o(M, K) && Object.defineProperty(M, K, {
                'enumerable': true,
                'get': S[K]
            });
    };
    c.o = (M, S) => Object.prototype.hasOwnProperty.call(M, S);
    c(666);
    c(93);
})());